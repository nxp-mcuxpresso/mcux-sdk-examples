<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_frdmkv11z_examples_manifest_v3_10" name="SDK_2.x_frdmkv11z_examples_manifest_v3_10" format_version="3.10" api_version="2.0.0" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.10.xsd">
  <!--Timestamp (UTC): 2023-01-10 16:35:49.412776-->
  <!--This manifest is generated based on sdk repo commit: 11a5f6af5190bfe018a89b4d02c239713dc4cfa6-->
  <externalDefinitions>
    <definition extID="MKV11Z128VLH7"/>
    <definition extID="armgcc"/>
    <definition extID="mcuxpresso"/>
    <definition extID="compiler_gcc"/>
  </externalDefinitions>
  <ksdk id="MCUXpressoSDK2130_frdmkv11z_examples_manifest_v3_10" name="MCUXpressoSDK2130_frdmkv11z_examples_manifest_v3_10" version="2.13.0"/>
  <boards>
    <board id="frdmkv11z" name="FRDM-KV11Z" href="https://www.nxp.com/pip/FRDM-KV11Z" version="1.0.0" package="MKV11Z128VLH7">
      <examples>
        <example id="frdmkv11z_adc16_continuous_edma" name="adc16_continuous_edma" brief="The ADC16 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="driver_examples/adc16/continuous_edma">
          <external path="driver_examples/adc16/continuous_edma" type="xml">
            <files mask="adc16_continuous_edma_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="driver_examples/adc16/interrupt">
          <external path="driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_adc16_low_power" name="adc16_low_power" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/adc16_low_power">
          <external path="demo_apps/adc16_low_power" type="xml">
            <files mask="adc16_low_power_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_adc16_low_power_async_edma" name="adc16_low_power_async_edma" brief="The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/adc16_low_power_async_edma">
          <external path="demo_apps/adc16_low_power_async_edma" type="xml">
            <files mask="adc16_low_power_async_edma_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="driver_examples/adc16/polling">
          <external path="driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_bubble" name="bubble" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/bubble">
          <external path="demo_apps/bubble" type="xml">
            <files mask="bubble_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/bubble_peripheral">
          <external path="demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cmp" path="driver_examples/cmp/interrupt">
          <external path="driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cmp" path="driver_examples/cmp/polling">
          <external path="driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmsis_dspi_edma_b2b_transfer_master" name="cmsis_dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/dspi" path="cmsis_driver_examples/dspi/edma_b2b_transfer/master">
          <external path="cmsis_driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_dspi_edma_b2b_transfer_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmsis_dspi_edma_b2b_transfer_slave" name="cmsis_dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/dspi" path="cmsis_driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="cmsis_driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_dspi_edma_b2b_transfer_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmsis_dspi_int_b2b_transfer_master" name="cmsis_dspi_int_b2b_transfer_master" brief="The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/dspi" path="cmsis_driver_examples/dspi/int_b2b_transfer/master">
          <external path="cmsis_driver_examples/dspi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_dspi_int_b2b_transfer_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmsis_dspi_int_b2b_transfer_slave" name="cmsis_dspi_int_b2b_transfer_slave" brief="The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/dspi" path="cmsis_driver_examples/dspi/int_b2b_transfer/slave">
          <external path="cmsis_driver_examples/dspi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_dspi_int_b2b_transfer_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmsis_i2c_read_accel_value_transfer" name="cmsis_i2c_read_accel_value_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_read_accel_value example shows how to use CMSIS I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/i2c" path="cmsis_driver_examples/i2c/read_accel_value_transfer">
          <external path="cmsis_driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="cmsis_i2c_read_accel_value_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmsis_uart_edma_transfer" name="cmsis_uart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/uart" path="cmsis_driver_examples/uart/edma_transfer">
          <external path="cmsis_driver_examples/uart/edma_transfer" type="xml">
            <files mask="cmsis_uart_edma_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_cmsis_uart_interrupt_transfer" name="cmsis_uart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/uart" path="cmsis_driver_examples/uart/interrupt_transfer">
          <external path="cmsis_driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="cmsis_uart_interrupt_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/crc" path="driver_examples/crc">
          <external path="driver_examples/crc" type="xml">
            <files mask="crc_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/dac_adc">
          <external path="demo_apps/dac_adc" type="xml">
            <files mask="dac_adc_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="driver_examples/dac/basic">
          <external path="driver_examples/dac/basic" type="xml">
            <files mask="dac_basic_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="driver_examples/dac/buffer_interrupt">
          <external path="driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dac_continuous_pdb_edma" name="dac_continuous_pdb_edma" brief="The demo shows how to use the PDB to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PDB is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PDB and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.while read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="driver_examples/dac/continuous_pdb_edma">
          <external path="driver_examples/dac/continuous_pdb_edma" type="xml">
            <files mask="dac_continuous_pdb_edma_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_edma_b2b_transfer_master" name="dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/edma_b2b_transfer/master">
          <external path="driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="dspi_edma_b2b_transfer_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_edma_b2b_transfer_slave" name="dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="dspi_edma_b2b_transfer_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_half_duplex_edma_master" name="dspi_half_duplex_edma_master" brief="The dspi_half_duplex_edma_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sendsa piece of data to slave, and receive a piece of data from slave. This example checks if the data received fromslave is correct.Besides, master will transfer in EDMA way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/half_duplex_transfer/edma/master">
          <external path="driver_examples/dspi/half_duplex_transfer/edma/master" type="xml">
            <files mask="dspi_half_duplex_edma_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_half_duplex_edma_slave" name="dspi_half_duplex_edma_slave" brief="The dspi_half_duplex_edma_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses edma mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/half_duplex_transfer/edma/slave">
          <external path="driver_examples/dspi/half_duplex_transfer/edma/slave" type="xml">
            <files mask="dspi_half_duplex_edma_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_half_duplex_int_master" name="dspi_half_duplex_int_master" brief="The dspi_half_duplex_int_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer in interrupt way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/half_duplex_transfer/int/master">
          <external path="driver_examples/dspi/half_duplex_transfer/int/master" type="xml">
            <files mask="dspi_half_duplex_int_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_half_duplex_int_slave" name="dspi_half_duplex_int_slave" brief="The dspi_half_duplex_int_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/half_duplex_transfer/int/slave">
          <external path="driver_examples/dspi/half_duplex_transfer/int/slave" type="xml">
            <files mask="dspi_half_duplex_int_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_half_duplex_polling_master" name="dspi_half_duplex_polling_master" brief="The dspi_half_duplex_polling_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends apiece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. Besides, master will transfer in polling way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/half_duplex_transfer/polling/master">
          <external path="driver_examples/dspi/half_duplex_transfer/polling/master" type="xml">
            <files mask="dspi_half_duplex_polling_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_half_duplex_polling_slave" name="dspi_half_duplex_polling_slave" brief="The dspi_half_duplex_polling_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/half_duplex_transfer/polling/slave">
          <external path="driver_examples/dspi/half_duplex_transfer/polling/slave" type="xml">
            <files mask="dspi_half_duplex_polling_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_interrupt_b2b_master" name="dspi_interrupt_b2b_master" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_master.c' includes the DSPI master code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/interrupt_b2b/master">
          <external path="driver_examples/dspi/interrupt_b2b/master" type="xml">
            <files mask="dspi_interrupt_b2b_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_interrupt_b2b_slave" name="dspi_interrupt_b2b_slave" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the DSPI slave code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/interrupt_b2b/slave">
          <external path="driver_examples/dspi/interrupt_b2b/slave" type="xml">
            <files mask="dspi_interrupt_b2b_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_interrupt_b2b_transfer_master" name="dspi_interrupt_b2b_transfer_master" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/interrupt_b2b_transfer/master">
          <external path="driver_examples/dspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_interrupt_b2b_transfer_slave" name="dspi_interrupt_b2b_transfer_slave" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/interrupt_b2b_transfer/slave">
          <external path="driver_examples/dspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_polling_b2b_transfer_master" name="dspi_polling_b2b_transfer_master" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/polling_b2b_transfer/master">
          <external path="driver_examples/dspi/polling_b2b_transfer/master" type="xml">
            <files mask="dspi_polling_b2b_transfer_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_dspi_polling_b2b_transfer_slave" name="dspi_polling_b2b_transfer_slave" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="driver_examples/dspi/polling_b2b_transfer/slave">
          <external path="driver_examples/dspi/polling_b2b_transfer/slave" type="xml">
            <files mask="dspi_polling_b2b_transfer_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ecompass" name="ecompass" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/ecompass">
          <external path="demo_apps/ecompass" type="xml">
            <files mask="ecompass_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ecompass_peripheral" name="ecompass_peripheral" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading). You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/ecompass_peripheral">
          <external path="demo_apps/ecompass_peripheral" type="xml">
            <files mask="ecompass_peripheral_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_edma_channel_link" name="edma_channel_link" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="driver_examples/edma/channel_link">
          <external path="driver_examples/edma/channel_link" type="xml">
            <files mask="edma_channel_link_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_edma_interleave_transfer" name="edma_interleave_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="driver_examples/edma/interleave_transfer">
          <external path="driver_examples/edma/interleave_transfer" type="xml">
            <files mask="edma_interleave_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="driver_examples/edma/memory_to_memory">
          <external path="driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_edma_ping_pong_transfer" name="edma_ping_pong_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="driver_examples/edma/ping_pong_transfer">
          <external path="driver_examples/edma/ping_pong_transfer" type="xml">
            <files mask="edma_ping_pong_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="driver_examples/edma/scatter_gather">
          <external path="driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_edma_wrap_transfer" name="edma_wrap_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="driver_examples/edma/wrap_transfer">
          <external path="driver_examples/edma/wrap_transfer" type="xml">
            <files mask="edma_wrap_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ewm" name="ewm" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ewm" path="driver_examples/ewm">
          <external path="driver_examples/ewm" type="xml">
            <files mask="ewm_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_flexcan_interrupt_transfer" name="flexcan_interrupt_transfer" brief="The flexcan_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="driver_examples/flexcan/interrupt_transfer">
          <external path="driver_examples/flexcan/interrupt_transfer" type="xml">
            <files mask="flexcan_interrupt_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_flexcan_loopback" name="flexcan_loopback" brief="The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="driver_examples/flexcan/loopback">
          <external path="driver_examples/flexcan/loopback" type="xml">
            <files mask="flexcan_loopback_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_flexcan_loopback_edma_transfer" name="flexcan_loopback_edma_transfer" brief="The flexcan_loopback_edma example shows how to use the EDMA version transactional driver to receiveCAN Message from Rx FIFO:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Tx Message Buffer and also setup Rx FIFO. After that, the example will send 4 CAN Messagesfrom Tx Message Buffer to Rx FIFO through internal loopback interconnect and read them out usingEDMA version FlexCAN transactional driver. The Sent and received message will be print out to terminalat last." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="driver_examples/flexcan/loopback_edma_transfer">
          <external path="driver_examples/flexcan/loopback_edma_transfer" type="xml">
            <files mask="flexcan_loopback_edma_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_flexcan_loopback_transfer" name="flexcan_loopback_transfer" brief="The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="driver_examples/flexcan/loopback_transfer">
          <external path="driver_examples/flexcan/loopback_transfer" type="xml">
            <files mask="flexcan_loopback_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_event">
          <external path="rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_generic">
          <external path="rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_hello">
          <external path="rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_i2c" name="freertos_i2c" brief="The freertos_i2c example shows an application using RTOS tasks with I2C driver:The example supports 2 different connections:On board connection and board to board connection.With one board connection, 2 I2C instances of the same board are used. One i2c instance used as I2C master and another I2C instance used as I2C slave .    Default settings in freertos_i2c.c (in folder boards/&lt;board&gt;/rtos_examples/freertos_i2c) is applied.    Two tasks are created. One task is associated with an I2C master operation and another task deals with I2C slave operation.    1. I2C master task sends data to I2C slave task.    2. I2C master task reads data sent back from I2C slave task.    The transmit data and the receive data of both I2C master task and I2C slave task are printed out on terminal.With board to board connection, one I2C instance on one board is used as I2C master and the I2C instance on other board is used as I2C slave. Tasks are created to run on each board to handle I2C communication.    File freertos_i2c.c should have following definitions:    #define EXAMPLE_CONNECT_I2C BOARD_TO_BOARD    For board used as I2C master:        #define I2C_MASTER_SLAVE isMASTER    For board used as I2C slave:        #define I2C_MASTER_SLAVE isSLAVE" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_i2c">
          <external path="rtos_examples/freertos_i2c" type="xml">
            <files mask="freertos_i2c_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_mutex">
          <external path="rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_queue">
          <external path="rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_sem">
          <external path="rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_sem_static" name="freertos_sem_static" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_sem_static">
          <external path="rtos_examples/freertos_sem_static" type="xml">
            <files mask="freertos_sem_static_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_swtimer">
          <external path="rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_tickless">
          <external path="rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_freertos_uart" name="freertos_uart" brief="The UART example for FreeRTOS demonstrates the possibility to use the UART driver in the RTOS.The example uses single instance of UART IP and writes string into, then reads back chars.After every 4B received, these are sent back on UART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="rtos_examples/freertos_uart">
          <external path="rtos_examples/freertos_uart" type="xml">
            <files mask="freertos_uart_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="driver_examples/ftm/combine_pwm">
          <external path="driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="driver_examples/ftm/dual_edge_capture">
          <external path="driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="driver_examples/ftm/input_capture">
          <external path="driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="driver_examples/ftm/output_compare">
          <external path="driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ftm_pdb_adc16" name="ftm_pdb_adc16" brief="The FTM / PDB demo application demonstrates how to use the FTM external trigger to start the ADC conversion using thePDB. FTM0 is configured as a complementary combined mode, and each channel output frequency is 16 KHz. The complementarychannel dead time is 1 µs. The PDB pre-trigger works in back-to-back mode. The ADC0 and ADC1 work in single-end mode.The ADC0 uses channel 1 and channel 5, and ADC1 uses channel 1 and channel 7." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/ftm_pdb_adc16">
          <external path="demo_apps/ftm_pdb_adc16" type="xml">
            <files mask="ftm_pdb_adc16_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="driver_examples/ftm/pwm_twochannel">
          <external path="driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="driver_examples/ftm/simple_pwm">
          <external path="driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="driver_examples/ftm/timer">
          <external path="driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="driver_examples/gpio/input_interrupt">
          <external path="driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="driver_examples/gpio/led_output">
          <external path="driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/hello_world">
          <external path="demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_i2c_polling_b2b_transfer_master" name="i2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="driver_examples/i2c/polling_b2b_transfer/master">
          <external path="driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="i2c_polling_b2b_transfer_master_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_i2c_polling_b2b_transfer_slave" name="i2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="i2c_polling_b2b_transfer_slave_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="driver_examples/i2c/read_accel_value_transfer">
          <external path="driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/led_blinky">
          <external path="demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_log_bm" name="log_bm" brief="The log demo is used to demonstrate how to use log component. The main function of the demo is to prompt the LOG level string according to the user input log level command." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="component_examples" path="component_examples/log/bm">
          <external path="component_examples/log/bm" type="xml">
            <files mask="log_bm_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_log_freertos" name="log_freertos" brief="The log demo is used to demonstrate how to use log component. The main function of the demo is to prompt the LOG level string according to the user input log level command." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="component_examples" path="component_examples/log/freertos">
          <external path="component_examples/log/freertos" type="xml">
            <files mask="log_freertos_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lptmr" path="driver_examples/lptmr">
          <external path="driver_examples/lptmr" type="xml">
            <files mask="lptmr_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_mcg_fee_blpe" name="mcg_fee_blpe" brief="The fee_bple example shows how to use MCG driver to change from FEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to Fee mode from default reset mode    Change from FEE -&gt; FBE -&gt; BLPE    Change back BLPE -&gt; FBE -&gt; FEE    Get System clock in FEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcg" path="driver_examples/mcg/fee_blpe">
          <external path="driver_examples/mcg/fee_blpe" type="xml">
            <files mask="mcg_fee_blpe_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_mcg_fee_blpi" name="mcg_fee_blpi" brief="The fee_bpli example shows how to use MCG driver to change from FEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEE mode from default reset mode    Change from FEE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FEE    Get System clock in FEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcg" path="driver_examples/mcg/fee_blpi">
          <external path="driver_examples/mcg/fee_blpi" type="xml">
            <files mask="mcg_fee_blpi_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_mcg_fei_blpi" name="mcg_fei_blpi" brief="The fei_bpli example shows how to use MCG driver to change from FEI mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEI mode from default reset mode    Change mode FEI -&gt; FBI -&gt; BLPI    Change back BLPE -&gt; FBI -&gt; FEI    Get System clock in FEI mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcg" path="driver_examples/mcg/fei_blpi">
          <external path="driver_examples/mcg/fei_blpi" type="xml">
            <files mask="mcg_fei_blpi_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_mmdvsq" name="mmdvsq" brief="The MMDVSQ Example project is a demonstration program that uses the KSDK software to Calculation square root and QuotientMMDVSQ Peripheral Driver ExampleStart MMDVSQ ExampleCalculation square root, please enter radicandSquare root of 9 is 3Calculation division to get remainder and quotientEnter dividend and divisorRemainder of 10 and 5 is 0Quotient of 10 and 5 is 2" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mmdvsq" path="driver_examples/mmdvsq">
          <external path="driver_examples/mmdvsq" type="xml">
            <files mask="mmdvsq_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_pdb_adc16_trigger" name="pdb_adc16_trigger" brief="The pdb_adc16_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would begenerated and sent to the ADC module.In this example, the ADC16 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="driver_examples/pdb/adc16_trigger">
          <external path="driver_examples/pdb/adc16_trigger" type="xml">
            <files mask="pdb_adc16_trigger_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_pdb_dac_trigger" name="pdb_dac_trigger" brief="The pdb_dac_trigger example shows how to use the PDB to generate a DAC trigger.Based on the basic counter, to use the DAC trigger, just to enable the DAC trigger's &quot;milestone&quot; and set the user-defined value for it.The DAC's &quot;milestone&quot; is called as &quot;interval&quot;. Multiple DAC trigger intervals can be included into one PDB counter's cycle.DAC trigger's counter would reset after the trigger is created and start counting again to the interval value.In this example, the DAC is configured with hardware buffer enabled in normal work mode. Once it gets the trigger from the PDB, the buffer read pointer increases." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="driver_examples/pdb/dac_trigger">
          <external path="driver_examples/pdb/dac_trigger" type="xml">
            <files mask="pdb_dac_trigger_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_pdb_delay_interrupt" name="pdb_delay_interrupt" brief="The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="driver_examples/pdb/delay_interrupt">
          <external path="driver_examples/pdb/delay_interrupt" type="xml">
            <files mask="pdb_delay_interrupt_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="driver_examples/flash/pflash">
          <external path="driver_examples/flash/pflash" type="xml">
            <files mask="pflash_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/power_manager">
          <external path="demo_apps/power_manager" type="xml">
            <files mask="power_manager_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/power_mode_switch">
          <external path="demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="demo_apps/shell">
          <external path="demo_apps/shell" type="xml">
            <files mask="shell_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_uart_9bit_interrupt_transfer" name="uart_9bit_interrupt_transfer" brief="The uart_9bit_interrupt_transfer example shows how to use uart driver in 9-bit mode in multi-slave system. Master can send data to slave with certain address specifically, and slave can only receive data when it is addressed. In this example, one uart instance is used with address configured. Its TX and RX pins are connected together. First it sends a piece of data out, then addresses itself, after that sends the other piece of data. Only data sent after the address can be received by itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="driver_examples/uart/9bit_interrupt_transfer">
          <external path="driver_examples/uart/9bit_interrupt_transfer" type="xml">
            <files mask="uart_9bit_interrupt_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_uart_edma_transfer" name="uart_edma_transfer" brief="The uart_edma example shows how to use uart driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="driver_examples/uart/edma_transfer">
          <external path="driver_examples/uart/edma_transfer" type="xml">
            <files mask="uart_edma_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_uart_interrupt" name="uart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="driver_examples/uart/interrupt">
          <external path="driver_examples/uart/interrupt" type="xml">
            <files mask="uart_interrupt_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_uart_interrupt_rb_transfer" name="uart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="driver_examples/uart/interrupt_rb_transfer">
          <external path="driver_examples/uart/interrupt_rb_transfer" type="xml">
            <files mask="uart_interrupt_rb_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_uart_interrupt_transfer" name="uart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="driver_examples/uart/interrupt_transfer">
          <external path="driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="uart_interrupt_transfer_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_uart_polling" name="uart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="driver_examples/uart/polling">
          <external path="driver_examples/uart/polling" type="xml">
            <files mask="uart_polling_v3_10.xml"/>
          </external>
        </example>
        <example id="frdmkv11z_wdog" name="wdog" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 10 times of refreshing the watchdog in None-window mode, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing in Window mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wdog" path="driver_examples/wdog">
          <external path="driver_examples/wdog" type="xml">
            <files mask="wdog_v3_10.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
</ksdk:manifest>
