<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_FRDM-MCXA153_manifest_v3_14" name="SDK Version Superset" brief="SDK Superset" format_version="3.14" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.14.xsd">

  <ksdk id="MCUXpressoSDK216100" name="MCUXpresso SDK216100" version="2.16.100" revision="2.16.100"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.10.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded_13-2023.10" version="13.2.1" full_name="GCC ARM Embedded 13-2023.10" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.10.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="frdmmcxa153" name="FRDM-MCXA153" version="1.0.0" package="MCXA153VLH">
      <description>MCXA153 Evaluation Kit</description>
      <image path="core/boards/frdmmcxa153" type="image">
        <files mask="frdmmcxa153.png"/>
      </image>
      <examples>
        <example id="frdmmcxa153_dev_hid_mouse_freertos_static" name="dev_hid_mouse_freertos_static" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_hid_mouse/freertos_static">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_hid_mouse/freertos_static" type="xml">
            <files mask="dev_hid_mouse_freertos_static_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_audio_generator_freertos" name="dev_audio_generator_freertos" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_audio_generator/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_audio_generator/freertos" type="xml">
            <files mask="dev_audio_generator_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_cdc_vcom_freertos" name="dev_cdc_vcom_freertos" brief="The Virtual COM project is  enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_cdc_vcom/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_cdc_vcom/freertos" type="xml">
            <files mask="dev_cdc_vcom_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_composite_cdc_vcom_cdc_vcom_freertos" name="dev_composite_cdc_vcom_cdc_vcom_freertos" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/freertos" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_composite_hid_mouse_hid_keyboard_freertos" name="dev_composite_hid_mouse_hid_keyboard_freertos" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/freertos" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_hid_generic_freertos" name="dev_hid_generic_freertos" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_hid_generic/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_hid_generic/freertos" type="xml">
            <files mask="dev_hid_generic_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_hid_mouse_freertos" name="dev_hid_mouse_freertos" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_hid_mouse/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_hid_mouse/freertos" type="xml">
            <files mask="dev_hid_mouse_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_phdc_weighscale_freertos" name="dev_phdc_weighscale_freertos" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_phdc_weighscale/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_phdc_weighscale/freertos" type="xml">
            <files mask="dev_phdc_weighscale_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_printer_virtual_plain_text_freertos" name="dev_printer_virtual_plain_text_freertos" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_printer_virtual_plain_text/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_printer_virtual_plain_text/freertos" type="xml">
            <files mask="dev_printer_virtual_plain_text_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_video_virtual_camera_freertos" name="dev_video_virtual_camera_freertos" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_video_virtual_camera/freertos">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_video_virtual_camera/freertos" type="xml">
            <files mask="dev_video_virtual_camera_freertos_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_audio_generator_bm" name="dev_audio_generator_bm" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_audio_generator/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_audio_generator/bm" type="xml">
            <files mask="dev_audio_generator_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_audio_generator_lite_bm" name="dev_audio_generator_lite_bm" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_audio_generator_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_audio_generator_lite/bm" type="xml">
            <files mask="dev_audio_generator_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_cdc_vcom_bm" name="dev_cdc_vcom_bm" brief="The Virtual COM project is enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_cdc_vcom/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_cdc_vcom/bm" type="xml">
            <files mask="dev_cdc_vcom_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_cdc_vcom_lite_bm" name="dev_cdc_vcom_lite_bm" brief="The Virtual COM project enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_cdc_vcom_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_cdc_vcom_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_composite_cdc_vcom_cdc_vcom_bm" name="dev_composite_cdc_vcom_cdc_vcom_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_composite_cdc_vcom_cdc_vcom_lite_bm" name="dev_composite_cdc_vcom_cdc_vcom_lite_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_composite_hid_mouse_hid_keyboard_bm" name="dev_composite_hid_mouse_hid_keyboard_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_composite_hid_mouse_hid_keyboard_lite_bm" name="dev_composite_hid_mouse_hid_keyboard_lite_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_dfu_bm" name="dev_dfu_bm" brief="The DFU project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a compoiste dfu device, users can download one firmware to the dfu device with the tool called &quot;dfu-util&quot;. the dfu example write the firmware content to flash and will check the CRC32 which stored in the last 4 byte of the firmware.if the CRC32 check is right, then the dfu example will run the new firmware.Generally speaking, the firmware doesn't have CRC32. sothe following content will introduce how to add CRC32 to the firmware." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_dfu/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_dfu/bm" type="xml">
            <files mask="dev_dfu_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_dfu_lite_bm" name="dev_dfu_lite_bm" brief="The DFU project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a compoiste dfu device, users can download one firmware to the dfu device with the tool called &quot;dfu-util&quot;. the dfu example write the firmware content to flash and will check the CRC32 which stored in the last 4 byte of the firmware.if the CRC32 check is right, then the dfu example will run the new firmware.Generally speaking, the firmware doesn't have CRC32. sothe following content will introduce how to add CRC32 to the firmware." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_dfu_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_dfu_lite/bm" type="xml">
            <files mask="dev_dfu_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_hid_generic_bm" name="dev_hid_generic_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_hid_generic/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_hid_generic/bm" type="xml">
            <files mask="dev_hid_generic_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_hid_generic_lite_bm" name="dev_hid_generic_lite_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_hid_generic_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_hid_generic_lite/bm" type="xml">
            <files mask="dev_hid_generic_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_hid_mouse_bm" name="dev_hid_mouse_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_hid_mouse/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_hid_mouse/bm" type="xml">
            <files mask="dev_hid_mouse_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_hid_mouse_lite_bm" name="dev_hid_mouse_lite_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_hid_mouse_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_hid_mouse_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_phdc_weighscale_bm" name="dev_phdc_weighscale_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_phdc_weighscale/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_phdc_weighscale/bm" type="xml">
            <files mask="dev_phdc_weighscale_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_phdc_weighscale_lite_bm" name="dev_phdc_weighscale_lite_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_phdc_weighscale_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_phdc_weighscale_lite/bm" type="xml">
            <files mask="dev_phdc_weighscale_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_printer_virtual_plain_text_bm" name="dev_printer_virtual_plain_text_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_printer_virtual_plain_text/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_printer_virtual_plain_text/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_printer_virtual_plain_text_lite_bm" name="dev_printer_virtual_plain_text_lite_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_printer_virtual_plain_text_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_printer_virtual_plain_text_lite/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_suspend_resume_hid_mouse_bm" name="dev_suspend_resume_hid_mouse_bm" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_suspend_resume_device_hid_mouse/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_suspend_resume_device_hid_mouse/bm" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_suspend_resume_hid_mouse_lite_bm" name="dev_suspend_resume_hid_mouse_lite_bm" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_suspend_resume_device_hid_mouse_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_suspend_resume_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_video_virtual_camera_bm" name="dev_video_virtual_camera_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_video_virtual_camera/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_video_virtual_camera/bm" type="xml">
            <files mask="dev_video_virtual_camera_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_dev_video_virtual_camera_lite_bm" name="dev_video_virtual_camera_lite_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="usb_examples" path="examples/frdmmcxa153/usb_examples/usb_device_video_virtual_camera_lite/bm">
          <external path="examples/frdmmcxa153/usb_examples/usb_device_video_virtual_camera_lite/bm" type="xml">
            <files mask="dev_video_virtual_camera_lite_bm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmmcxa153/demo_apps/hello_world">
          <external path="examples/frdmmcxa153/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmmcxa153/demo_apps/led_blinky">
          <external path="examples/frdmmcxa153/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmmcxa153/driver_examples/lpuart/polling">
          <external path="examples/frdmmcxa153/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmmcxa153/driver_examples/lpuart/interrupt">
          <external path="examples/frdmmcxa153/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpuart_polling_seven_bits" name="lpuart_polling_seven_bits" brief="The lpuart_polling_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console instantly.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmmcxa153/driver_examples/lpuart/polling_seven_bits">
          <external path="examples/frdmmcxa153/driver_examples/lpuart/polling_seven_bits" type="xml">
            <files mask="lpuart_polling_seven_bits_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmmcxa153/driver_examples/lpuart/interrupt_transfer">
          <external path="examples/frdmmcxa153/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpuart_interrupt_transfer_seven_bits" name="lpuart_interrupt_transfer_seven_bits" brief="The lpuart_interrupt_transfer_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmmcxa153/driver_examples/lpuart/interrupt_transfer_seven_bits">
          <external path="examples/frdmmcxa153/driver_examples/lpuart/interrupt_transfer_seven_bits" type="xml">
            <files mask="lpuart_interrupt_transfer_seven_bits_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmmcxa153/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="examples/frdmmcxa153/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmmcxa153/driver_examples/lpuart/edma_transfer">
          <external path="examples/frdmmcxa153/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpi2c_interrupt_b2b_transfer_master" name="lpi2c_interrupt_b2b_transfer_master" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmmcxa153/driver_examples/lpi2c/interrupt_b2b_transfer/master">
          <external path="examples/frdmmcxa153/driver_examples/lpi2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpi2c_interrupt_b2b_transfer_slave" name="lpi2c_interrupt_b2b_transfer_slave" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmmcxa153/driver_examples/lpi2c/interrupt_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/driver_examples/lpi2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpi2c_polling_b2b_master" name="lpi2c_polling_b2b_master" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmmcxa153/driver_examples/lpi2c/polling_b2b/master">
          <external path="examples/frdmmcxa153/driver_examples/lpi2c/polling_b2b/master" type="xml">
            <files mask="lpi2c_polling_b2b_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpi2c_polling_b2b_slave" name="lpi2c_polling_b2b_slave" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmmcxa153/driver_examples/lpi2c/polling_b2b/slave">
          <external path="examples/frdmmcxa153/driver_examples/lpi2c/polling_b2b/slave" type="xml">
            <files mask="lpi2c_polling_b2b_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpi2c_edma_b2b_transfer_master" name="lpi2c_edma_b2b_transfer_master" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmmcxa153/driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="examples/frdmmcxa153/driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpi2c_edma_b2b_transfer_slave" name="lpi2c_edma_b2b_transfer_slave" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmmcxa153/driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpadc_polling" name="lpadc_polling" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/frdmmcxa153/driver_examples/lpadc/polling">
          <external path="examples/frdmmcxa153/driver_examples/lpadc/polling" type="xml">
            <files mask="lpadc_polling_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpadc_interrupt" name="lpadc_interrupt" brief="The lpdc_single_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/frdmmcxa153/driver_examples/lpadc/interrupt">
          <external path="examples/frdmmcxa153/driver_examples/lpadc/interrupt" type="xml">
            <files mask="lpadc_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpadc_trigger_exception" name="lpadc_trigger_exception" brief="The lpadc_trigger_exception example demonstrates the usage of trigger exception feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/frdmmcxa153/driver_examples/lpadc/trigger_exception">
          <external path="examples/frdmmcxa153/driver_examples/lpadc/trigger_exception" type="xml">
            <files mask="lpadc_trigger_exception_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpadc_temperature_measurement" name="lpadc_temperature_measurement" brief="The lpadc_temperature_measurement example shows how to measure the temperature within the internal sensor. In this example, the ADC input channel is mapped to an internal temperature sensor. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value. In ADC ISR, the watermark flag would be cleared by reading the conversion result value. When the conversion done, two valid result will be put in the FIFO, then the temperature can be calculated within the two results and a specific formula." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/frdmmcxa153/driver_examples/lpadc/temperature_measurement">
          <external path="examples/frdmmcxa153/driver_examples/lpadc/temperature_measurement" type="xml">
            <files mask="lpadc_temperature_measurement_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_polling_b2b_transfer_master" name="lpspi_polling_b2b_transfer_master" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/polling_b2b_transfer/master">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/polling_b2b_transfer/master" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_polling_b2b_transfer_slave" name="lpspi_polling_b2b_transfer_slave" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/polling_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/polling_b2b_transfer/slave" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_interrupt" name="lpspi_interrupt" brief="The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/interrupt">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/interrupt" type="xml">
            <files mask="lpspi_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_interrupt_b2b_master" name="lpspi_interrupt_b2b_master" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/interrupt_b2b/master">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/interrupt_b2b/master" type="xml">
            <files mask="lpspi_interrupt_b2b_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_interrupt_b2b_slave" name="lpspi_interrupt_b2b_slave" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/interrupt_b2b/slave">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/interrupt_b2b/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_interrupt_b2b_transfer_master" name="lpspi_interrupt_b2b_transfer_master" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/interrupt_b2b_transfer/master">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_interrupt_b2b_transfer_slave" name="lpspi_interrupt_b2b_transfer_slave" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/interrupt_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_edma_b2b_transfer_master" name="lpspi_edma_b2b_transfer_master" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpspi_edma_b2b_transfer_slave" name="lpspi_edma_b2b_transfer_slave" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmmcxa153/driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpi2c_int_b2b_transfer_master" name="cmsis_lpi2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="examples/frdmmcxa153/cmsis_driver_examples/lpi2c/int_b2b_transfer/master">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpi2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpi2c_int_b2b_transfer_slave" name="cmsis_lpi2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="examples/frdmmcxa153/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpi2c_edma_b2b_transfer_master" name="cmsis_lpi2c_edma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="examples/frdmmcxa153/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpi2c_edma_b2b_transfer_slave" name="cmsis_lpi2c_edma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="examples/frdmmcxa153/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpspi_int_b2b_transfer_master" name="cmsis_lpspi_int_b2b_transfer_master" brief="The cmsis_lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="examples/frdmmcxa153/cmsis_driver_examples/lpspi/int_b2b_transfer/master">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpspi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpspi_int_b2b_transfer_slave" name="cmsis_lpspi_int_b2b_transfer_slave" brief="The lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="examples/frdmmcxa153/cmsis_driver_examples/lpspi/int_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpspi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpspi_edma_b2b_transfer_master" name="cmsis_lpspi_edma_b2b_transfer_master" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="examples/frdmmcxa153/cmsis_driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpspi_edma_b2b_transfer_slave" name="cmsis_lpspi_edma_b2b_transfer_slave" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="examples/frdmmcxa153/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpuart_interrupt_transfer" name="cmsis_lpuart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="examples/frdmmcxa153/cmsis_driver_examples/lpuart/interrupt_transfer">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cmsis_lpuart_edma_transfer" name="cmsis_lpuart_edma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="examples/frdmmcxa153/cmsis_driver_examples/lpuart/edma_transfer">
          <external path="examples/frdmmcxa153/cmsis_driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="cmsis_lpuart_edma_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpcmp_interrupt" name="lpcmp_interrupt" brief="The LPCMP interrupt Example shows how to use interrupt with LPCMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any LPCMP interrupt happens, the LPCMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpcmp" path="examples/frdmmcxa153/driver_examples/lpcmp/interrupt">
          <external path="examples/frdmmcxa153/driver_examples/lpcmp/interrupt" type="xml">
            <files mask="lpcmp_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpcmp_polling" name="lpcmp_polling" brief="The LPCMP polling Example shows the simplest way to use LPCMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpcmp" path="examples/frdmmcxa153/driver_examples/lpcmp/polling">
          <external path="examples/frdmmcxa153/driver_examples/lpcmp/polling" type="xml">
            <files mask="lpcmp_polling_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lpcmp_round_robin" name="lpcmp_round_robin" brief="The LPCMP round robin example is a simple demonstration program to use the LPCMP driver and help user with a quick start.In this example, user needs to specify which port and channel to fixed, users also need to specify one or more checker channels. Before doing the comparison, it is necessary to preset the comparison result of each checker channel with the fixed channel. Change the input voltage of checker channels, if the output results of the comparator is different from the preset value, an interrupt will be triggered, and the triggered channel's information will be printed on the terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpcmp" path="examples/frdmmcxa153/driver_examples/lpcmp/round_robin">
          <external path="examples/frdmmcxa153/driver_examples/lpcmp/round_robin" type="xml">
            <files mask="lpcmp_round_robin_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs. The example use LEDs and buttons to demonstrates GPIO API for port and pin manipulation (init, set,clear, and toggle)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmmcxa153/driver_examples/gpio/led_output">
          <external path="examples/frdmmcxa153/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear registers for each GPIO pin output register. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmmcxa153/driver_examples/gpio/input_interrupt">
          <external path="examples/frdmmcxa153/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_ctimer_match_example" name="ctimer_match_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, the match feature of the CTimer is used to toggle the output level." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/frdmmcxa153/driver_examples/ctimer/simple_match">
          <external path="examples/frdmmcxa153/driver_examples/ctimer/simple_match" type="xml">
            <files mask="ctimer_match_example_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_ctimer_match_interrupt_example" name="ctimer_match_interrupt_example" brief="The Simple Match Interrupt project is to demonstrate usage of the SDK CTimer driver with interrupt callback functionsIn this example the upon match and IO pin connected to the LED is toggled and the timer is reset, so it would generate a square wave.With an interrupt callback the match value is changed frequently in such a way that the frequency of the output square wave is increased gradually." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/frdmmcxa153/driver_examples/ctimer/simple_match_interrupt">
          <external path="examples/frdmmcxa153/driver_examples/ctimer/simple_match_interrupt" type="xml">
            <files mask="ctimer_match_interrupt_example_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_ctimer_pwm_example" name="ctimer_pwm_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, CTimer is used to generate a PWM signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/frdmmcxa153/driver_examples/ctimer/simple_pwm">
          <external path="examples/frdmmcxa153/driver_examples/ctimer/simple_pwm" type="xml">
            <files mask="ctimer_pwm_example_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_ctimer_pwm_interrupt_example" name="ctimer_pwm_interrupt_example" brief="The Simple PWM Interrupt project is to demonstrate usage of the SDK CTimer driver as a PWM with interrupt callback functionsIn this example an IO pin connected to the LED is used as a PWM output line to generate a PWM signal.With an interrupt callback the PWM duty cycle is changed frequently in such a way that the LED brightness can be varied." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/frdmmcxa153/driver_examples/ctimer/simple_pwm_interrupt">
          <external path="examples/frdmmcxa153/driver_examples/ctimer/simple_pwm_interrupt" type="xml">
            <files mask="ctimer_pwm_interrupt_example_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lptmr" path="examples/frdmmcxa153/driver_examples/lptmr">
          <external path="examples/frdmmcxa153/driver_examples/lptmr" type="xml">
            <files mask="lptmr_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_bus_master" name="i3c_bus_master" brief="The i3c_bus_master example shows how to use i3c_bus component to create I3C bus and i3c master on bus." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="component_examples/i3c" path="examples/frdmmcxa153/component_examples/i3c_bus/master">
          <external path="examples/frdmmcxa153/component_examples/i3c_bus/master" type="xml">
            <files mask="i3c_bus_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_bus_slave" name="i3c_bus_slave" brief="The i3c_bus_slave example shows how to use i3c_bus component to work as i3c bus slave." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="component_examples/i3c" path="examples/frdmmcxa153/component_examples/i3c_bus/slave">
          <external path="examples/frdmmcxa153/component_examples/i3c_bus/slave" type="xml">
            <files mask="i3c_bus_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_polling_b2b_transfer_master" name="i3c_polling_b2b_transfer_master" brief="The i3c_polling_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using polling method. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/frdmmcxa153/driver_examples/i3c/polling_b2b_transfer/master">
          <external path="examples/frdmmcxa153/driver_examples/i3c/polling_b2b_transfer/master" type="xml">
            <files mask="i3c_polling_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_polling_b2b_transfer_slave" name="i3c_polling_b2b_transfer_slave" brief="The i3c_polling_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a polling master. In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/frdmmcxa153/driver_examples/i3c/polling_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/driver_examples/i3c/polling_b2b_transfer/slave" type="xml">
            <files mask="i3c_polling_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_interrupt_b2b_transfer_master" name="i3c_interrupt_b2b_transfer_master" brief="The i3c_interrupt_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using interrupt method. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/frdmmcxa153/driver_examples/i3c/interrupt_b2b_transfer/master">
          <external path="examples/frdmmcxa153/driver_examples/i3c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i3c_interrupt_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_interrupt_b2b_transfer_slave" name="i3c_interrupt_b2b_transfer_slave" brief="The i3c_interrupt_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a interrupt master. In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/frdmmcxa153/driver_examples/i3c/interrupt_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/driver_examples/i3c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i3c_interrupt_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_edma_b2b_transfer_master" name="i3c_edma_b2b_transfer_master" brief="The i3c_edma_b2b_transfer_master example shows how to use i3c driver as slave to do board to board transfer with EDMA. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/frdmmcxa153/driver_examples/i3c/edma_b2b_transfer/master">
          <external path="examples/frdmmcxa153/driver_examples/i3c/edma_b2b_transfer/master" type="xml">
            <files mask="i3c_edma_b2b_transfer_master_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_edma_b2b_transfer_slave" name="i3c_edma_b2b_transfer_slave" brief="The i3c_edma_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with EDMA. In this example, one i3c instance as slave and another i3c instance on the other board as master. Slave sends a piece of data to master, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/frdmmcxa153/driver_examples/i3c/edma_b2b_transfer/slave">
          <external path="examples/frdmmcxa153/driver_examples/i3c/edma_b2b_transfer/slave" type="xml">
            <files mask="i3c_edma_b2b_transfer_slave_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_flashiap" name="flashiap" brief="The FLASIAP project is a simple demonstration program of the SDK FLASIAP driver. It erases and programs a portion of on-chip flash memory. A message a printed on the UART terminal as various operations on flash memory are performed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmmcxa153/driver_examples/romapi/flashiap">
          <external path="examples/frdmmcxa153/driver_examples/romapi/flashiap" type="xml">
            <files mask="flashiap_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_runbootloader" name="runbootloader" brief="The runbootloader project is a simple demonstration which run into the bootloader with the user parameter. The demo forces the device run into the ISP mode with the specific peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmmcxa153/driver_examples/romapi/runbootloader">
          <external path="examples/frdmmcxa153/driver_examples/romapi/runbootloader" type="xml">
            <files mask="runbootloader_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_i3c_master_read_sensor_p3t1755" name="i3c_master_read_sensor_p3t1755" brief="The i3c_master_read_sensor_p3t1755 example shows how to use i3c driver as master to communicate with sensor P3T1755." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/frdmmcxa153/driver_examples/i3c/master_read_sensor_p3t1755">
          <external path="examples/frdmmcxa153/driver_examples/i3c/master_read_sensor_p3t1755" type="xml">
            <files mask="i3c_master_read_sensor_p3t1755_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_freqme_interrupt" name="freqme_interrupt" brief="The freqme_interrupt is a demonstration program of the SDK LPC_FREQME driver's features. The example demostrate the usage of frequency measurement operate mode and pulse width measurement operate mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/freqme" path="examples/frdmmcxa153/driver_examples/freqme">
          <external path="examples/frdmmcxa153/driver_examples/freqme" type="xml">
            <files mask="freqme_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_wwdt_example" name="wwdt_example" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wwdt" path="examples/frdmmcxa153/driver_examples/wwdt">
          <external path="examples/frdmmcxa153/driver_examples/wwdt" type="xml">
            <files mask="wwdt_example_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_waketimer_example" name="waketimer_example" brief="The WAKETIMER project is a simple demonstration program of the SDK WAKETIMER driver. WAKETIMER will trigger every 1 second." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/waketimer" path="examples/frdmmcxa153/driver_examples/waketimer">
          <external path="examples/frdmmcxa153/driver_examples/waketimer" type="xml">
            <files mask="waketimer_example_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_eqdc_basic" name="eqdc_basic" brief="The EQDC project shows how to sample the shaft position based on quadrature signal (PHASEA and PHASEB)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/eqdc" path="examples/frdmmcxa153/driver_examples/eqdc/basic">
          <external path="examples/frdmmcxa153/driver_examples/eqdc/basic" type="xml">
            <files mask="eqdc_basic_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_eqdc_index_interrupt" name="eqdc_index_interrupt" brief="The EQDC project shows how to sample the shaft position based on quadrature signal (PHASEA and PHASEB)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/eqdc" path="examples/frdmmcxa153/driver_examples/eqdc/index_interrupt">
          <external path="examples/frdmmcxa153/driver_examples/eqdc/index_interrupt" type="xml">
            <files mask="eqdc_index_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_pwm" name="pwm" brief="The PWM project is a simple demonstration program of the SDK PWM driver.The pulse width modulator (PWM) module contains PWM submodules, each of which is set up to control a single half-bridge power stage.Fault channel support is provided. This PWM module can generate various switching patterns, including highly sophisticated waveforms.It can be used to control all known Switched Mode Power Supplies (SMPS) topologies." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pwm" path="examples/frdmmcxa153/driver_examples/pwm">
          <external path="examples/frdmmcxa153/driver_examples/pwm" type="xml">
            <files mask="pwm_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_power_mode_switch_ll" name="power_mode_switch_ll" brief="Low level power_mode_switch demo." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmmcxa153/demo_apps/power_mode_switch/low_level">
          <external path="examples/frdmmcxa153/demo_apps/power_mode_switch/low_level" type="xml">
            <files mask="power_mode_switch_ll_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_edma3_memory_to_memory" name="edma3_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma3" path="examples/frdmmcxa153/driver_examples/edma3/memory_to_memory">
          <external path="examples/frdmmcxa153/driver_examples/edma3/memory_to_memory" type="xml">
            <files mask="edma3_memory_to_memory_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_edma3_channel_link" name="edma3_channel_link" brief="The EDMA3 channel link example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA3 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma3" path="examples/frdmmcxa153/driver_examples/edma3/channel_link">
          <external path="examples/frdmmcxa153/driver_examples/edma3/channel_link" type="xml">
            <files mask="edma3_channel_link_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_edma3_interleave_transfer" name="edma3_interleave_transfer" brief="The EDMA3 interleave example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA3 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma3" path="examples/frdmmcxa153/driver_examples/edma3/interleave_transfer">
          <external path="examples/frdmmcxa153/driver_examples/edma3/interleave_transfer" type="xml">
            <files mask="edma3_interleave_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_edma3_memory_to_memory_transfer" name="edma3_memory_to_memory_transfer" brief="The EDMA3 memory to memory transfer example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA3 drivers.The purpose of this example is to show how to use the EDMA3 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma3" path="examples/frdmmcxa153/driver_examples/edma3/memory_to_memory_transfer">
          <external path="examples/frdmmcxa153/driver_examples/edma3/memory_to_memory_transfer" type="xml">
            <files mask="edma3_memory_to_memory_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_edma3_memset" name="edma3_memset" brief="The EDMA3 memset example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA3 drivers.The purpose of this example is to show how to use the EDMA3 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma3" path="examples/frdmmcxa153/driver_examples/edma3/memset">
          <external path="examples/frdmmcxa153/driver_examples/edma3/memset" type="xml">
            <files mask="edma3_memset_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_edma3_ping_pong_transfer" name="edma3_ping_pong_transfer" brief="The EDMA3 ping pong transfer example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA3 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma3" path="examples/frdmmcxa153/driver_examples/edma3/ping_pong_transfer">
          <external path="examples/frdmmcxa153/driver_examples/edma3/ping_pong_transfer" type="xml">
            <files mask="edma3_ping_pong_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_edma3_scatter_gather" name="edma3_scatter_gather" brief="The EDMA3 scatter gather example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA3 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma3" path="examples/frdmmcxa153/driver_examples/edma3/scatter_gather">
          <external path="examples/frdmmcxa153/driver_examples/edma3/scatter_gather" type="xml">
            <files mask="edma3_scatter_gather_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_edma3_wrap_transfer" name="edma3_wrap_transfer" brief="The EDMA3 wrap transfer example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA3 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma3" path="examples/frdmmcxa153/driver_examples/edma3/wrap_transfer">
          <external path="examples/frdmmcxa153/driver_examples/edma3/wrap_transfer" type="xml">
            <files mask="edma3_wrap_transfer_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/crc" path="examples/frdmmcxa153/driver_examples/crc">
          <external path="examples/frdmmcxa153/driver_examples/crc" type="xml">
            <files mask="crc_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_ostimer_example" name="ostimer_example" brief="The OSTIMER project is a simple demonstration program of the SDK OSTIMER driver. It sets the OSTIMER as the wakeup source from deep-sleep mode. After wakeup from deep-sleep mode, OS timer will set match value to trigger the interrupt while the timer count tick reach the match value about every 2 seconds." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ostimer" path="examples/frdmmcxa153/driver_examples/ostimer">
          <external path="examples/frdmmcxa153/driver_examples/ostimer" type="xml">
            <files mask="ostimer_example_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_utick" name="utick" brief="The utick project is a simple demonstration program of the SDK utick driver. It sets up the utick hardware block to trigger a periodic interrupt after every 1 second. When the utick interrupt is triggered a message is printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/utick" path="examples/frdmmcxa153/driver_examples/utick">
          <external path="examples/frdmmcxa153/driver_examples/utick" type="xml">
            <files mask="utick_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_aoi_io_and" name="aoi_io_and" brief="This example demos the AOI uses two IO, the AOI_OUT = (IO0 &amp; IO1)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/aoi/io_and" path="examples/frdmmcxa153/driver_examples/aoi/io_and">
          <external path="examples/frdmmcxa153/driver_examples/aoi/io_and" type="xml">
            <files mask="aoi_io_and_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_error_recording" name="error_recording" brief="The ERM Single Error project is a simple demonstration program of the SDK ERM driver. It shows how to show error events using the ERM driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/erm" path="examples/frdmmcxa153/driver_examples/erm/error_recording">
          <external path="examples/frdmmcxa153/driver_examples/erm/error_recording" type="xml">
            <files mask="error_recording_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_trdc" name="trdc" brief="The trdc example shows how to control the memory block checker(MBC) and memory region checker(MRC) access policy using TRDC. In this example, a MRC memory region and a MBC memory block are set to unaccessible, then the hardfault occurs." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/trdc" path="examples/frdmmcxa153/driver_examples/trdc">
          <external path="examples/frdmmcxa153/driver_examples/trdc" type="xml">
            <files mask="trdc_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_glikey" name="glikey" brief="The GLIKEY Example project is a demonstration program that uses the MCUX SDK software to show funcionality of GLIKEY IP." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/glikey" path="examples/frdmmcxa153/driver_examples/glikey">
          <external path="examples/frdmmcxa153/driver_examples/glikey" type="xml">
            <files mask="glikey_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_cdog" name="cdog" brief="The CDOG Example project is a demonstration program that uses the KSDK software to show funcionality of Code Watchdog Timer." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cdog" path="examples/frdmmcxa153/driver_examples/cdog">
          <external path="examples/frdmmcxa153/driver_examples/cdog" type="xml">
            <files mask="cdog_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_mcuboot_opensource" name="mcuboot_opensource" brief="MCUboot bootloader" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="ota_examples" path="examples/frdmmcxa153/ota_examples/mcuboot_opensource">
          <external path="examples/frdmmcxa153/ota_examples/mcuboot_opensource" type="xml">
            <files mask="mcuboot_opensource_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_ota_mcuboot_basic" name="ota_mcuboot_basic" brief="This projects gives an example of a basic application bootable by MCUBoot" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="ota_examples" path="examples/frdmmcxa153/ota_examples/ota_mcuboot_basic">
          <external path="examples/frdmmcxa153/ota_examples/ota_mcuboot_basic" type="xml">
            <files mask="ota_mcuboot_basic_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/frdmmcxa153/freertos_examples/freertos_event">
          <external path="examples/frdmmcxa153/freertos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/frdmmcxa153/freertos_examples/freertos_generic">
          <external path="examples/frdmmcxa153/freertos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART driver in combination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/frdmmcxa153/freertos_examples/freertos_hello">
          <external path="examples/frdmmcxa153/freertos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/frdmmcxa153/freertos_examples/freertos_mutex">
          <external path="examples/frdmmcxa153/freertos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/frdmmcxa153/freertos_examples/freertos_queue">
          <external path="examples/frdmmcxa153/freertos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/frdmmcxa153/freertos_examples/freertos_sem">
          <external path="examples/frdmmcxa153/freertos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_14.xml"/>
          </external>
        </example>
        <example id="frdmmcxa153_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="freertos_examples" path="examples/frdmmcxa153/freertos_examples/freertos_swtimer">
          <external path="examples/frdmmcxa153/freertos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_14.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MCXA153" name="MCXA153" version="1.0.0" full_name="MCXA153" family="MCXA1XX" platform="MCX">
      <description>Arm® Cortex®-M33 microcontroller with multiple high-speed connectivity, operating up to 96 MHz, serial peripherals, timers, analog and low power consumption.</description>
      <metadataSet>
        <metadata key="compatible_device.segger" value="MCXA153"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <defines>
        <define name="CPU_$|package|" value=""/>
        <define name="CPU_$|package|_$|core|" value=""/>
      </defines>
      <core id="cm33_core0_MCXA153" name="cm33_core0" fpu="false" type="cm33_nodsp" dsp="false"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MCXA153" name="PROGRAM_FLASH" addr="00000000" size="00020000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_MCXA153" name="SRAM" addr="20000000" size="00006000" type="RAM" access="RW"/>
        <memoryBlock id="SRAMX0_MCXA153" name="SRAMX0" addr="04000000" size="00002000" type="RAM" access="RW"/>
        <memoryBlock id="SRAMX1_MCXA153" name="SRAMX1" addr="04002000" size="00001000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="128" ram_size_kb="36"/>
      <package id="MCXA153VLH" name="MCXA153VLH"/>
      <package id="MCXA153VFT" name="MCXA153VFT"/>
      <package id="MCXA153VFM" name="MCXA153VFM"/>
      <package id="MCXA153VLF" name="MCXA153VLF"/>
      <evaluation_boards>
        <evaluation_board name="frdmmcxa153"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.MCXA153" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.MCXA153" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.MCXA153" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MCXA153" name="internal.has_swo" value="true"/>
            <params id="misc.options.MCXA153" name="misc.options" value="--bootromstall 0x40091040"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MCXA153">
              <driverBinary path="core/devices/MCXA153/mcuxpresso" type="binary">
                <files mask="MCXA1xx.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmmcxa153.MCXA153" name="frdmmcxa153" brief="Board_project_template frdmmcxa153" version="1.0.0" full_name="Board_project_template frdmmcxa153" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/frdmmcxa153/project_template" project_base_path="board">
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="component.serial_manager.MCXA153"/>
              <component_dependency value="platform.utilities.assert.MCXA153"/>
              <component_dependency value="utility.debug_console.MCXA153"/>
            </all>
            <all>
              <component_dependency value="platform.utilities.assert_lite.MCXA153"/>
              <component_dependency value="utility.debug_console_lite.MCXA153"/>
            </all>
          </any_of>
          <component_dependency value="component.lpuart_adapter.MCXA153"/>
          <component_dependency value="platform.drivers.lpuart.MCXA153"/>
          <component_dependency value="platform.drivers.gpio.MCXA153"/>
          <component_dependency value="platform.drivers.reset.MCXA153"/>
          <component_dependency value="platform.drivers.clock.MCXA153"/>
          <component_dependency value="platform.drivers.mcx_spc.MCXA153"/>
          <component_dependency value="platform.drivers.port.MCXA153"/>
          <component_dependency value="device.MCXA153_startup.MCXA153"/>
          <board_dependency value="frdmmcxa153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" config="true" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="BOARD_Project_Template_frdmmcxa153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.MCXA153_debugger.MCXA153" name="Device MCXA153_debugger" brief="Device MCXA153_debugger" version="1.0.0" full_name="Device MCXA153_debugger" category="Board Support/SDK Project Template" user_visible="true" type="debugger" package_base_path="svd/MCXA153" project_base_path="svd">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="xml">
        <files mask="MCXA153.xml"/>
      </source>
    </component>
    <component id="utility.format.MCXA153" name="format" brief="Used to format convertion" version="1.0.0" full_name="utility format" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_format.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_format.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_format.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.MCXA153" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" category="Device/SDK Utilities" user_visible="true" type="OS" package_base_path="middleware/bm" project_base_path="middleware/bm">
      <defines>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_baremetal.MCXA153.cmake" hidden="true"/>
      </source>
    </component>
    <component id="tools.MCXA153" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" category="Device/SDK Utilities" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="xclang.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="mcux_config.cmake"/>
      </source>
    </component>
    <component id="CMSIS_Include_core_cm.MCXA153" name="CMSIS_Include_CM" brief="CMSIS-CORE for Cortex-M, ARMv8-M, ARMv8.1-M" version="5.9.0" full_name="CMSIS Include For Cortex-M, ARMv8-M, ARMv8.1-M" category="CMSIS/CORE" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Core/Include" project_base_path="CMSIS">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source compiler="compiler_gcc" relative_path="./" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_version.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_core0_MCXA153">
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Include_core_cm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <!--<component id="container.CMSIS_all_files.MCXA153" name="MCXA153" version="1.0.0" package_base_path="core/CMSIS" project_base_path="./">
  <source relative_path="./" type="src">
    <files mask="Driver_CAN.c"/>
    <files mask="Driver_ETH_MAC.c"/>
    <files mask="Driver_ETH_PHY.c"/>
    <files mask="Driver_Flash.c"/>
    <files mask="Driver_I2C.c"/>
    <files mask="Driver_MCI.c"/>
    <files mask="Driver_NAND.c"/>
    <files mask="Driver_SAI.c"/>
    <files mask="Driver_SPI.c"/>
    <files mask="Driver_Storage.c"/>
    <files mask="Driver_USART.c"/>
    <files mask="Driver_USBD.c"/>
    <files mask="Driver_USBH.c"/>
    <files mask="Driver_WiFi.c"/>
    <files mask="vio.c"/>
    <files mask="vio_memory.c"/>
    <files mask="BasicMathFunctions.c"/>
    <files mask="BasicMathFunctionsF16.c"/>
    <files mask="arm_abs_f16.c"/>
    <files mask="arm_abs_f32.c"/>
    <files mask="arm_abs_f64.c"/>
    <files mask="arm_abs_q15.c"/>
    <files mask="arm_abs_q31.c"/>
    <files mask="arm_abs_q7.c"/>
    <files mask="arm_add_f16.c"/>
    <files mask="arm_add_f32.c"/>
    <files mask="arm_add_f64.c"/>
    <files mask="arm_add_q15.c"/>
    <files mask="arm_add_q31.c"/>
    <files mask="arm_add_q7.c"/>
    <files mask="arm_and_u16.c"/>
    <files mask="arm_and_u32.c"/>
    <files mask="arm_and_u8.c"/>
    <files mask="arm_clip_f16.c"/>
    <files mask="arm_clip_f32.c"/>
    <files mask="arm_clip_q15.c"/>
    <files mask="arm_clip_q31.c"/>
    <files mask="arm_clip_q7.c"/>
    <files mask="arm_dot_prod_f16.c"/>
    <files mask="arm_dot_prod_f32.c"/>
    <files mask="arm_dot_prod_f64.c"/>
    <files mask="arm_dot_prod_q15.c"/>
    <files mask="arm_dot_prod_q31.c"/>
    <files mask="arm_dot_prod_q7.c"/>
    <files mask="arm_mult_f16.c"/>
    <files mask="arm_mult_f32.c"/>
    <files mask="arm_mult_f64.c"/>
    <files mask="arm_mult_q15.c"/>
    <files mask="arm_mult_q31.c"/>
    <files mask="arm_mult_q7.c"/>
    <files mask="arm_negate_f16.c"/>
    <files mask="arm_negate_f32.c"/>
    <files mask="arm_negate_f64.c"/>
    <files mask="arm_negate_q15.c"/>
    <files mask="arm_negate_q31.c"/>
    <files mask="arm_negate_q7.c"/>
    <files mask="arm_not_u16.c"/>
    <files mask="arm_not_u32.c"/>
    <files mask="arm_not_u8.c"/>
    <files mask="arm_offset_f16.c"/>
    <files mask="arm_offset_f32.c"/>
    <files mask="arm_offset_f64.c"/>
    <files mask="arm_offset_q15.c"/>
    <files mask="arm_offset_q31.c"/>
    <files mask="arm_offset_q7.c"/>
    <files mask="arm_or_u16.c"/>
    <files mask="arm_or_u32.c"/>
    <files mask="arm_or_u8.c"/>
    <files mask="arm_scale_f16.c"/>
    <files mask="arm_scale_f32.c"/>
    <files mask="arm_scale_f64.c"/>
    <files mask="arm_scale_q15.c"/>
    <files mask="arm_scale_q31.c"/>
    <files mask="arm_scale_q7.c"/>
    <files mask="arm_shift_q15.c"/>
    <files mask="arm_shift_q31.c"/>
    <files mask="arm_shift_q7.c"/>
    <files mask="arm_sub_f16.c"/>
    <files mask="arm_sub_f32.c"/>
    <files mask="arm_sub_f64.c"/>
    <files mask="arm_sub_q15.c"/>
    <files mask="arm_sub_q31.c"/>
    <files mask="arm_sub_q7.c"/>
    <files mask="arm_xor_u16.c"/>
    <files mask="arm_xor_u32.c"/>
    <files mask="arm_xor_u8.c"/>
    <files mask="BayesFunctions.c"/>
    <files mask="BayesFunctionsF16.c"/>
    <files mask="arm_gaussian_naive_bayes_predict_f16.c"/>
    <files mask="arm_gaussian_naive_bayes_predict_f32.c"/>
    <files mask="CommonTables.c"/>
    <files mask="CommonTablesF16.c"/>
    <files mask="arm_common_tables.c"/>
    <files mask="arm_common_tables_f16.c"/>
    <files mask="arm_const_structs.c"/>
    <files mask="arm_const_structs_f16.c"/>
    <files mask="arm_mve_tables.c"/>
    <files mask="arm_mve_tables_f16.c"/>
    <files mask="ComplexMathFunctions.c"/>
    <files mask="ComplexMathFunctionsF16.c"/>
    <files mask="arm_cmplx_conj_f16.c"/>
    <files mask="arm_cmplx_conj_f32.c"/>
    <files mask="arm_cmplx_conj_q15.c"/>
    <files mask="arm_cmplx_conj_q31.c"/>
    <files mask="arm_cmplx_dot_prod_f16.c"/>
    <files mask="arm_cmplx_dot_prod_f32.c"/>
    <files mask="arm_cmplx_dot_prod_q15.c"/>
    <files mask="arm_cmplx_dot_prod_q31.c"/>
    <files mask="arm_cmplx_mag_f16.c"/>
    <files mask="arm_cmplx_mag_f32.c"/>
    <files mask="arm_cmplx_mag_f64.c"/>
    <files mask="arm_cmplx_mag_fast_q15.c"/>
    <files mask="arm_cmplx_mag_q15.c"/>
    <files mask="arm_cmplx_mag_q31.c"/>
    <files mask="arm_cmplx_mag_squared_f16.c"/>
    <files mask="arm_cmplx_mag_squared_f32.c"/>
    <files mask="arm_cmplx_mag_squared_f64.c"/>
    <files mask="arm_cmplx_mag_squared_q15.c"/>
    <files mask="arm_cmplx_mag_squared_q31.c"/>
    <files mask="arm_cmplx_mult_cmplx_f16.c"/>
    <files mask="arm_cmplx_mult_cmplx_f32.c"/>
    <files mask="arm_cmplx_mult_cmplx_f64.c"/>
    <files mask="arm_cmplx_mult_cmplx_q15.c"/>
    <files mask="arm_cmplx_mult_cmplx_q31.c"/>
    <files mask="arm_cmplx_mult_real_f16.c"/>
    <files mask="arm_cmplx_mult_real_f32.c"/>
    <files mask="arm_cmplx_mult_real_q15.c"/>
    <files mask="arm_cmplx_mult_real_q31.c"/>
    <files mask="ControllerFunctions.c"/>
    <files mask="arm_pid_init_f32.c"/>
    <files mask="arm_pid_init_q15.c"/>
    <files mask="arm_pid_init_q31.c"/>
    <files mask="arm_pid_reset_f32.c"/>
    <files mask="arm_pid_reset_q15.c"/>
    <files mask="arm_pid_reset_q31.c"/>
    <files mask="arm_sin_cos_f32.c"/>
    <files mask="arm_sin_cos_q31.c"/>
    <files mask="DistanceFunctions.c"/>
    <files mask="DistanceFunctionsF16.c"/>
    <files mask="arm_boolean_distance.c"/>
    <files mask="arm_braycurtis_distance_f16.c"/>
    <files mask="arm_braycurtis_distance_f32.c"/>
    <files mask="arm_canberra_distance_f16.c"/>
    <files mask="arm_canberra_distance_f32.c"/>
    <files mask="arm_chebyshev_distance_f16.c"/>
    <files mask="arm_chebyshev_distance_f32.c"/>
    <files mask="arm_chebyshev_distance_f64.c"/>
    <files mask="arm_cityblock_distance_f16.c"/>
    <files mask="arm_cityblock_distance_f32.c"/>
    <files mask="arm_cityblock_distance_f64.c"/>
    <files mask="arm_correlation_distance_f16.c"/>
    <files mask="arm_correlation_distance_f32.c"/>
    <files mask="arm_cosine_distance_f16.c"/>
    <files mask="arm_cosine_distance_f32.c"/>
    <files mask="arm_cosine_distance_f64.c"/>
    <files mask="arm_dice_distance.c"/>
    <files mask="arm_dtw_distance_f32.c"/>
    <files mask="arm_dtw_init_window_q7.c"/>
    <files mask="arm_dtw_path_f32.c"/>
    <files mask="arm_euclidean_distance_f16.c"/>
    <files mask="arm_euclidean_distance_f32.c"/>
    <files mask="arm_euclidean_distance_f64.c"/>
    <files mask="arm_hamming_distance.c"/>
    <files mask="arm_jaccard_distance.c"/>
    <files mask="arm_jensenshannon_distance_f16.c"/>
    <files mask="arm_jensenshannon_distance_f32.c"/>
    <files mask="arm_kulsinski_distance.c"/>
    <files mask="arm_minkowski_distance_f16.c"/>
    <files mask="arm_minkowski_distance_f32.c"/>
    <files mask="arm_rogerstanimoto_distance.c"/>
    <files mask="arm_russellrao_distance.c"/>
    <files mask="arm_sokalmichener_distance.c"/>
    <files mask="arm_sokalsneath_distance.c"/>
    <files mask="arm_yule_distance.c"/>
    <files mask="FastMathFunctions.c"/>
    <files mask="FastMathFunctionsF16.c"/>
    <files mask="arm_atan2_f16.c"/>
    <files mask="arm_atan2_f32.c"/>
    <files mask="arm_atan2_q15.c"/>
    <files mask="arm_atan2_q31.c"/>
    <files mask="arm_cos_f32.c"/>
    <files mask="arm_cos_q15.c"/>
    <files mask="arm_cos_q31.c"/>
    <files mask="arm_divide_q15.c"/>
    <files mask="arm_divide_q31.c"/>
    <files mask="arm_sin_f32.c"/>
    <files mask="arm_sin_q15.c"/>
    <files mask="arm_sin_q31.c"/>
    <files mask="arm_sqrt_q15.c"/>
    <files mask="arm_sqrt_q31.c"/>
    <files mask="arm_vexp_f16.c"/>
    <files mask="arm_vexp_f32.c"/>
    <files mask="arm_vexp_f64.c"/>
    <files mask="arm_vinverse_f16.c"/>
    <files mask="arm_vlog_f16.c"/>
    <files mask="arm_vlog_f32.c"/>
    <files mask="arm_vlog_f64.c"/>
    <files mask="arm_vlog_q15.c"/>
    <files mask="arm_vlog_q31.c"/>
    <files mask="FilteringFunctions.c"/>
    <files mask="FilteringFunctionsF16.c"/>
    <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
    <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
    <files mask="arm_biquad_cascade_df1_f16.c"/>
    <files mask="arm_biquad_cascade_df1_f32.c"/>
    <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
    <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
    <files mask="arm_biquad_cascade_df1_init_f16.c"/>
    <files mask="arm_biquad_cascade_df1_init_f32.c"/>
    <files mask="arm_biquad_cascade_df1_init_q15.c"/>
    <files mask="arm_biquad_cascade_df1_init_q31.c"/>
    <files mask="arm_biquad_cascade_df1_q15.c"/>
    <files mask="arm_biquad_cascade_df1_q31.c"/>
    <files mask="arm_biquad_cascade_df2T_f16.c"/>
    <files mask="arm_biquad_cascade_df2T_f32.c"/>
    <files mask="arm_biquad_cascade_df2T_f64.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f16.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_f16.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_init_f16.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
    <files mask="arm_conv_f32.c"/>
    <files mask="arm_conv_fast_opt_q15.c"/>
    <files mask="arm_conv_fast_q15.c"/>
    <files mask="arm_conv_fast_q31.c"/>
    <files mask="arm_conv_opt_q15.c"/>
    <files mask="arm_conv_opt_q7.c"/>
    <files mask="arm_conv_partial_f32.c"/>
    <files mask="arm_conv_partial_fast_opt_q15.c"/>
    <files mask="arm_conv_partial_fast_q15.c"/>
    <files mask="arm_conv_partial_fast_q31.c"/>
    <files mask="arm_conv_partial_opt_q15.c"/>
    <files mask="arm_conv_partial_opt_q7.c"/>
    <files mask="arm_conv_partial_q15.c"/>
    <files mask="arm_conv_partial_q31.c"/>
    <files mask="arm_conv_partial_q7.c"/>
    <files mask="arm_conv_q15.c"/>
    <files mask="arm_conv_q31.c"/>
    <files mask="arm_conv_q7.c"/>
    <files mask="arm_correlate_f16.c"/>
    <files mask="arm_correlate_f32.c"/>
    <files mask="arm_correlate_f64.c"/>
    <files mask="arm_correlate_fast_opt_q15.c"/>
    <files mask="arm_correlate_fast_q15.c"/>
    <files mask="arm_correlate_fast_q31.c"/>
    <files mask="arm_correlate_opt_q15.c"/>
    <files mask="arm_correlate_opt_q7.c"/>
    <files mask="arm_correlate_q15.c"/>
    <files mask="arm_correlate_q31.c"/>
    <files mask="arm_correlate_q7.c"/>
    <files mask="arm_fir_decimate_f32.c"/>
    <files mask="arm_fir_decimate_fast_q15.c"/>
    <files mask="arm_fir_decimate_fast_q31.c"/>
    <files mask="arm_fir_decimate_init_f32.c"/>
    <files mask="arm_fir_decimate_init_q15.c"/>
    <files mask="arm_fir_decimate_init_q31.c"/>
    <files mask="arm_fir_decimate_q15.c"/>
    <files mask="arm_fir_decimate_q31.c"/>
    <files mask="arm_fir_f16.c"/>
    <files mask="arm_fir_f32.c"/>
    <files mask="arm_fir_f64.c"/>
    <files mask="arm_fir_fast_q15.c"/>
    <files mask="arm_fir_fast_q31.c"/>
    <files mask="arm_fir_init_f16.c"/>
    <files mask="arm_fir_init_f32.c"/>
    <files mask="arm_fir_init_f64.c"/>
    <files mask="arm_fir_init_q15.c"/>
    <files mask="arm_fir_init_q31.c"/>
    <files mask="arm_fir_init_q7.c"/>
    <files mask="arm_fir_interpolate_f32.c"/>
    <files mask="arm_fir_interpolate_init_f32.c"/>
    <files mask="arm_fir_interpolate_init_q15.c"/>
    <files mask="arm_fir_interpolate_init_q31.c"/>
    <files mask="arm_fir_interpolate_q15.c"/>
    <files mask="arm_fir_interpolate_q31.c"/>
    <files mask="arm_fir_lattice_f32.c"/>
    <files mask="arm_fir_lattice_init_f32.c"/>
    <files mask="arm_fir_lattice_init_q15.c"/>
    <files mask="arm_fir_lattice_init_q31.c"/>
    <files mask="arm_fir_lattice_q15.c"/>
    <files mask="arm_fir_lattice_q31.c"/>
    <files mask="arm_fir_q15.c"/>
    <files mask="arm_fir_q31.c"/>
    <files mask="arm_fir_q7.c"/>
    <files mask="arm_fir_sparse_f32.c"/>
    <files mask="arm_fir_sparse_init_f32.c"/>
    <files mask="arm_fir_sparse_init_q15.c"/>
    <files mask="arm_fir_sparse_init_q31.c"/>
    <files mask="arm_fir_sparse_init_q7.c"/>
    <files mask="arm_fir_sparse_q15.c"/>
    <files mask="arm_fir_sparse_q31.c"/>
    <files mask="arm_fir_sparse_q7.c"/>
    <files mask="arm_iir_lattice_f32.c"/>
    <files mask="arm_iir_lattice_init_f32.c"/>
    <files mask="arm_iir_lattice_init_q15.c"/>
    <files mask="arm_iir_lattice_init_q31.c"/>
    <files mask="arm_iir_lattice_q15.c"/>
    <files mask="arm_iir_lattice_q31.c"/>
    <files mask="arm_levinson_durbin_f16.c"/>
    <files mask="arm_levinson_durbin_f32.c"/>
    <files mask="arm_levinson_durbin_q31.c"/>
    <files mask="arm_lms_f32.c"/>
    <files mask="arm_lms_init_f32.c"/>
    <files mask="arm_lms_init_q15.c"/>
    <files mask="arm_lms_init_q31.c"/>
    <files mask="arm_lms_norm_f32.c"/>
    <files mask="arm_lms_norm_init_f32.c"/>
    <files mask="arm_lms_norm_init_q15.c"/>
    <files mask="arm_lms_norm_init_q31.c"/>
    <files mask="arm_lms_norm_q15.c"/>
    <files mask="arm_lms_norm_q31.c"/>
    <files mask="arm_lms_q15.c"/>
    <files mask="arm_lms_q31.c"/>
    <files mask="InterpolationFunctions.c"/>
    <files mask="InterpolationFunctionsF16.c"/>
    <files mask="arm_bilinear_interp_f16.c"/>
    <files mask="arm_bilinear_interp_f32.c"/>
    <files mask="arm_bilinear_interp_q15.c"/>
    <files mask="arm_bilinear_interp_q31.c"/>
    <files mask="arm_bilinear_interp_q7.c"/>
    <files mask="arm_linear_interp_f16.c"/>
    <files mask="arm_linear_interp_f32.c"/>
    <files mask="arm_linear_interp_q15.c"/>
    <files mask="arm_linear_interp_q31.c"/>
    <files mask="arm_linear_interp_q7.c"/>
    <files mask="arm_spline_interp_f32.c"/>
    <files mask="arm_spline_interp_init_f32.c"/>
    <files mask="MatrixFunctions.c"/>
    <files mask="MatrixFunctionsF16.c"/>
    <files mask="arm_householder_f16.c"/>
    <files mask="arm_householder_f32.c"/>
    <files mask="arm_householder_f64.c"/>
    <files mask="arm_mat_add_f16.c"/>
    <files mask="arm_mat_add_f32.c"/>
    <files mask="arm_mat_add_q15.c"/>
    <files mask="arm_mat_add_q31.c"/>
    <files mask="arm_mat_cholesky_f16.c"/>
    <files mask="arm_mat_cholesky_f32.c"/>
    <files mask="arm_mat_cholesky_f64.c"/>
    <files mask="arm_mat_cmplx_mult_f16.c"/>
    <files mask="arm_mat_cmplx_mult_f32.c"/>
    <files mask="arm_mat_cmplx_mult_q15.c"/>
    <files mask="arm_mat_cmplx_mult_q31.c"/>
    <files mask="arm_mat_cmplx_trans_f16.c"/>
    <files mask="arm_mat_cmplx_trans_f32.c"/>
    <files mask="arm_mat_cmplx_trans_q15.c"/>
    <files mask="arm_mat_cmplx_trans_q31.c"/>
    <files mask="arm_mat_init_f16.c"/>
    <files mask="arm_mat_init_f32.c"/>
    <files mask="arm_mat_init_f64.c"/>
    <files mask="arm_mat_init_q15.c"/>
    <files mask="arm_mat_init_q31.c"/>
    <files mask="arm_mat_inverse_f16.c"/>
    <files mask="arm_mat_inverse_f32.c"/>
    <files mask="arm_mat_inverse_f64.c"/>
    <files mask="arm_mat_ldlt_f32.c"/>
    <files mask="arm_mat_ldlt_f64.c"/>
    <files mask="arm_mat_mult_f16.c"/>
    <files mask="arm_mat_mult_f32.c"/>
    <files mask="arm_mat_mult_f64.c"/>
    <files mask="arm_mat_mult_fast_q15.c"/>
    <files mask="arm_mat_mult_fast_q31.c"/>
    <files mask="arm_mat_mult_opt_q31.c"/>
    <files mask="arm_mat_mult_q15.c"/>
    <files mask="arm_mat_mult_q31.c"/>
    <files mask="arm_mat_mult_q7.c"/>
    <files mask="arm_mat_qr_f16.c"/>
    <files mask="arm_mat_qr_f32.c"/>
    <files mask="arm_mat_qr_f64.c"/>
    <files mask="arm_mat_scale_f16.c"/>
    <files mask="arm_mat_scale_f32.c"/>
    <files mask="arm_mat_scale_q15.c"/>
    <files mask="arm_mat_scale_q31.c"/>
    <files mask="arm_mat_solve_lower_triangular_f16.c"/>
    <files mask="arm_mat_solve_lower_triangular_f32.c"/>
    <files mask="arm_mat_solve_lower_triangular_f64.c"/>
    <files mask="arm_mat_solve_upper_triangular_f16.c"/>
    <files mask="arm_mat_solve_upper_triangular_f32.c"/>
    <files mask="arm_mat_solve_upper_triangular_f64.c"/>
    <files mask="arm_mat_sub_f16.c"/>
    <files mask="arm_mat_sub_f32.c"/>
    <files mask="arm_mat_sub_f64.c"/>
    <files mask="arm_mat_sub_q15.c"/>
    <files mask="arm_mat_sub_q31.c"/>
    <files mask="arm_mat_trans_f16.c"/>
    <files mask="arm_mat_trans_f32.c"/>
    <files mask="arm_mat_trans_f64.c"/>
    <files mask="arm_mat_trans_q15.c"/>
    <files mask="arm_mat_trans_q31.c"/>
    <files mask="arm_mat_trans_q7.c"/>
    <files mask="arm_mat_vec_mult_f16.c"/>
    <files mask="arm_mat_vec_mult_f32.c"/>
    <files mask="arm_mat_vec_mult_q15.c"/>
    <files mask="arm_mat_vec_mult_q31.c"/>
    <files mask="arm_mat_vec_mult_q7.c"/>
    <files mask="QuaternionMathFunctions.c"/>
    <files mask="arm_quaternion2rotation_f32.c"/>
    <files mask="arm_quaternion_conjugate_f32.c"/>
    <files mask="arm_quaternion_inverse_f32.c"/>
    <files mask="arm_quaternion_norm_f32.c"/>
    <files mask="arm_quaternion_normalize_f32.c"/>
    <files mask="arm_quaternion_product_f32.c"/>
    <files mask="arm_quaternion_product_single_f32.c"/>
    <files mask="arm_rotation2quaternion_f32.c"/>
    <files mask="SVMFunctions.c"/>
    <files mask="SVMFunctionsF16.c"/>
    <files mask="arm_svm_linear_init_f16.c"/>
    <files mask="arm_svm_linear_init_f32.c"/>
    <files mask="arm_svm_linear_predict_f16.c"/>
    <files mask="arm_svm_linear_predict_f32.c"/>
    <files mask="arm_svm_polynomial_init_f16.c"/>
    <files mask="arm_svm_polynomial_init_f32.c"/>
    <files mask="arm_svm_polynomial_predict_f16.c"/>
    <files mask="arm_svm_polynomial_predict_f32.c"/>
    <files mask="arm_svm_rbf_init_f16.c"/>
    <files mask="arm_svm_rbf_init_f32.c"/>
    <files mask="arm_svm_rbf_predict_f16.c"/>
    <files mask="arm_svm_rbf_predict_f32.c"/>
    <files mask="arm_svm_sigmoid_init_f16.c"/>
    <files mask="arm_svm_sigmoid_init_f32.c"/>
    <files mask="arm_svm_sigmoid_predict_f16.c"/>
    <files mask="arm_svm_sigmoid_predict_f32.c"/>
    <files mask="StatisticsFunctions.c"/>
    <files mask="StatisticsFunctionsF16.c"/>
    <files mask="arm_absmax_f16.c"/>
    <files mask="arm_absmax_f32.c"/>
    <files mask="arm_absmax_f64.c"/>
    <files mask="arm_absmax_no_idx_f16.c"/>
    <files mask="arm_absmax_no_idx_f32.c"/>
    <files mask="arm_absmax_no_idx_f64.c"/>
    <files mask="arm_absmax_no_idx_q15.c"/>
    <files mask="arm_absmax_no_idx_q31.c"/>
    <files mask="arm_absmax_no_idx_q7.c"/>
    <files mask="arm_absmax_q15.c"/>
    <files mask="arm_absmax_q31.c"/>
    <files mask="arm_absmax_q7.c"/>
    <files mask="arm_absmin_f16.c"/>
    <files mask="arm_absmin_f32.c"/>
    <files mask="arm_absmin_f64.c"/>
    <files mask="arm_absmin_no_idx_f16.c"/>
    <files mask="arm_absmin_no_idx_f32.c"/>
    <files mask="arm_absmin_no_idx_f64.c"/>
    <files mask="arm_absmin_no_idx_q15.c"/>
    <files mask="arm_absmin_no_idx_q31.c"/>
    <files mask="arm_absmin_no_idx_q7.c"/>
    <files mask="arm_absmin_q15.c"/>
    <files mask="arm_absmin_q31.c"/>
    <files mask="arm_absmin_q7.c"/>
    <files mask="arm_accumulate_f16.c"/>
    <files mask="arm_accumulate_f32.c"/>
    <files mask="arm_accumulate_f64.c"/>
    <files mask="arm_entropy_f16.c"/>
    <files mask="arm_entropy_f32.c"/>
    <files mask="arm_entropy_f64.c"/>
    <files mask="arm_kullback_leibler_f16.c"/>
    <files mask="arm_kullback_leibler_f32.c"/>
    <files mask="arm_kullback_leibler_f64.c"/>
    <files mask="arm_logsumexp_dot_prod_f16.c"/>
    <files mask="arm_logsumexp_dot_prod_f32.c"/>
    <files mask="arm_logsumexp_f16.c"/>
    <files mask="arm_logsumexp_f32.c"/>
    <files mask="arm_max_f16.c"/>
    <files mask="arm_max_f32.c"/>
    <files mask="arm_max_f64.c"/>
    <files mask="arm_max_no_idx_f16.c"/>
    <files mask="arm_max_no_idx_f32.c"/>
    <files mask="arm_max_no_idx_f64.c"/>
    <files mask="arm_max_no_idx_q15.c"/>
    <files mask="arm_max_no_idx_q31.c"/>
    <files mask="arm_max_no_idx_q7.c"/>
    <files mask="arm_max_q15.c"/>
    <files mask="arm_max_q31.c"/>
    <files mask="arm_max_q7.c"/>
    <files mask="arm_mean_f16.c"/>
    <files mask="arm_mean_f32.c"/>
    <files mask="arm_mean_f64.c"/>
    <files mask="arm_mean_q15.c"/>
    <files mask="arm_mean_q31.c"/>
    <files mask="arm_mean_q7.c"/>
    <files mask="arm_min_f16.c"/>
    <files mask="arm_min_f32.c"/>
    <files mask="arm_min_f64.c"/>
    <files mask="arm_min_no_idx_f16.c"/>
    <files mask="arm_min_no_idx_f32.c"/>
    <files mask="arm_min_no_idx_f64.c"/>
    <files mask="arm_min_no_idx_q15.c"/>
    <files mask="arm_min_no_idx_q31.c"/>
    <files mask="arm_min_no_idx_q7.c"/>
    <files mask="arm_min_q15.c"/>
    <files mask="arm_min_q31.c"/>
    <files mask="arm_min_q7.c"/>
    <files mask="arm_mse_f16.c"/>
    <files mask="arm_mse_f32.c"/>
    <files mask="arm_mse_f64.c"/>
    <files mask="arm_mse_q15.c"/>
    <files mask="arm_mse_q31.c"/>
    <files mask="arm_mse_q7.c"/>
    <files mask="arm_power_f16.c"/>
    <files mask="arm_power_f32.c"/>
    <files mask="arm_power_f64.c"/>
    <files mask="arm_power_q15.c"/>
    <files mask="arm_power_q31.c"/>
    <files mask="arm_power_q7.c"/>
    <files mask="arm_rms_f16.c"/>
    <files mask="arm_rms_f32.c"/>
    <files mask="arm_rms_q15.c"/>
    <files mask="arm_rms_q31.c"/>
    <files mask="arm_std_f16.c"/>
    <files mask="arm_std_f32.c"/>
    <files mask="arm_std_f64.c"/>
    <files mask="arm_std_q15.c"/>
    <files mask="arm_std_q31.c"/>
    <files mask="arm_var_f16.c"/>
    <files mask="arm_var_f32.c"/>
    <files mask="arm_var_f64.c"/>
    <files mask="arm_var_q15.c"/>
    <files mask="arm_var_q31.c"/>
    <files mask="SupportFunctions.c"/>
    <files mask="SupportFunctionsF16.c"/>
    <files mask="arm_barycenter_f16.c"/>
    <files mask="arm_barycenter_f32.c"/>
    <files mask="arm_bitonic_sort_f32.c"/>
    <files mask="arm_bubble_sort_f32.c"/>
    <files mask="arm_copy_f16.c"/>
    <files mask="arm_copy_f32.c"/>
    <files mask="arm_copy_f64.c"/>
    <files mask="arm_copy_q15.c"/>
    <files mask="arm_copy_q31.c"/>
    <files mask="arm_copy_q7.c"/>
    <files mask="arm_f16_to_f64.c"/>
    <files mask="arm_f16_to_float.c"/>
    <files mask="arm_f16_to_q15.c"/>
    <files mask="arm_f64_to_f16.c"/>
    <files mask="arm_f64_to_float.c"/>
    <files mask="arm_f64_to_q15.c"/>
    <files mask="arm_f64_to_q31.c"/>
    <files mask="arm_f64_to_q7.c"/>
    <files mask="arm_fill_f16.c"/>
    <files mask="arm_fill_f32.c"/>
    <files mask="arm_fill_f64.c"/>
    <files mask="arm_fill_q15.c"/>
    <files mask="arm_fill_q31.c"/>
    <files mask="arm_fill_q7.c"/>
    <files mask="arm_float_to_f16.c"/>
    <files mask="arm_float_to_f64.c"/>
    <files mask="arm_float_to_q15.c"/>
    <files mask="arm_float_to_q31.c"/>
    <files mask="arm_float_to_q7.c"/>
    <files mask="arm_heap_sort_f32.c"/>
    <files mask="arm_insertion_sort_f32.c"/>
    <files mask="arm_merge_sort_f32.c"/>
    <files mask="arm_merge_sort_init_f32.c"/>
    <files mask="arm_q15_to_f16.c"/>
    <files mask="arm_q15_to_f64.c"/>
    <files mask="arm_q15_to_float.c"/>
    <files mask="arm_q15_to_q31.c"/>
    <files mask="arm_q15_to_q7.c"/>
    <files mask="arm_q31_to_f64.c"/>
    <files mask="arm_q31_to_float.c"/>
    <files mask="arm_q31_to_q15.c"/>
    <files mask="arm_q31_to_q7.c"/>
    <files mask="arm_q7_to_f64.c"/>
    <files mask="arm_q7_to_float.c"/>
    <files mask="arm_q7_to_q15.c"/>
    <files mask="arm_q7_to_q31.c"/>
    <files mask="arm_quick_sort_f32.c"/>
    <files mask="arm_selection_sort_f32.c"/>
    <files mask="arm_sort_f32.c"/>
    <files mask="arm_sort_init_f32.c"/>
    <files mask="arm_weighted_sum_f16.c"/>
    <files mask="arm_weighted_sum_f32.c"/>
    <files mask="TransformFunctions.c"/>
    <files mask="TransformFunctionsF16.c"/>
    <files mask="arm_bitreversal.c"/>
    <files mask="arm_bitreversal2.c"/>
    <files mask="arm_bitreversal_f16.c"/>
    <files mask="arm_cfft_f16.c"/>
    <files mask="arm_cfft_f32.c"/>
    <files mask="arm_cfft_f64.c"/>
    <files mask="arm_cfft_init_f16.c"/>
    <files mask="arm_cfft_init_f32.c"/>
    <files mask="arm_cfft_init_f64.c"/>
    <files mask="arm_cfft_init_q15.c"/>
    <files mask="arm_cfft_init_q31.c"/>
    <files mask="arm_cfft_q15.c"/>
    <files mask="arm_cfft_q31.c"/>
    <files mask="arm_cfft_radix2_f16.c"/>
    <files mask="arm_cfft_radix2_f32.c"/>
    <files mask="arm_cfft_radix2_init_f16.c"/>
    <files mask="arm_cfft_radix2_init_f32.c"/>
    <files mask="arm_cfft_radix2_init_q15.c"/>
    <files mask="arm_cfft_radix2_init_q31.c"/>
    <files mask="arm_cfft_radix2_q15.c"/>
    <files mask="arm_cfft_radix2_q31.c"/>
    <files mask="arm_cfft_radix4_f16.c"/>
    <files mask="arm_cfft_radix4_f32.c"/>
    <files mask="arm_cfft_radix4_init_f16.c"/>
    <files mask="arm_cfft_radix4_init_f32.c"/>
    <files mask="arm_cfft_radix4_init_q15.c"/>
    <files mask="arm_cfft_radix4_init_q31.c"/>
    <files mask="arm_cfft_radix4_q15.c"/>
    <files mask="arm_cfft_radix4_q31.c"/>
    <files mask="arm_cfft_radix8_f16.c"/>
    <files mask="arm_cfft_radix8_f32.c"/>
    <files mask="arm_dct4_f32.c"/>
    <files mask="arm_dct4_init_f32.c"/>
    <files mask="arm_dct4_init_q15.c"/>
    <files mask="arm_dct4_init_q31.c"/>
    <files mask="arm_dct4_q15.c"/>
    <files mask="arm_dct4_q31.c"/>
    <files mask="arm_mfcc_f16.c"/>
    <files mask="arm_mfcc_f32.c"/>
    <files mask="arm_mfcc_init_f16.c"/>
    <files mask="arm_mfcc_init_f32.c"/>
    <files mask="arm_mfcc_init_q15.c"/>
    <files mask="arm_mfcc_init_q31.c"/>
    <files mask="arm_mfcc_q15.c"/>
    <files mask="arm_mfcc_q31.c"/>
    <files mask="arm_rfft_f32.c"/>
    <files mask="arm_rfft_fast_f16.c"/>
    <files mask="arm_rfft_fast_f32.c"/>
    <files mask="arm_rfft_fast_f64.c"/>
    <files mask="arm_rfft_fast_init_f16.c"/>
    <files mask="arm_rfft_fast_init_f32.c"/>
    <files mask="arm_rfft_fast_init_f64.c"/>
    <files mask="arm_rfft_init_f32.c"/>
    <files mask="arm_rfft_init_q15.c"/>
    <files mask="arm_rfft_init_q31.c"/>
    <files mask="arm_rfft_q15.c"/>
    <files mask="arm_rfft_q31.c"/>
    <files mask="WindowFunctions.c"/>
    <files mask="arm_bartlett_f32.c"/>
    <files mask="arm_bartlett_f64.c"/>
    <files mask="arm_blackman_harris_92db_f32.c"/>
    <files mask="arm_blackman_harris_92db_f64.c"/>
    <files mask="arm_hamming_f32.c"/>
    <files mask="arm_hamming_f64.c"/>
    <files mask="arm_hanning_f32.c"/>
    <files mask="arm_hanning_f64.c"/>
    <files mask="arm_hft116d_f32.c"/>
    <files mask="arm_hft116d_f64.c"/>
    <files mask="arm_hft144d_f32.c"/>
    <files mask="arm_hft144d_f64.c"/>
    <files mask="arm_hft169d_f32.c"/>
    <files mask="arm_hft169d_f64.c"/>
    <files mask="arm_hft196d_f32.c"/>
    <files mask="arm_hft196d_f64.c"/>
    <files mask="arm_hft223d_f32.c"/>
    <files mask="arm_hft223d_f64.c"/>
    <files mask="arm_hft248d_f32.c"/>
    <files mask="arm_hft248d_f64.c"/>
    <files mask="arm_hft90d_f32.c"/>
    <files mask="arm_hft90d_f64.c"/>
    <files mask="arm_hft95_f32.c"/>
    <files mask="arm_hft95_f64.c"/>
    <files mask="arm_nuttall3_f32.c"/>
    <files mask="arm_nuttall3_f64.c"/>
    <files mask="arm_nuttall3a_f32.c"/>
    <files mask="arm_nuttall3a_f64.c"/>
    <files mask="arm_nuttall3b_f32.c"/>
    <files mask="arm_nuttall3b_f64.c"/>
    <files mask="arm_nuttall4_f32.c"/>
    <files mask="arm_nuttall4_f64.c"/>
    <files mask="arm_nuttall4a_f32.c"/>
    <files mask="arm_nuttall4a_f64.c"/>
    <files mask="arm_nuttall4b_f32.c"/>
    <files mask="arm_nuttall4b_f64.c"/>
    <files mask="arm_nuttall4c_f32.c"/>
    <files mask="arm_nuttall4c_f64.c"/>
    <files mask="arm_welch_f32.c"/>
    <files mask="arm_welch_f64.c"/>
  </source>
  <source relative_path="./" type="c_include">
    <files mask="Driver_CAN.h"/>
    <files mask="Driver_Common.h"/>
    <files mask="Driver_ETH.h"/>
    <files mask="Driver_ETH_MAC.h"/>
    <files mask="Driver_ETH_PHY.h"/>
    <files mask="Driver_Flash.h"/>
    <files mask="Driver_I2C.h"/>
    <files mask="Driver_MCI.h"/>
    <files mask="Driver_NAND.h"/>
    <files mask="Driver_SAI.h"/>
    <files mask="Driver_SPI.h"/>
    <files mask="Driver_Storage.h"/>
    <files mask="Driver_USART.h"/>
    <files mask="Driver_USB.h"/>
    <files mask="Driver_USBD.h"/>
    <files mask="Driver_USBH.h"/>
    <files mask="Driver_WiFi.h"/>
    <files mask="cmsis_vio.h"/>
    <files mask="arm_boolean_distance_template.h"/>
  </source>
  <source relative_path="./" type="other">
    <files mask="cmsis_vio.scvd"/>
    <files mask="CMSIS.yml"/>
    <files mask="CMSIS_v2.yml"/>
    <files mask="CMSIS_v3.yml"/>
    <files mask="README.md"/>
  </source>
  <source relative_path="./" type="doc">
    <files mask="LICENSE.txt"/>
  </source>
</component>-->
    <component id="CMSIS_DSP_Include.MCXA153" name="CMSIS_DSP_Library_Header" brief="CMSIS-DSP Library Header" version="1.15.0" full_name="CMSIS DSP Library Header" category="CMSIS/DSP" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/DSP" project_base_path="CMSIS/DSP">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_common_tables_f16.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_const_structs_f16.h"/>
        <files mask="arm_helium_utils.h"/>
        <files mask="arm_math.h"/>
        <files mask="arm_math_f16.h"/>
        <files mask="arm_math_memory.h"/>
        <files mask="arm_math_types.h"/>
        <files mask="arm_math_types_f16.h"/>
        <files mask="arm_mve_tables.h"/>
        <files mask="arm_mve_tables_f16.h"/>
        <files mask="arm_vec_math.h"/>
        <files mask="arm_vec_math_f16.h"/>
      </source>
      <source relative_path="Include/dsp" type="c_include">
        <files mask="basic_math_functions.h"/>
        <files mask="basic_math_functions_f16.h"/>
        <files mask="bayes_functions.h"/>
        <files mask="bayes_functions_f16.h"/>
        <files mask="complex_math_functions.h"/>
        <files mask="complex_math_functions_f16.h"/>
        <files mask="controller_functions.h"/>
        <files mask="controller_functions_f16.h"/>
        <files mask="debug.h"/>
        <files mask="distance_functions.h"/>
        <files mask="distance_functions_f16.h"/>
        <files mask="fast_math_functions.h"/>
        <files mask="fast_math_functions_f16.h"/>
        <files mask="filtering_functions.h"/>
        <files mask="filtering_functions_f16.h"/>
        <files mask="interpolation_functions.h"/>
        <files mask="interpolation_functions_f16.h"/>
        <files mask="matrix_functions.h"/>
        <files mask="matrix_functions_f16.h"/>
        <files mask="matrix_utils.h"/>
        <files mask="none.h"/>
        <files mask="quaternion_math_functions.h"/>
        <files mask="statistics_functions.h"/>
        <files mask="statistics_functions_f16.h"/>
        <files mask="support_functions.h"/>
        <files mask="support_functions_f16.h"/>
        <files mask="svm_defines.h"/>
        <files mask="svm_functions.h"/>
        <files mask="svm_functions_f16.h"/>
        <files mask="transform_functions.h"/>
        <files mask="transform_functions_f16.h"/>
        <files mask="utils.h"/>
        <files mask="window_functions.h"/>
      </source>
      <source relative_path="PrivateInclude" type="c_include">
        <files mask="arm_sorting.h"/>
        <files mask="arm_vec_fft.h"/>
        <files mask="arm_vec_filtering.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_DSP_Include.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="PrivateInclude" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_DSP_Source.MCXA153" name="CMSIS_DSP_Library_Source" brief="CMSIS-DSP Library" version="1.15.0" full_name="CMSIS DSP Library Source" category="CMSIS/DSP" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/DSP" project_base_path="CMSIS/DSP">
      <defines>
        <define name="DISABLEFLOAT16" value=""/>
      </defines>
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_common_tables_f16.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_const_structs_f16.h"/>
        <files mask="arm_helium_utils.h"/>
        <files mask="arm_math.h"/>
        <files mask="arm_math_f16.h"/>
        <files mask="arm_math_memory.h"/>
        <files mask="arm_math_types.h"/>
        <files mask="arm_math_types_f16.h"/>
        <files mask="arm_mve_tables.h"/>
        <files mask="arm_mve_tables_f16.h"/>
        <files mask="arm_vec_math.h"/>
        <files mask="arm_vec_math_f16.h"/>
      </source>
      <source relative_path="Include/dsp" type="c_include">
        <files mask="basic_math_functions.h"/>
        <files mask="basic_math_functions_f16.h"/>
        <files mask="bayes_functions.h"/>
        <files mask="bayes_functions_f16.h"/>
        <files mask="complex_math_functions.h"/>
        <files mask="complex_math_functions_f16.h"/>
        <files mask="controller_functions.h"/>
        <files mask="controller_functions_f16.h"/>
        <files mask="debug.h"/>
        <files mask="distance_functions.h"/>
        <files mask="distance_functions_f16.h"/>
        <files mask="fast_math_functions.h"/>
        <files mask="fast_math_functions_f16.h"/>
        <files mask="filtering_functions.h"/>
        <files mask="filtering_functions_f16.h"/>
        <files mask="interpolation_functions.h"/>
        <files mask="interpolation_functions_f16.h"/>
        <files mask="matrix_functions.h"/>
        <files mask="matrix_functions_f16.h"/>
        <files mask="matrix_utils.h"/>
        <files mask="none.h"/>
        <files mask="quaternion_math_functions.h"/>
        <files mask="statistics_functions.h"/>
        <files mask="statistics_functions_f16.h"/>
        <files mask="support_functions.h"/>
        <files mask="support_functions_f16.h"/>
        <files mask="svm_defines.h"/>
        <files mask="svm_functions.h"/>
        <files mask="svm_functions_f16.h"/>
        <files mask="transform_functions.h"/>
        <files mask="transform_functions_f16.h"/>
        <files mask="utils.h"/>
        <files mask="window_functions.h"/>
      </source>
      <source relative_path="PrivateInclude" type="c_include">
        <files mask="arm_sorting.h"/>
        <files mask="arm_vec_fft.h"/>
        <files mask="arm_vec_filtering.h"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="BasicMathFunctions.c"/>
        <files mask="BasicMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_abs_f32.c"/>
        <files mask="arm_abs_f64.c"/>
        <files mask="arm_abs_q15.c"/>
        <files mask="arm_abs_q31.c"/>
        <files mask="arm_abs_q7.c"/>
        <files mask="arm_add_f32.c"/>
        <files mask="arm_add_f64.c"/>
        <files mask="arm_add_q15.c"/>
        <files mask="arm_add_q31.c"/>
        <files mask="arm_add_q7.c"/>
        <files mask="arm_and_u16.c"/>
        <files mask="arm_and_u32.c"/>
        <files mask="arm_and_u8.c"/>
        <files mask="arm_clip_f32.c"/>
        <files mask="arm_clip_q15.c"/>
        <files mask="arm_clip_q31.c"/>
        <files mask="arm_clip_q7.c"/>
        <files mask="arm_dot_prod_f32.c"/>
        <files mask="arm_dot_prod_f64.c"/>
        <files mask="arm_dot_prod_q15.c"/>
        <files mask="arm_dot_prod_q31.c"/>
        <files mask="arm_dot_prod_q7.c"/>
        <files mask="arm_mult_f32.c"/>
        <files mask="arm_mult_f64.c"/>
        <files mask="arm_mult_q15.c"/>
        <files mask="arm_mult_q31.c"/>
        <files mask="arm_mult_q7.c"/>
        <files mask="arm_negate_f32.c"/>
        <files mask="arm_negate_f64.c"/>
        <files mask="arm_negate_q15.c"/>
        <files mask="arm_negate_q31.c"/>
        <files mask="arm_negate_q7.c"/>
        <files mask="arm_not_u16.c"/>
        <files mask="arm_not_u32.c"/>
        <files mask="arm_not_u8.c"/>
        <files mask="arm_offset_f32.c"/>
        <files mask="arm_offset_f64.c"/>
        <files mask="arm_offset_q15.c"/>
        <files mask="arm_offset_q31.c"/>
        <files mask="arm_offset_q7.c"/>
        <files mask="arm_or_u16.c"/>
        <files mask="arm_or_u32.c"/>
        <files mask="arm_or_u8.c"/>
        <files mask="arm_scale_f32.c"/>
        <files mask="arm_scale_f64.c"/>
        <files mask="arm_scale_q15.c"/>
        <files mask="arm_scale_q31.c"/>
        <files mask="arm_scale_q7.c"/>
        <files mask="arm_shift_q15.c"/>
        <files mask="arm_shift_q31.c"/>
        <files mask="arm_shift_q7.c"/>
        <files mask="arm_sub_f32.c"/>
        <files mask="arm_sub_f64.c"/>
        <files mask="arm_sub_q15.c"/>
        <files mask="arm_sub_q31.c"/>
        <files mask="arm_sub_q7.c"/>
        <files mask="arm_xor_u16.c"/>
        <files mask="arm_xor_u32.c"/>
        <files mask="arm_xor_u8.c"/>
        <files mask="arm_abs_f16.c"/>
        <files mask="arm_add_f16.c"/>
        <files mask="arm_clip_f16.c"/>
        <files mask="arm_dot_prod_f16.c"/>
        <files mask="arm_mult_f16.c"/>
        <files mask="arm_negate_f16.c"/>
        <files mask="arm_offset_f16.c"/>
        <files mask="arm_scale_f16.c"/>
        <files mask="arm_sub_f16.c"/>
      </source>
      <source relative_path="Source/BayesFunctions" type="src">
        <files mask="BayesFunctions.c"/>
        <files mask="BayesFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/BayesFunctions" type="src">
        <files mask="arm_gaussian_naive_bayes_predict_f32.c"/>
        <files mask="arm_gaussian_naive_bayes_predict_f16.c"/>
      </source>
      <source relative_path="Source/CommonTables" type="src">
        <files mask="CommonTables.c"/>
        <files mask="CommonTablesF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/CommonTables" type="src">
        <files mask="arm_common_tables.c"/>
        <files mask="arm_const_structs.c"/>
        <files mask="arm_mve_tables.c"/>
        <files mask="arm_common_tables_f16.c"/>
        <files mask="arm_const_structs_f16.c"/>
        <files mask="arm_mve_tables_f16.c"/>
      </source>
      <source relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="ComplexMathFunctions.c"/>
        <files mask="ComplexMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="arm_cmplx_conj_f32.c"/>
        <files mask="arm_cmplx_conj_q15.c"/>
        <files mask="arm_cmplx_conj_q31.c"/>
        <files mask="arm_cmplx_dot_prod_f32.c"/>
        <files mask="arm_cmplx_dot_prod_q15.c"/>
        <files mask="arm_cmplx_dot_prod_q31.c"/>
        <files mask="arm_cmplx_mag_f32.c"/>
        <files mask="arm_cmplx_mag_f64.c"/>
        <files mask="arm_cmplx_mag_fast_q15.c"/>
        <files mask="arm_cmplx_mag_q15.c"/>
        <files mask="arm_cmplx_mag_q31.c"/>
        <files mask="arm_cmplx_mag_squared_f32.c"/>
        <files mask="arm_cmplx_mag_squared_f64.c"/>
        <files mask="arm_cmplx_mag_squared_q15.c"/>
        <files mask="arm_cmplx_mag_squared_q31.c"/>
        <files mask="arm_cmplx_mult_cmplx_f32.c"/>
        <files mask="arm_cmplx_mult_cmplx_f64.c"/>
        <files mask="arm_cmplx_mult_cmplx_q15.c"/>
        <files mask="arm_cmplx_mult_cmplx_q31.c"/>
        <files mask="arm_cmplx_mult_real_f32.c"/>
        <files mask="arm_cmplx_mult_real_q15.c"/>
        <files mask="arm_cmplx_mult_real_q31.c"/>
        <files mask="arm_cmplx_conj_f16.c"/>
        <files mask="arm_cmplx_dot_prod_f16.c"/>
        <files mask="arm_cmplx_mag_f16.c"/>
        <files mask="arm_cmplx_mag_squared_f16.c"/>
        <files mask="arm_cmplx_mult_cmplx_f16.c"/>
        <files mask="arm_cmplx_mult_real_f16.c"/>
      </source>
      <source relative_path="Source/ControllerFunctions" type="src">
        <files mask="ControllerFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/ControllerFunctions" type="src">
        <files mask="arm_pid_init_f32.c"/>
        <files mask="arm_pid_init_q15.c"/>
        <files mask="arm_pid_init_q31.c"/>
        <files mask="arm_pid_reset_f32.c"/>
        <files mask="arm_pid_reset_q15.c"/>
        <files mask="arm_pid_reset_q31.c"/>
        <files mask="arm_sin_cos_f32.c"/>
        <files mask="arm_sin_cos_q31.c"/>
      </source>
      <source relative_path="Source/DistanceFunctions" type="src">
        <files mask="DistanceFunctions.c"/>
        <files mask="DistanceFunctionsF16.c"/>
      </source>
      <source relative_path="Source/DistanceFunctions" type="c_include">
        <files mask="arm_boolean_distance_template.h"/>
      </source>
      <source exclude="true" relative_path="Source/DistanceFunctions" type="src">
        <files mask="arm_boolean_distance.c"/>
        <files mask="arm_braycurtis_distance_f32.c"/>
        <files mask="arm_canberra_distance_f32.c"/>
        <files mask="arm_chebyshev_distance_f32.c"/>
        <files mask="arm_chebyshev_distance_f64.c"/>
        <files mask="arm_cityblock_distance_f32.c"/>
        <files mask="arm_cityblock_distance_f64.c"/>
        <files mask="arm_correlation_distance_f32.c"/>
        <files mask="arm_cosine_distance_f32.c"/>
        <files mask="arm_cosine_distance_f64.c"/>
        <files mask="arm_dice_distance.c"/>
        <files mask="arm_dtw_distance_f32.c"/>
        <files mask="arm_dtw_init_window_q7.c"/>
        <files mask="arm_dtw_path_f32.c"/>
        <files mask="arm_euclidean_distance_f32.c"/>
        <files mask="arm_euclidean_distance_f64.c"/>
        <files mask="arm_hamming_distance.c"/>
        <files mask="arm_jaccard_distance.c"/>
        <files mask="arm_jensenshannon_distance_f32.c"/>
        <files mask="arm_kulsinski_distance.c"/>
        <files mask="arm_minkowski_distance_f32.c"/>
        <files mask="arm_rogerstanimoto_distance.c"/>
        <files mask="arm_russellrao_distance.c"/>
        <files mask="arm_sokalmichener_distance.c"/>
        <files mask="arm_sokalsneath_distance.c"/>
        <files mask="arm_yule_distance.c"/>
        <files mask="arm_braycurtis_distance_f16.c"/>
        <files mask="arm_chebyshev_distance_f16.c"/>
        <files mask="arm_canberra_distance_f16.c"/>
        <files mask="arm_cityblock_distance_f16.c"/>
        <files mask="arm_correlation_distance_f16.c"/>
        <files mask="arm_cosine_distance_f16.c"/>
        <files mask="arm_euclidean_distance_f16.c"/>
        <files mask="arm_jensenshannon_distance_f16.c"/>
        <files mask="arm_minkowski_distance_f16.c"/>
      </source>
      <source relative_path="Source/FastMathFunctions" type="src">
        <files mask="FastMathFunctions.c"/>
        <files mask="FastMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/FastMathFunctions" type="src">
        <files mask="arm_atan2_f32.c"/>
        <files mask="arm_atan2_q15.c"/>
        <files mask="arm_atan2_q31.c"/>
        <files mask="arm_cos_f32.c"/>
        <files mask="arm_cos_q15.c"/>
        <files mask="arm_cos_q31.c"/>
        <files mask="arm_divide_q15.c"/>
        <files mask="arm_divide_q31.c"/>
        <files mask="arm_sin_f32.c"/>
        <files mask="arm_sin_q15.c"/>
        <files mask="arm_sin_q31.c"/>
        <files mask="arm_sqrt_q15.c"/>
        <files mask="arm_sqrt_q31.c"/>
        <files mask="arm_vexp_f32.c"/>
        <files mask="arm_vexp_f64.c"/>
        <files mask="arm_vlog_f32.c"/>
        <files mask="arm_vlog_f64.c"/>
        <files mask="arm_vlog_q15.c"/>
        <files mask="arm_vlog_q31.c"/>
        <files mask="arm_atan2_f16.c"/>
        <files mask="arm_vexp_f16.c"/>
        <files mask="arm_vinverse_f16.c"/>
        <files mask="arm_vlog_f16.c"/>
      </source>
      <source relative_path="Source/FilteringFunctions" type="src">
        <files mask="FilteringFunctions.c"/>
        <files mask="FilteringFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/FilteringFunctions" type="src">
        <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f32.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
        <files mask="arm_biquad_cascade_df1_init_f32.c"/>
        <files mask="arm_biquad_cascade_df1_init_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_q15.c"/>
        <files mask="arm_biquad_cascade_df1_q31.c"/>
        <files mask="arm_biquad_cascade_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_f64.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
        <files mask="arm_conv_f32.c"/>
        <files mask="arm_conv_fast_opt_q15.c"/>
        <files mask="arm_conv_fast_q15.c"/>
        <files mask="arm_conv_fast_q31.c"/>
        <files mask="arm_conv_opt_q15.c"/>
        <files mask="arm_conv_opt_q7.c"/>
        <files mask="arm_conv_partial_f32.c"/>
        <files mask="arm_conv_partial_fast_opt_q15.c"/>
        <files mask="arm_conv_partial_fast_q15.c"/>
        <files mask="arm_conv_partial_fast_q31.c"/>
        <files mask="arm_conv_partial_opt_q15.c"/>
        <files mask="arm_conv_partial_opt_q7.c"/>
        <files mask="arm_conv_partial_q15.c"/>
        <files mask="arm_conv_partial_q31.c"/>
        <files mask="arm_conv_partial_q7.c"/>
        <files mask="arm_conv_q15.c"/>
        <files mask="arm_conv_q31.c"/>
        <files mask="arm_conv_q7.c"/>
        <files mask="arm_correlate_f32.c"/>
        <files mask="arm_correlate_f64.c"/>
        <files mask="arm_correlate_fast_opt_q15.c"/>
        <files mask="arm_correlate_fast_q15.c"/>
        <files mask="arm_correlate_fast_q31.c"/>
        <files mask="arm_correlate_opt_q15.c"/>
        <files mask="arm_correlate_opt_q7.c"/>
        <files mask="arm_correlate_q15.c"/>
        <files mask="arm_correlate_q31.c"/>
        <files mask="arm_correlate_q7.c"/>
        <files mask="arm_fir_decimate_f32.c"/>
        <files mask="arm_fir_decimate_fast_q15.c"/>
        <files mask="arm_fir_decimate_fast_q31.c"/>
        <files mask="arm_fir_decimate_init_f32.c"/>
        <files mask="arm_fir_decimate_init_q15.c"/>
        <files mask="arm_fir_decimate_init_q31.c"/>
        <files mask="arm_fir_decimate_q15.c"/>
        <files mask="arm_fir_decimate_q31.c"/>
        <files mask="arm_fir_f32.c"/>
        <files mask="arm_fir_f64.c"/>
        <files mask="arm_fir_fast_q15.c"/>
        <files mask="arm_fir_fast_q31.c"/>
        <files mask="arm_fir_init_f32.c"/>
        <files mask="arm_fir_init_f64.c"/>
        <files mask="arm_fir_init_q15.c"/>
        <files mask="arm_fir_init_q31.c"/>
        <files mask="arm_fir_init_q7.c"/>
        <files mask="arm_fir_interpolate_f32.c"/>
        <files mask="arm_fir_interpolate_init_f32.c"/>
        <files mask="arm_fir_interpolate_init_q15.c"/>
        <files mask="arm_fir_interpolate_init_q31.c"/>
        <files mask="arm_fir_interpolate_q15.c"/>
        <files mask="arm_fir_interpolate_q31.c"/>
        <files mask="arm_fir_lattice_f32.c"/>
        <files mask="arm_fir_lattice_init_f32.c"/>
        <files mask="arm_fir_lattice_init_q15.c"/>
        <files mask="arm_fir_lattice_init_q31.c"/>
        <files mask="arm_fir_lattice_q15.c"/>
        <files mask="arm_fir_lattice_q31.c"/>
        <files mask="arm_fir_q15.c"/>
        <files mask="arm_fir_q31.c"/>
        <files mask="arm_fir_q7.c"/>
        <files mask="arm_fir_sparse_f32.c"/>
        <files mask="arm_fir_sparse_init_f32.c"/>
        <files mask="arm_fir_sparse_init_q15.c"/>
        <files mask="arm_fir_sparse_init_q31.c"/>
        <files mask="arm_fir_sparse_init_q7.c"/>
        <files mask="arm_fir_sparse_q15.c"/>
        <files mask="arm_fir_sparse_q31.c"/>
        <files mask="arm_fir_sparse_q7.c"/>
        <files mask="arm_iir_lattice_f32.c"/>
        <files mask="arm_iir_lattice_init_f32.c"/>
        <files mask="arm_iir_lattice_init_q15.c"/>
        <files mask="arm_iir_lattice_init_q31.c"/>
        <files mask="arm_iir_lattice_q15.c"/>
        <files mask="arm_iir_lattice_q31.c"/>
        <files mask="arm_levinson_durbin_f32.c"/>
        <files mask="arm_levinson_durbin_q31.c"/>
        <files mask="arm_lms_f32.c"/>
        <files mask="arm_lms_init_f32.c"/>
        <files mask="arm_lms_init_q15.c"/>
        <files mask="arm_lms_init_q31.c"/>
        <files mask="arm_lms_norm_f32.c"/>
        <files mask="arm_lms_norm_init_f32.c"/>
        <files mask="arm_lms_norm_init_q15.c"/>
        <files mask="arm_lms_norm_init_q31.c"/>
        <files mask="arm_lms_norm_q15.c"/>
        <files mask="arm_lms_norm_q31.c"/>
        <files mask="arm_lms_q15.c"/>
        <files mask="arm_lms_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f16.c"/>
        <files mask="arm_biquad_cascade_df1_init_f16.c"/>
        <files mask="arm_biquad_cascade_df2T_f16.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f16.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f16.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f16.c"/>
        <files mask="arm_correlate_f16.c"/>
        <files mask="arm_fir_f16.c"/>
        <files mask="arm_fir_init_f16.c"/>
        <files mask="arm_levinson_durbin_f16.c"/>
      </source>
      <source relative_path="Source/InterpolationFunctions" type="src">
        <files mask="InterpolationFunctions.c"/>
        <files mask="InterpolationFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/InterpolationFunctions" type="src">
        <files mask="arm_bilinear_interp_f32.c"/>
        <files mask="arm_bilinear_interp_q15.c"/>
        <files mask="arm_bilinear_interp_q31.c"/>
        <files mask="arm_bilinear_interp_q7.c"/>
        <files mask="arm_linear_interp_f32.c"/>
        <files mask="arm_linear_interp_q15.c"/>
        <files mask="arm_linear_interp_q31.c"/>
        <files mask="arm_linear_interp_q7.c"/>
        <files mask="arm_spline_interp_f32.c"/>
        <files mask="arm_spline_interp_init_f32.c"/>
        <files mask="arm_bilinear_interp_f16.c"/>
        <files mask="arm_linear_interp_f16.c"/>
      </source>
      <source relative_path="Source/MatrixFunctions" type="src">
        <files mask="MatrixFunctions.c"/>
        <files mask="MatrixFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/MatrixFunctions" type="src">
        <files mask="arm_householder_f32.c"/>
        <files mask="arm_householder_f64.c"/>
        <files mask="arm_mat_add_f32.c"/>
        <files mask="arm_mat_add_q15.c"/>
        <files mask="arm_mat_add_q31.c"/>
        <files mask="arm_mat_cholesky_f32.c"/>
        <files mask="arm_mat_cholesky_f64.c"/>
        <files mask="arm_mat_cmplx_mult_f32.c"/>
        <files mask="arm_mat_cmplx_mult_q15.c"/>
        <files mask="arm_mat_cmplx_mult_q31.c"/>
        <files mask="arm_mat_cmplx_trans_f32.c"/>
        <files mask="arm_mat_cmplx_trans_q15.c"/>
        <files mask="arm_mat_cmplx_trans_q31.c"/>
        <files mask="arm_mat_init_f32.c"/>
        <files mask="arm_mat_init_f64.c"/>
        <files mask="arm_mat_init_q15.c"/>
        <files mask="arm_mat_init_q31.c"/>
        <files mask="arm_mat_inverse_f32.c"/>
        <files mask="arm_mat_inverse_f64.c"/>
        <files mask="arm_mat_ldlt_f32.c"/>
        <files mask="arm_mat_ldlt_f64.c"/>
        <files mask="arm_mat_mult_f32.c"/>
        <files mask="arm_mat_mult_f64.c"/>
        <files mask="arm_mat_mult_fast_q15.c"/>
        <files mask="arm_mat_mult_fast_q31.c"/>
        <files mask="arm_mat_mult_opt_q31.c"/>
        <files mask="arm_mat_mult_q15.c"/>
        <files mask="arm_mat_mult_q31.c"/>
        <files mask="arm_mat_mult_q7.c"/>
        <files mask="arm_mat_qr_f32.c"/>
        <files mask="arm_mat_qr_f64.c"/>
        <files mask="arm_mat_scale_f32.c"/>
        <files mask="arm_mat_scale_q15.c"/>
        <files mask="arm_mat_scale_q31.c"/>
        <files mask="arm_mat_solve_lower_triangular_f32.c"/>
        <files mask="arm_mat_solve_lower_triangular_f64.c"/>
        <files mask="arm_mat_solve_upper_triangular_f32.c"/>
        <files mask="arm_mat_solve_upper_triangular_f64.c"/>
        <files mask="arm_mat_sub_f32.c"/>
        <files mask="arm_mat_sub_f64.c"/>
        <files mask="arm_mat_sub_q15.c"/>
        <files mask="arm_mat_sub_q31.c"/>
        <files mask="arm_mat_trans_f32.c"/>
        <files mask="arm_mat_trans_f64.c"/>
        <files mask="arm_mat_trans_q15.c"/>
        <files mask="arm_mat_trans_q31.c"/>
        <files mask="arm_mat_trans_q7.c"/>
        <files mask="arm_mat_vec_mult_f32.c"/>
        <files mask="arm_mat_vec_mult_q15.c"/>
        <files mask="arm_mat_vec_mult_q31.c"/>
        <files mask="arm_mat_vec_mult_q7.c"/>
        <files mask="arm_householder_f16.c"/>
        <files mask="arm_mat_add_f16.c"/>
        <files mask="arm_mat_cholesky_f16.c"/>
        <files mask="arm_mat_cmplx_mult_f16.c"/>
        <files mask="arm_mat_cmplx_trans_f16.c"/>
        <files mask="arm_mat_init_f16.c"/>
        <files mask="arm_mat_inverse_f16.c"/>
        <files mask="arm_mat_qr_f16.c"/>
        <files mask="arm_mat_mult_f16.c"/>
        <files mask="arm_mat_scale_f16.c"/>
        <files mask="arm_mat_solve_lower_triangular_f16.c"/>
        <files mask="arm_mat_solve_upper_triangular_f16.c"/>
        <files mask="arm_mat_sub_f16.c"/>
        <files mask="arm_mat_trans_f16.c"/>
        <files mask="arm_mat_vec_mult_f16.c"/>
      </source>
      <source relative_path="Source/QuaternionMathFunctions" type="src">
        <files mask="QuaternionMathFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/QuaternionMathFunctions" type="src">
        <files mask="arm_quaternion2rotation_f32.c"/>
        <files mask="arm_quaternion_conjugate_f32.c"/>
        <files mask="arm_quaternion_inverse_f32.c"/>
        <files mask="arm_quaternion_normalize_f32.c"/>
        <files mask="arm_quaternion_norm_f32.c"/>
        <files mask="arm_quaternion_product_f32.c"/>
        <files mask="arm_quaternion_product_single_f32.c"/>
        <files mask="arm_rotation2quaternion_f32.c"/>
      </source>
      <source relative_path="Source/SVMFunctions" type="src">
        <files mask="SVMFunctions.c"/>
        <files mask="SVMFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/SVMFunctions" type="src">
        <files mask="arm_svm_linear_init_f32.c"/>
        <files mask="arm_svm_linear_predict_f32.c"/>
        <files mask="arm_svm_polynomial_init_f32.c"/>
        <files mask="arm_svm_polynomial_predict_f32.c"/>
        <files mask="arm_svm_rbf_init_f32.c"/>
        <files mask="arm_svm_rbf_predict_f32.c"/>
        <files mask="arm_svm_sigmoid_init_f32.c"/>
        <files mask="arm_svm_sigmoid_predict_f32.c"/>
        <files mask="arm_svm_linear_init_f16.c"/>
        <files mask="arm_svm_linear_predict_f16.c"/>
        <files mask="arm_svm_polynomial_init_f16.c"/>
        <files mask="arm_svm_polynomial_predict_f16.c"/>
        <files mask="arm_svm_rbf_init_f16.c"/>
        <files mask="arm_svm_rbf_predict_f16.c"/>
        <files mask="arm_svm_sigmoid_init_f16.c"/>
        <files mask="arm_svm_sigmoid_predict_f16.c"/>
      </source>
      <source relative_path="Source/StatisticsFunctions" type="src">
        <files mask="StatisticsFunctions.c"/>
        <files mask="StatisticsFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/StatisticsFunctions" type="src">
        <files mask="arm_absmax_f32.c"/>
        <files mask="arm_absmax_f64.c"/>
        <files mask="arm_absmax_no_idx_f32.c"/>
        <files mask="arm_absmax_no_idx_f64.c"/>
        <files mask="arm_absmax_no_idx_q15.c"/>
        <files mask="arm_absmax_no_idx_q31.c"/>
        <files mask="arm_absmax_no_idx_q7.c"/>
        <files mask="arm_absmax_q15.c"/>
        <files mask="arm_absmax_q31.c"/>
        <files mask="arm_absmax_q7.c"/>
        <files mask="arm_absmin_f32.c"/>
        <files mask="arm_absmin_f64.c"/>
        <files mask="arm_absmin_no_idx_f32.c"/>
        <files mask="arm_absmin_no_idx_f64.c"/>
        <files mask="arm_absmin_no_idx_q15.c"/>
        <files mask="arm_absmin_no_idx_q31.c"/>
        <files mask="arm_absmin_no_idx_q7.c"/>
        <files mask="arm_absmin_q15.c"/>
        <files mask="arm_absmin_q31.c"/>
        <files mask="arm_absmin_q7.c"/>
        <files mask="arm_accumulate_f32.c"/>
        <files mask="arm_accumulate_f64.c"/>
        <files mask="arm_entropy_f32.c"/>
        <files mask="arm_entropy_f64.c"/>
        <files mask="arm_kullback_leibler_f32.c"/>
        <files mask="arm_kullback_leibler_f64.c"/>
        <files mask="arm_logsumexp_dot_prod_f32.c"/>
        <files mask="arm_logsumexp_f32.c"/>
        <files mask="arm_max_f32.c"/>
        <files mask="arm_max_f64.c"/>
        <files mask="arm_max_no_idx_f32.c"/>
        <files mask="arm_max_no_idx_f64.c"/>
        <files mask="arm_max_no_idx_q15.c"/>
        <files mask="arm_max_no_idx_q31.c"/>
        <files mask="arm_max_no_idx_q7.c"/>
        <files mask="arm_max_q15.c"/>
        <files mask="arm_max_q31.c"/>
        <files mask="arm_max_q7.c"/>
        <files mask="arm_mean_f32.c"/>
        <files mask="arm_mean_f64.c"/>
        <files mask="arm_mean_q15.c"/>
        <files mask="arm_mean_q31.c"/>
        <files mask="arm_mean_q7.c"/>
        <files mask="arm_min_f32.c"/>
        <files mask="arm_min_f64.c"/>
        <files mask="arm_min_no_idx_f32.c"/>
        <files mask="arm_min_no_idx_f64.c"/>
        <files mask="arm_min_no_idx_q15.c"/>
        <files mask="arm_min_no_idx_q31.c"/>
        <files mask="arm_min_no_idx_q7.c"/>
        <files mask="arm_min_q15.c"/>
        <files mask="arm_min_q31.c"/>
        <files mask="arm_min_q7.c"/>
        <files mask="arm_mse_f32.c"/>
        <files mask="arm_mse_f64.c"/>
        <files mask="arm_mse_q15.c"/>
        <files mask="arm_mse_q31.c"/>
        <files mask="arm_mse_q7.c"/>
        <files mask="arm_power_f32.c"/>
        <files mask="arm_power_f64.c"/>
        <files mask="arm_power_q15.c"/>
        <files mask="arm_power_q31.c"/>
        <files mask="arm_power_q7.c"/>
        <files mask="arm_rms_f32.c"/>
        <files mask="arm_rms_q15.c"/>
        <files mask="arm_rms_q31.c"/>
        <files mask="arm_std_f32.c"/>
        <files mask="arm_std_f64.c"/>
        <files mask="arm_std_q15.c"/>
        <files mask="arm_std_q31.c"/>
        <files mask="arm_var_f32.c"/>
        <files mask="arm_var_f64.c"/>
        <files mask="arm_var_q15.c"/>
        <files mask="arm_var_q31.c"/>
        <files mask="arm_absmax_f16.c"/>
        <files mask="arm_absmax_no_idx_f16.c"/>
        <files mask="arm_absmin_f16.c"/>
        <files mask="arm_absmin_no_idx_f16.c"/>
        <files mask="arm_accumulate_f16.c"/>
        <files mask="arm_entropy_f16.c"/>
        <files mask="arm_kullback_leibler_f16.c"/>
        <files mask="arm_logsumexp_dot_prod_f16.c"/>
        <files mask="arm_logsumexp_f16.c"/>
        <files mask="arm_max_f16.c"/>
        <files mask="arm_max_no_idx_f16.c"/>
        <files mask="arm_mean_f16.c"/>
        <files mask="arm_min_f16.c"/>
        <files mask="arm_min_no_idx_f16.c"/>
        <files mask="arm_mse_f16.c"/>
        <files mask="arm_power_f16.c"/>
        <files mask="arm_rms_f16.c"/>
        <files mask="arm_std_f16.c"/>
        <files mask="arm_var_f16.c"/>
      </source>
      <source relative_path="Source/SupportFunctions" type="src">
        <files mask="SupportFunctions.c"/>
        <files mask="SupportFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/SupportFunctions" type="src">
        <files mask="arm_barycenter_f32.c"/>
        <files mask="arm_bitonic_sort_f32.c"/>
        <files mask="arm_bubble_sort_f32.c"/>
        <files mask="arm_copy_f32.c"/>
        <files mask="arm_copy_f64.c"/>
        <files mask="arm_copy_q15.c"/>
        <files mask="arm_copy_q31.c"/>
        <files mask="arm_copy_q7.c"/>
        <files mask="arm_f64_to_float.c"/>
        <files mask="arm_f64_to_q31.c"/>
        <files mask="arm_f64_to_q15.c"/>
        <files mask="arm_f64_to_q7.c"/>
        <files mask="arm_fill_f32.c"/>
        <files mask="arm_fill_f64.c"/>
        <files mask="arm_fill_q15.c"/>
        <files mask="arm_fill_q31.c"/>
        <files mask="arm_fill_q7.c"/>
        <files mask="arm_float_to_f64.c"/>
        <files mask="arm_float_to_q15.c"/>
        <files mask="arm_float_to_q31.c"/>
        <files mask="arm_float_to_q7.c"/>
        <files mask="arm_heap_sort_f32.c"/>
        <files mask="arm_insertion_sort_f32.c"/>
        <files mask="arm_merge_sort_f32.c"/>
        <files mask="arm_merge_sort_init_f32.c"/>
        <files mask="arm_q15_to_f64.c"/>
        <files mask="arm_q15_to_float.c"/>
        <files mask="arm_q15_to_q31.c"/>
        <files mask="arm_q15_to_q7.c"/>
        <files mask="arm_q31_to_f64.c"/>
        <files mask="arm_q31_to_float.c"/>
        <files mask="arm_q31_to_q15.c"/>
        <files mask="arm_q31_to_q7.c"/>
        <files mask="arm_q7_to_f64.c"/>
        <files mask="arm_q7_to_float.c"/>
        <files mask="arm_q7_to_q15.c"/>
        <files mask="arm_q7_to_q31.c"/>
        <files mask="arm_quick_sort_f32.c"/>
        <files mask="arm_selection_sort_f32.c"/>
        <files mask="arm_sort_f32.c"/>
        <files mask="arm_sort_init_f32.c"/>
        <files mask="arm_weighted_sum_f32.c"/>
        <files mask="arm_barycenter_f16.c"/>
        <files mask="arm_copy_f16.c"/>
        <files mask="arm_f16_to_float.c"/>
        <files mask="arm_f16_to_q15.c"/>
        <files mask="arm_f16_to_f64.c"/>
        <files mask="arm_f64_to_f16.c"/>
        <files mask="arm_fill_f16.c"/>
        <files mask="arm_float_to_f16.c"/>
        <files mask="arm_q15_to_f16.c"/>
        <files mask="arm_weighted_sum_f16.c"/>
      </source>
      <source relative_path="Source/TransformFunctions" type="src">
        <files mask="TransformFunctions.c"/>
        <files mask="TransformFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/TransformFunctions" type="src">
        <files mask="arm_bitreversal.c"/>
        <files mask="arm_bitreversal2.c"/>
        <files mask="arm_cfft_f32.c"/>
        <files mask="arm_cfft_f64.c"/>
        <files mask="arm_cfft_init_f32.c"/>
        <files mask="arm_cfft_init_f64.c"/>
        <files mask="arm_cfft_init_q15.c"/>
        <files mask="arm_cfft_init_q31.c"/>
        <files mask="arm_cfft_q15.c"/>
        <files mask="arm_cfft_q31.c"/>
        <files mask="arm_cfft_radix2_f32.c"/>
        <files mask="arm_cfft_radix2_init_f32.c"/>
        <files mask="arm_cfft_radix2_init_q15.c"/>
        <files mask="arm_cfft_radix2_init_q31.c"/>
        <files mask="arm_cfft_radix2_q15.c"/>
        <files mask="arm_cfft_radix2_q31.c"/>
        <files mask="arm_cfft_radix4_f32.c"/>
        <files mask="arm_cfft_radix4_init_f32.c"/>
        <files mask="arm_cfft_radix4_init_q15.c"/>
        <files mask="arm_cfft_radix4_init_q31.c"/>
        <files mask="arm_cfft_radix4_q15.c"/>
        <files mask="arm_cfft_radix4_q31.c"/>
        <files mask="arm_cfft_radix8_f32.c"/>
        <files mask="arm_dct4_f32.c"/>
        <files mask="arm_dct4_init_f32.c"/>
        <files mask="arm_dct4_init_q15.c"/>
        <files mask="arm_dct4_init_q31.c"/>
        <files mask="arm_dct4_q15.c"/>
        <files mask="arm_dct4_q31.c"/>
        <files mask="arm_mfcc_f32.c"/>
        <files mask="arm_mfcc_init_f32.c"/>
        <files mask="arm_mfcc_init_q15.c"/>
        <files mask="arm_mfcc_init_q31.c"/>
        <files mask="arm_mfcc_q15.c"/>
        <files mask="arm_mfcc_q31.c"/>
        <files mask="arm_rfft_f32.c"/>
        <files mask="arm_rfft_fast_f32.c"/>
        <files mask="arm_rfft_fast_f64.c"/>
        <files mask="arm_rfft_fast_init_f32.c"/>
        <files mask="arm_rfft_fast_init_f64.c"/>
        <files mask="arm_rfft_init_f32.c"/>
        <files mask="arm_rfft_init_q15.c"/>
        <files mask="arm_rfft_init_q31.c"/>
        <files mask="arm_rfft_q15.c"/>
        <files mask="arm_rfft_q31.c"/>
        <files mask="arm_bitreversal_f16.c"/>
        <files mask="arm_cfft_f16.c"/>
        <files mask="arm_cfft_init_f16.c"/>
        <files mask="arm_cfft_radix2_f16.c"/>
        <files mask="arm_cfft_radix2_init_f16.c"/>
        <files mask="arm_cfft_radix4_f16.c"/>
        <files mask="arm_cfft_radix8_f16.c"/>
        <files mask="arm_mfcc_f16.c"/>
        <files mask="arm_cfft_radix4_init_f16.c"/>
        <files mask="arm_mfcc_init_f16.c"/>
        <files mask="arm_rfft_fast_f16.c"/>
        <files mask="arm_rfft_fast_init_f16.c"/>
      </source>
      <source relative_path="Source/WindowFunctions" type="src">
        <files mask="WindowFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/WindowFunctions" type="src">
        <files mask="arm_bartlett_f32.c"/>
        <files mask="arm_bartlett_f64.c"/>
        <files mask="arm_blackman_harris_92db_f32.c"/>
        <files mask="arm_blackman_harris_92db_f64.c"/>
        <files mask="arm_hamming_f32.c"/>
        <files mask="arm_hamming_f64.c"/>
        <files mask="arm_hanning_f32.c"/>
        <files mask="arm_hanning_f64.c"/>
        <files mask="arm_hft116d_f32.c"/>
        <files mask="arm_hft116d_f64.c"/>
        <files mask="arm_hft144d_f32.c"/>
        <files mask="arm_hft144d_f64.c"/>
        <files mask="arm_hft169d_f32.c"/>
        <files mask="arm_hft169d_f64.c"/>
        <files mask="arm_hft196d_f32.c"/>
        <files mask="arm_hft196d_f64.c"/>
        <files mask="arm_hft223d_f32.c"/>
        <files mask="arm_hft223d_f64.c"/>
        <files mask="arm_hft248d_f32.c"/>
        <files mask="arm_hft248d_f64.c"/>
        <files mask="arm_hft90d_f32.c"/>
        <files mask="arm_hft90d_f64.c"/>
        <files mask="arm_hft95_f32.c"/>
        <files mask="arm_hft95_f64.c"/>
        <files mask="arm_nuttall3a_f32.c"/>
        <files mask="arm_nuttall3a_f64.c"/>
        <files mask="arm_nuttall3b_f32.c"/>
        <files mask="arm_nuttall3b_f64.c"/>
        <files mask="arm_nuttall3_f32.c"/>
        <files mask="arm_nuttall3_f64.c"/>
        <files mask="arm_nuttall4a_f32.c"/>
        <files mask="arm_nuttall4a_f64.c"/>
        <files mask="arm_nuttall4b_f32.c"/>
        <files mask="arm_nuttall4b_f64.c"/>
        <files mask="arm_nuttall4c_f32.c"/>
        <files mask="arm_nuttall4c_f64.c"/>
        <files mask="arm_nuttall4_f32.c"/>
        <files mask="arm_nuttall4_f64.c"/>
        <files mask="arm_welch_f32.c"/>
        <files mask="arm_welch_f64.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_DSP_Source.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="PrivateInclude" type="c_include"/>
        <include_path relative_path="Source/DistanceFunctions" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USART.MCXA153" name="CMSIS_Driver_USART" brief="Access to #include Driver_USART.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver USART" category="CMSIS Driver/USART" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USART.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USART.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USART.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.CAN.MCXA153" name="CMSIS_Driver_CAN" brief="Access to #include Driver_CAN.h file for custom implementation" version="1.3.0" full_name="CMSIS Driver CAN" category="CMSIS Driver/CAN" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_CAN.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_CAN.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_CAN.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet.MCXA153" name="CMSIS_Driver_Ethernet_Common" brief="Access to #include Driver_ETH.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet Common" category="CMSIS Driver/Ethernet" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Common.h"/>
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_ETH_MAC.h"/>
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_MAC.MCXA153" name="CMSIS_Driver_Ethernet_MAC" brief="Access to #include Driver_ETH_MAC.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet MAC" category="CMSIS Driver/Ethernet MAC" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_Common.h"/>
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_MAC.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet_MAC.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_PHY.MCXA153" name="CMSIS_Driver_Ethernet_PHY" brief="Access to #include Driver_ETH_PHY.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet PHY" category="CMSIS Driver/Ethernet PHY" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_ETH_PHY.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_PHY.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet_PHY.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Flash.MCXA153" name="CMSIS_Driver_Flash" brief="Access to #include Driver_Flash.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver Flash" category="CMSIS Driver/Flash" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Flash.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_Flash.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Flash.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.I2C.MCXA153" name="CMSIS_Driver_I2C" brief="Access to #include Driver_I2C.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver I2C" category="CMSIS Driver/I2C" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_I2C.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_I2C.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_I2C.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.MCI.MCXA153" name="CMSIS_Driver_MCI" brief="Access to #include Driver_MCI.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver MCI" category="CMSIS Driver/MCI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_MCI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_MCI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_MCI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.NAND.MCXA153" name="CMSIS_Driver_NAND" brief="Access to #include Driver_NAND.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver NAND" category="CMSIS Driver/NAND" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_NAND.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_NAND.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_NAND.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SAI.MCXA153" name="CMSIS_Driver_SAI" brief="Access to #include Driver_SAI.h file for custom implementation" version="1.2.0" full_name="CMSIS Driver SAI" category="CMSIS Driver/SAI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_SAI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_SAI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_SAI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SPI.MCXA153" name="CMSIS_Driver_SPI" brief="Access to #include Driver_SPI.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver SPI" category="CMSIS Driver/SPI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_SPI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_SPI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_SPI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Device.MCXA153" name="CMSIS_Driver_USB_Device" brief="Access to #include Driver_USBD.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USB Device" category="CMSIS Driver/USB Device" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USBD.h"/>
        <files mask="Driver_USB.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USBD.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USB_Device.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Host.MCXA153" name="CMSIS_Driver_USB_Host" brief="Access to #include Driver_USBH.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USB Host" category="CMSIS Driver/USB Host" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USBH.h"/>
        <files mask="Driver_USB.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USBH.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USB_Host.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.WiFi.MCXA153" name="CMSIS_Driver_WiFi" brief="Access to #include Driver_WiFi.h file" version="1.1.0" full_name="CMSIS Driver WiFi" category="CMSIS Driver/WiFi" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_WiFi.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_WiFi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_WiFi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_OSTick.MCXA153" name="CMSIS_Device_API_OSTick" brief="Device interrupt controller interface" version="1.0.2" full_name="CMSIS Device API OSTick" category="Device/OS Tick" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="os_tick.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Device_API_OSTick.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_RTOS2.MCXA153" name="CMSIS_Device_API_RTOS2" brief="CMSIS-RTOS API for Cortex-M, SC000, and SC300" version="2.1.3" full_name="CMSIS Device API RTOS2" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="cmsis_os2.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Device_API_RTOS2.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.MCXA153" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.1.1" full_name="Utilities miscellaneous" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
        <files mask="fsl_syscall_stub.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="./" type="asm_include" device_cores="cm33_core0_MCXA153">
        <files mask="fsl_memcpy.S"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utilities_misc_utilities.MCXA153.cmake" hidden="true"/>
      </source>
    </component>
    <component id="driver.rtt.template.MCXA153" name="rtt_template" brief="RTT template configuration" version="7.22.0" full_name="rtt template configuration" category="Device/SDK Drivers" user_visible="false" type="project_template" package_base_path="core/components/rtt" project_base_path="rtt">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="template" config="true" type="c_include">
        <files mask="SEGGER_RTT_Conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_rtt_template.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="template" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.common.MCXA153" name="mflash common" brief="mflash common" version="1.0.0" full_name="statically allocated file system for mflash" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mflash_common.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mcuboot.MCXA153" name="mcuboot" brief="mcuboot" version="2.0.0" full_name="MCUboot bootloader" category="File System/MCUboot bootloader" user_visible="false" type="middleware" package_base_path="middleware/mcuboot_opensource" project_base_path="mcuboot">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source exclude="true" relative_path="./" type="other">
        <files mask="LICENSE" hidden="true"/>
        <files mask="NOTICE" hidden="true"/>
      </source>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_mcuboot.cmake" hidden="true"/>
      </source>
    </component>
    <!--<component id="middleware.mcuboot.docs.MCXA153" name="mcuboot_docs" version="2.0.0" package_base_path="middleware/mcuboot_opensource" project_base_path="mcuboot"/>-->
    <!--<component id="middleware.mcuboot.scripts.MCXA153" name="mcuboot_scripts" version="2.0.0" package_base_path="middleware/mcuboot_opensource" project_base_path="mcuboot">
  <source relative_path="./" type="script">
    <files mask="assemble.py"/>
    <files mask="flash.sh"/>
    <files mask="gdb-boot.sh"/>
    <files mask="imgtool.py"/>
    <files mask="jgdb.sh"/>
    <files mask="jl.sh"/>
    <files mask="setup.py"/>
    <files mask="__init__.py"/>
    <files mask="boot_record.py"/>
    <files mask="dumpinfo.py"/>
    <files mask="image.py"/>
    <files mask="main.py"/>
    <files mask="version.py"/>
    <files mask="__init__.py"/>
    <files mask="ecdsa.py"/>
    <files mask="ecdsa_test.py"/>
    <files mask="ed25519.py"/>
    <files mask="ed25519_test.py"/>
    <files mask="general.py"/>
    <files mask="privatebytes.py"/>
    <files mask="rsa.py"/>
    <files mask="rsa_test.py"/>
    <files mask="x25519.py"/>
  </source>
  <source relative_path="./" type="other">
    <files mask="imgtool.nix"/>
    <files mask="mcubin.bt"/>
  </source>
  <source relative_path="./" type="doc">
    <files mask="requirements.txt"/>
  </source>
</component>-->
    <component id="middleware.mcuboot.tinycrypt.MCXA153" name="mcuboot_tinycrypt" brief="TinyCrypt fork in MCUBoot repository" version="0.2.8" full_name="mcuboot_tinycrypt_fork" category="File System/MCUboot bootloader" user_visible="false" type="middleware" package_base_path="middleware/mcuboot_opensource/ext/tinycrypt/lib" project_base_path="tinycrypt">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="include/tinycrypt" type="c_include">
        <files mask="aes.h"/>
        <files mask="cbc_mode.h"/>
        <files mask="ccm_mode.h"/>
        <files mask="cmac_mode.h"/>
        <files mask="constants.h"/>
        <files mask="ctr_mode.h"/>
        <files mask="ctr_prng.h"/>
        <files mask="ecc.h"/>
        <files mask="ecc_dsa.h"/>
        <files mask="hmac.h"/>
        <files mask="hmac_prng.h"/>
        <files mask="sha256.h"/>
        <files mask="utils.h"/>
      </source>
      <source relative_path="source" type="src">
        <files mask="aes_decrypt.c"/>
        <files mask="aes_encrypt.c"/>
        <files mask="cbc_mode.c"/>
        <files mask="ccm_mode.c"/>
        <files mask="cmac_mode.c"/>
        <files mask="ctr_mode.c"/>
        <files mask="ctr_prng.c"/>
        <files mask="ecc.c"/>
        <files mask="ecc_dsa.c"/>
        <files mask="hmac.c"/>
        <files mask="hmac_prng.c"/>
        <files mask="sha256.c"/>
        <files mask="utils.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_mcuboot_tinycrypt.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mcuboot.encrypted_xip.MCXA153" name="mcuboot_encrypted_xip" brief="Encrypted XIP abstraction for MCUBoot" version="1.0.0" full_name="mcuboot_encrypted_xip" category="File System/MCUboot bootloader" user_visible="false" type="middleware" package_base_path="middleware/mcuboot_opensource/ext/nxp_encrypted_xip" project_base_path="encrypted_xip">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="mcuboot_enc_support.h"/>
        <files mask="platform_enc_common.h"/>
      </source>
      <source relative_path="src" type="src">
        <files mask="mcuboot_enc_support.c"/>
        <files mask="platform_enc_bee.c"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="mcuboot_encrypted_xip.md"/>
      </source>
      <source relative_path="enc_xip_images" type="image">
        <files mask="bee_metadata.jpg"/>
        <files mask="bee_rom_layout.jpg"/>
        <files mask="device_fleet_graph.jpg"/>
        <files mask="general_metadata.jpg"/>
        <files mask="keys_scheme.jpg"/>
        <files mask="overwrite_only.jpg"/>
        <files mask="overwrite_only_flow.jpg"/>
        <files mask="three_slot.jpg"/>
        <files mask="three_slot_flow.jpg"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_mcuboot_encrypted_xip.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mcuboot.mbedtls-asn1.MCXA153" name="mcuboot_mbedtls_asn1" brief="MCUBoot's subset of MbedTLS for ASN.1 parsing" version="2.0.0" full_name="mcuboot_mbedtls-asn1" category="File System/MCUboot bootloader" user_visible="false" type="middleware" package_base_path="middleware/mcuboot_opensource/ext/mbedtls-asn1" project_base_path="mbedtls-asn1">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="include/mbedtls" type="c_include">
        <files mask="asn1.h"/>
        <files mask="bignum.h"/>
        <files mask="build_info.h"/>
        <files mask="check_config.h"/>
        <files mask="ecdsa.h"/>
        <files mask="ecp.h"/>
        <files mask="error.h"/>
        <files mask="mbedtls_config.h"/>
        <files mask="md.h"/>
        <files mask="oid.h"/>
        <files mask="pk.h"/>
        <files mask="platform.h"/>
        <files mask="platform_util.h"/>
        <files mask="private_access.h"/>
        <files mask="rsa.h"/>
        <files mask="threading.h"/>
        <files mask="version.h"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="common.h"/>
      </source>
      <source relative_path="src" type="src">
        <files mask="asn1parse.c"/>
        <files mask="platform_util.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_mcuboot_mbedtls-asn1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <!--<component id="middleware.mcuboot.unused_files.MCXA153" name="mcuboot_unused_files" version="2.0.0" package_base_path="middleware/mcuboot_opensource" project_base_path="mcuboot">
  <source relative_path="./" type="other">
    <files mask=".gitignore"/>
    <files mask=".gitmodules"/>
    <files mask=".mbedignore"/>
    <files mask=".travis.yml-disabled"/>
    <files mask="CODE_OF_CONDUCT.md"/>
    <files mask="Cargo.lock"/>
    <files mask="Cargo.toml"/>
    <files mask="NOTICE"/>
    <files mask="README.md"/>
    <files mask="enc-aes128kw.b64"/>
    <files mask="enc-aes256kw.b64"/>
    <files mask="enc-ec256-priv.pem"/>
    <files mask="enc-ec256-pub.pem"/>
    <files mask="enc-rsa2048-priv.pem"/>
    <files mask="enc-rsa2048-pub.pem"/>
    <files mask="enc-x25519-priv.pem"/>
    <files mask="enc-x25519-pub.pem"/>
    <files mask="go.mod"/>
    <files mask="project.yml"/>
    <files mask="repository.yml"/>
    <files mask="root-ec-p256-pkcs8.pem"/>
    <files mask="root-ec-p256.pem"/>
    <files mask="root-ec-p384-pkcs8.pem"/>
    <files mask="root-ec-p384.pem"/>
    <files mask="root-ed25519.pem"/>
    <files mask="root-rsa-2048.pem"/>
    <files mask="root-rsa-3072.pem"/>
  </source>
  <source relative_path="./" type="doc">
    <files mask="ChangeLogKSDK.txt"/>
    <files mask="SW-Content-Register.txt"/>
  </source>
</component>-->
    <component id="docs.USB.MCXA153" name="USB" brief="Docs usb" version="1.0.0" full_name="Docs usb" category="docs/USB" user_visible="true" type="documentation" package_base_path="middleware/usb/docs" project_base_path="USB">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source condition="middleware.usb.device.controller.driver.MCXA153" relative_path="./" type="doc">
        <files mask="MCUXpresso SDK USB Stack User's Guide.pdf"/>
        <files mask="MCUXpresso SDK USB Stack Device Reference Manual.pdf"/>
        <files mask="MCUXpresso SDK USB Stack Composite Device User's Guide.pdf"/>
      </source>
    </component>
    <component id="middleware.usb.phydcd_config_header.MCXA153" name="USB device phydcd config header" brief="USB device phydcd config header" version="2.10.1" full_name="USB device phydcd config header" category="USB/USB DCD" user_visible="true" type="project_template" package_base_path="middleware/usb" project_base_path="source">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="output/npw/dcd_config/phydcd" project_relative_path="generated" config="true" type="c_include">
        <files mask="usb_phydcd_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_phydcd_config_header.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/npw/dcd_config/phydcd" project_relative_path="generated" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.hsdcd_config_header.MCXA153" name="USB device hsdcd config header" brief="USB device hsdcd config header" version="2.10.1" full_name="USB device hsdcd config header" category="USB/USB DCD" user_visible="true" type="project_template" package_base_path="middleware/usb" project_base_path="source">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="output/npw/dcd_config/hsdcd" project_relative_path="generated" config="true" type="c_include">
        <files mask="usb_hsdcd_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_hsdcd_config_header.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/npw/dcd_config/hsdcd" project_relative_path="generated" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.extension.MCXA153" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="11.0.1" full_name="FreeRTOS NXP extension" category="RTOS/TAD extension" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_extension.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.template.MCXA153" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="11.0.1" full_name="FreeRTOS configuration template" category="RTOS/freertos template" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="template/ARM_CM33_3_priority_bits" project_relative_path="../../source" config="true" type="c_include" device_cores="cm33_core0_MCXA153">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_template.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM33_3_priority_bits" project_relative_path="../../source" type="c_include" device_cores="cm33_core0_MCXA153"/>
      </include_paths>
    </component>
    <component id="driver.p3t1755.MCXA153" name="p3t1755" brief="Driver p3t1755" version="2.0.0" full_name="Driver p3t1755" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/p3t1755" project_base_path="component/p3t1755">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_p3t1755.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_p3t1755.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_p3t1755.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_zephyr.MCXA153" name="osa_zephyr" brief="Component osa_zephyr" version="1.0.0" full_name="Component osa_zephyr" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_zephyr.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_zephyr.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_zephyr.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.power_manager_docs.MCXA153" name="power_manager_docs" brief="Power Manager component documentation" version="2.0.0" full_name="Power Manager component documentation" category="Device/SDK Drivers" user_visible="true" type="documentation" package_base_path="core/components/power_manager" project_base_path="component/power_manager">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="README.md"/>
      </source>
      <source relative_path="images" type="image">
        <files mask="memory_example.png"/>
        <files mask="SDK_PM_architecture.png"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="project_template.MCXA153.MCXA153" name="MCXA153" brief="Devices_project_template MCXA153" version="1.0.0" full_name="Devices_project_template MCXA153" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MCXA153/project_template" project_base_path="board">
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="component.serial_manager.MCXA153"/>
              <component_dependency value="platform.utilities.assert.MCXA153"/>
              <component_dependency value="utility.debug_console.MCXA153"/>
            </all>
            <all>
              <component_dependency value="platform.utilities.assert_lite.MCXA153"/>
              <component_dependency value="utility.debug_console_lite.MCXA153"/>
            </all>
          </any_of>
          <component_dependency value="component.lpuart_adapter.MCXA153"/>
          <component_dependency value="device.MCXA153_startup.MCXA153"/>
          <component_dependency value="platform.drivers.clock.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.gpio.MCXA153"/>
          <component_dependency value="platform.drivers.lpuart.MCXA153"/>
          <component_dependency value="platform.drivers.port.MCXA153"/>
          <component_dependency value="platform.drivers.mcx_spc.MCXA153"/>
          <component_dependency value="platform.drivers.reset.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" config="true" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="DEVICES_Project_Template_MCXA153.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MCXA153_startup.MCXA153" name="MCXA153_startup" brief="Device MCXA153_startup" version="1.1.0" full_name="Device MCXA153_startup" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/MCXA153" project_base_path="startup">
      <dependencies>
        <all>
          <component_dependency value="device.MCXA153_system.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" config="true" type="asm_include">
        <files mask="startup_MCXA153.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" config="true" type="src_c">
        <files mask="startup_mcxa153.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" config="true" type="src_cpp">
        <files mask="startup_mcxa153.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MCXA153_startup.MCXA153.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.devices.MCXA153_linker.MCXA153" name="MCXA153_linker" brief="Device MCXA153_linker" version="1.0.0" full_name="Device MCXA153_linker" category="Device/SDK Utilities" user_visible="true" type="linker" package_base_path="core/devices/MCXA153" project_base_path="MCXA153">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" type="linker">
        <files mask="MCXA153_flash.ld"/>
        <files mask="MCXA153_ram.ld"/>
      </source>
    </component>
    <component id="device.MCXA153_CMSIS.MCXA153" name="MCXA153_CMSIS" brief="Device MCXA153_cmsis" version="1.0.0" full_name="Device MCXA153_cmsis" category="Device/CMSIS" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MCXA153" project_base_path="device">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Include_core_cm.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="MCXA153.h"/>
        <files mask="MCXA153_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MCXA153_CMSIS.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.MCXA153" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MCXA153/template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="RTE_Device.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MCXA153" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MCXA153"/>
          <component_dependency value="component.serial_manager.MCXA153"/>
          <component_dependency value="platform.drivers.lpuart.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_uart.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.MCXA153.MCXA153" name="MCXA153" brief="Docs MCXA153" version="1.0.0" full_name="Docs MCXA153" category="docs/MCXA153" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-MCXA153.pdf"/>
        <files mask="MCUXpresso SDK ChangeLog_MCXA153.pdf"/>
        <files mask="MCUXpresso SDK API Reference Manual_MCXA153.pdf"/>
      </source>
      <source relative_path="MCUXpresso SDK API Reference Manual_MCXA153" type="doc">
        <files mask="Kinetis_SDK_Block_Diagram.jpg"/>
        <files mask="a00002.html"/>
        <files mask="a00004.html"/>
        <files mask="a00006.html"/>
        <files mask="a00008.html"/>
        <files mask="a00008.js"/>
        <files mask="a00009.html"/>
        <files mask="a00009.js"/>
        <files mask="a00010.html"/>
        <files mask="a00010.js"/>
        <files mask="a00011.html"/>
        <files mask="a00011.js"/>
        <files mask="a00012.html"/>
        <files mask="a00012.js"/>
        <files mask="a00013.html"/>
        <files mask="a00013.js"/>
        <files mask="a00014.html"/>
        <files mask="a00014.js"/>
        <files mask="a00015.html"/>
        <files mask="a00015.js"/>
        <files mask="a00016.html"/>
        <files mask="a00016.js"/>
        <files mask="a00017.html"/>
        <files mask="a00017.js"/>
        <files mask="a00018.html"/>
        <files mask="a00018.js"/>
        <files mask="a00019.html"/>
        <files mask="a00019.js"/>
        <files mask="a00020.html"/>
        <files mask="a00020.js"/>
        <files mask="a00021.html"/>
        <files mask="a00021.js"/>
        <files mask="a00022.html"/>
        <files mask="a00022.js"/>
        <files mask="a00023.html"/>
        <files mask="a00023.js"/>
        <files mask="a00024.html"/>
        <files mask="a00024.js"/>
        <files mask="a00025.html"/>
        <files mask="a00025.js"/>
        <files mask="a00026.html"/>
        <files mask="a00026.js"/>
        <files mask="a00027.html"/>
        <files mask="a00027.js"/>
        <files mask="a00028.html"/>
        <files mask="a00028.js"/>
        <files mask="a00029.html"/>
        <files mask="a00029.js"/>
        <files mask="a00030.html"/>
        <files mask="a00030.js"/>
        <files mask="a00031.html"/>
        <files mask="a00031.js"/>
        <files mask="a00032.html"/>
        <files mask="a00032.js"/>
        <files mask="a00033.html"/>
        <files mask="a00033.js"/>
        <files mask="a00034.html"/>
        <files mask="a00034.js"/>
        <files mask="a00035.html"/>
        <files mask="a00035.js"/>
        <files mask="a00036.html"/>
        <files mask="a00036.js"/>
        <files mask="a00037.html"/>
        <files mask="a00037.js"/>
        <files mask="a00038.html"/>
        <files mask="a00038.js"/>
        <files mask="a00039.html"/>
        <files mask="a00039.js"/>
        <files mask="a00040.html"/>
        <files mask="a00040.js"/>
        <files mask="a00041.html"/>
        <files mask="a00041.js"/>
        <files mask="a00042.html"/>
        <files mask="a00042.js"/>
        <files mask="a00043.html"/>
        <files mask="a00043.js"/>
        <files mask="a00044.html"/>
        <files mask="a00044.js"/>
        <files mask="a00045.html"/>
        <files mask="a00045.js"/>
        <files mask="a00046.html"/>
        <files mask="a00046.js"/>
        <files mask="a00126.html"/>
        <files mask="a00126.js"/>
        <files mask="a00127.html"/>
        <files mask="a00128.html"/>
        <files mask="a00128.js"/>
        <files mask="a00129.html"/>
        <files mask="a00129.js"/>
        <files mask="a00130.html"/>
        <files mask="a00130.js"/>
        <files mask="a00131.html"/>
        <files mask="a00132.html"/>
        <files mask="a00132.js"/>
        <files mask="a00133.html"/>
        <files mask="a00134.html"/>
        <files mask="a00134.js"/>
        <files mask="a00135.html"/>
        <files mask="a00135.js"/>
        <files mask="a00136.html"/>
        <files mask="a00136.js"/>
        <files mask="a00137.html"/>
        <files mask="a00137.js"/>
        <files mask="a00138.html"/>
        <files mask="a00139.html"/>
        <files mask="a00139.js"/>
        <files mask="a00140.html"/>
        <files mask="a00141.html"/>
        <files mask="a00142.html"/>
        <files mask="a00142.js"/>
        <files mask="a00143.html"/>
        <files mask="a00144.html"/>
        <files mask="a00145.html"/>
        <files mask="a00145.js"/>
        <files mask="a00146.html"/>
        <files mask="a00146.js"/>
        <files mask="a00148.html"/>
        <files mask="arm_logo.png"/>
        <files mask="bc_s.png"/>
        <files mask="bdwn.png"/>
        <files mask="closed.png"/>
        <files mask="customdoxygen.css"/>
        <files mask="dir_00b8e1dae651194443bd9888f2a4493b.html"/>
        <files mask="dir_038dbe8d634d9db67d5340fd03855796.html"/>
        <files mask="dir_10e4f41c1894823a4ebb31d860f38a16.html"/>
        <files mask="dir_11cc436fd45372fe514295b1278a3f5a.html"/>
        <files mask="dir_12ee8d122e1f7909dfb369d4e7e634d2.html"/>
        <files mask="dir_1624d8b38f3ae9cac7786a3abb7f4709.html"/>
        <files mask="dir_1abb04bb608b08cbbf0ffefdca41d0b4.html"/>
        <files mask="dir_21d512e173ab96b5ba9524b224532342.html"/>
        <files mask="dir_2dc577937af61d68e8f894a3be510186.html"/>
        <files mask="dir_31528c1a0c761ae7697ccf58a28d0c5d.html"/>
        <files mask="dir_35d83ff85ea39ab23fa2b81d160e48c3.html"/>
        <files mask="dir_372c791574dbc363eba8625f79985ec1.html"/>
        <files mask="dir_3f4befae1c2b910b09058b3a882479b1.html"/>
        <files mask="dir_44c03f0af927446d0bf596dfe015ac1f.html"/>
        <files mask="dir_4624af087f416ae97ddd1c66cc3c61c0.html"/>
        <files mask="dir_50ef629f52ad749dfe6d46e9ed1d46fa.html"/>
        <files mask="dir_51780322e0ca73f99c1edc2d03313369.html"/>
        <files mask="dir_6150f4bea5ede9786b88a107ca29f4b6.html"/>
        <files mask="dir_6a903a0e8c32fc1b8b1b5732a76c4fc2.html"/>
        <files mask="dir_6c04492dba380d74e43ff2e9ce5163b0.html"/>
        <files mask="dir_6c4d94da42c2b909d0ca46b5faa5b0a6.html"/>
        <files mask="dir_6eca5536b10566ad0d407d51d56337ad.html"/>
        <files mask="dir_6f5f5e069e6f99bc598f97c63733fab5.html"/>
        <files mask="dir_76cf3461a8a488566ae1fd2b30809c0c.html"/>
        <files mask="dir_7ba1938b2efda2b035fd2322ea473e74.html"/>
        <files mask="dir_7e5de0bdab157f0830493ab16aefd907.html"/>
        <files mask="dir_97ef7e83fe678676f0363ff2c203ec34.html"/>
        <files mask="dir_9e5cbc8a535b497364edf5f115202dd9.html"/>
        <files mask="dir_aaaafc2a9f4e560f8971f4fec9a5d828.html"/>
        <files mask="dir_ab2cf6c122126d5ca577c70c3aeb1b1c.html"/>
        <files mask="dir_adccf87b6bd3216cbfd343569e171a3a.html"/>
        <files mask="dir_bf373d1ca96df1fb6dd89486242d02c1.html"/>
        <files mask="dir_c647ff4f6aca47d2093e2a1d732a40fd.html"/>
        <files mask="dir_cd39be920d6c41a20140b1008d476300.html"/>
        <files mask="dir_d23acdc040ea4bb28facae5f06fecea8.html"/>
        <files mask="dir_d4c031fc7b0e205063d9434730d3bbd3.html"/>
        <files mask="dir_deddd99c545b0a09d398c8a1e5238b29.html"/>
        <files mask="dir_ecf024c779b43e399c95a777185da0ba.html"/>
        <files mask="dir_f614c1efc1189cdf1389c1af14d5d4d9.html"/>
        <files mask="dir_f6ca19dce975ecaafc0ebca723260d55.html"/>
        <files mask="doxygen.css"/>
        <files mask="doxygen.png"/>
        <files mask="dynsections.js"/>
        <files mask="fs_logo.gif"/>
        <files mask="ftv2blank.png"/>
        <files mask="ftv2cl.png"/>
        <files mask="ftv2doc.png"/>
        <files mask="ftv2folderclosed.png"/>
        <files mask="ftv2folderopen.png"/>
        <files mask="ftv2lastnode.png"/>
        <files mask="ftv2link.png"/>
        <files mask="ftv2mlastnode.png"/>
        <files mask="ftv2mnode.png"/>
        <files mask="ftv2mo.png"/>
        <files mask="ftv2node.png"/>
        <files mask="ftv2ns.png"/>
        <files mask="ftv2plastnode.png"/>
        <files mask="ftv2pnode.png"/>
        <files mask="ftv2splitbar.png"/>
        <files mask="ftv2vertline.png"/>
        <files mask="index.html"/>
        <files mask="jquery.js"/>
        <files mask="modules.html"/>
        <files mask="modules.js"/>
        <files mask="nav_f.png"/>
        <files mask="nav_g.png"/>
        <files mask="nav_h.png"/>
        <files mask="navtree.css"/>
        <files mask="navtree.js"/>
        <files mask="navtreeindex0.js"/>
        <files mask="navtreeindex1.js"/>
        <files mask="navtreeindex10.js"/>
        <files mask="navtreeindex11.js"/>
        <files mask="navtreeindex12.js"/>
        <files mask="navtreeindex13.js"/>
        <files mask="navtreeindex14.js"/>
        <files mask="navtreeindex15.js"/>
        <files mask="navtreeindex2.js"/>
        <files mask="navtreeindex3.js"/>
        <files mask="navtreeindex4.js"/>
        <files mask="navtreeindex5.js"/>
        <files mask="navtreeindex6.js"/>
        <files mask="navtreeindex7.js"/>
        <files mask="navtreeindex8.js"/>
        <files mask="navtreeindex9.js"/>
        <files mask="nxp_logo_small.png"/>
        <files mask="open.png"/>
        <files mask="pages.html"/>
        <files mask="resize.js"/>
        <files mask="sync_off.png"/>
        <files mask="sync_on.png"/>
        <files mask="tab_a.png"/>
        <files mask="tab_b.png"/>
        <files mask="tab_h.png"/>
        <files mask="tab_s.png"/>
        <files mask="tabs.css"/>
      </source>
      <source relative_path="MCUXpresso SDK API Reference Manual_MCXA153/search" type="doc">
        <files mask="all_5f.html"/>
        <files mask="all_5f.js"/>
        <files mask="all_61.html"/>
        <files mask="all_61.js"/>
        <files mask="all_62.html"/>
        <files mask="all_62.js"/>
        <files mask="all_63.html"/>
        <files mask="all_63.js"/>
        <files mask="all_64.html"/>
        <files mask="all_64.js"/>
        <files mask="all_65.html"/>
        <files mask="all_65.js"/>
        <files mask="all_66.html"/>
        <files mask="all_66.js"/>
        <files mask="all_67.html"/>
        <files mask="all_67.js"/>
        <files mask="all_68.html"/>
        <files mask="all_68.js"/>
        <files mask="all_69.html"/>
        <files mask="all_69.js"/>
        <files mask="all_6b.html"/>
        <files mask="all_6b.js"/>
        <files mask="all_6c.html"/>
        <files mask="all_6c.js"/>
        <files mask="all_6d.html"/>
        <files mask="all_6d.js"/>
        <files mask="all_6e.html"/>
        <files mask="all_6e.js"/>
        <files mask="all_6f.html"/>
        <files mask="all_6f.js"/>
        <files mask="all_70.html"/>
        <files mask="all_70.js"/>
        <files mask="all_71.html"/>
        <files mask="all_71.js"/>
        <files mask="all_72.html"/>
        <files mask="all_72.js"/>
        <files mask="all_73.html"/>
        <files mask="all_73.js"/>
        <files mask="all_74.html"/>
        <files mask="all_74.js"/>
        <files mask="all_75.html"/>
        <files mask="all_75.js"/>
        <files mask="all_76.html"/>
        <files mask="all_76.js"/>
        <files mask="all_77.html"/>
        <files mask="all_77.js"/>
        <files mask="classes_5f.html"/>
        <files mask="classes_5f.js"/>
        <files mask="classes_61.html"/>
        <files mask="classes_61.js"/>
        <files mask="classes_62.html"/>
        <files mask="classes_62.js"/>
        <files mask="classes_63.html"/>
        <files mask="classes_63.js"/>
        <files mask="classes_65.html"/>
        <files mask="classes_65.js"/>
        <files mask="classes_66.html"/>
        <files mask="classes_66.js"/>
        <files mask="classes_67.html"/>
        <files mask="classes_67.js"/>
        <files mask="classes_68.html"/>
        <files mask="classes_68.js"/>
        <files mask="classes_69.html"/>
        <files mask="classes_69.js"/>
        <files mask="classes_6c.html"/>
        <files mask="classes_6c.js"/>
        <files mask="classes_70.html"/>
        <files mask="classes_70.js"/>
        <files mask="classes_73.html"/>
        <files mask="classes_73.js"/>
        <files mask="classes_76.html"/>
        <files mask="classes_76.js"/>
        <files mask="classes_77.html"/>
        <files mask="classes_77.js"/>
        <files mask="close.png"/>
        <files mask="enums_5f.html"/>
        <files mask="enums_5f.js"/>
        <files mask="enums_61.html"/>
        <files mask="enums_61.js"/>
        <files mask="enums_63.html"/>
        <files mask="enums_63.js"/>
        <files mask="enums_65.html"/>
        <files mask="enums_65.js"/>
        <files mask="enums_66.html"/>
        <files mask="enums_66.js"/>
        <files mask="enums_67.html"/>
        <files mask="enums_67.js"/>
        <files mask="enums_68.html"/>
        <files mask="enums_68.js"/>
        <files mask="enums_69.html"/>
        <files mask="enums_69.js"/>
        <files mask="enums_6c.html"/>
        <files mask="enums_6c.js"/>
        <files mask="enums_70.html"/>
        <files mask="enums_70.js"/>
        <files mask="enums_73.html"/>
        <files mask="enums_73.js"/>
        <files mask="enums_75.html"/>
        <files mask="enums_75.js"/>
        <files mask="enums_76.html"/>
        <files mask="enums_76.js"/>
        <files mask="enums_77.html"/>
        <files mask="enums_77.js"/>
        <files mask="enumvalues_6b.html"/>
        <files mask="enumvalues_6b.js"/>
        <files mask="enumvalues_6e.html"/>
        <files mask="enumvalues_6e.js"/>
        <files mask="functions_61.html"/>
        <files mask="functions_61.js"/>
        <files mask="functions_63.html"/>
        <files mask="functions_63.js"/>
        <files mask="functions_64.html"/>
        <files mask="functions_64.js"/>
        <files mask="functions_65.html"/>
        <files mask="functions_65.js"/>
        <files mask="functions_66.html"/>
        <files mask="functions_66.js"/>
        <files mask="functions_67.html"/>
        <files mask="functions_67.js"/>
        <files mask="functions_68.html"/>
        <files mask="functions_68.js"/>
        <files mask="functions_69.html"/>
        <files mask="functions_69.js"/>
        <files mask="functions_6c.html"/>
        <files mask="functions_6c.js"/>
        <files mask="functions_6f.html"/>
        <files mask="functions_6f.js"/>
        <files mask="functions_70.html"/>
        <files mask="functions_70.js"/>
        <files mask="functions_72.html"/>
        <files mask="functions_72.js"/>
        <files mask="functions_73.html"/>
        <files mask="functions_73.js"/>
        <files mask="functions_75.html"/>
        <files mask="functions_75.js"/>
        <files mask="functions_76.html"/>
        <files mask="functions_76.js"/>
        <files mask="functions_77.html"/>
        <files mask="functions_77.js"/>
        <files mask="groups_61.html"/>
        <files mask="groups_61.js"/>
        <files mask="groups_63.html"/>
        <files mask="groups_63.js"/>
        <files mask="groups_64.html"/>
        <files mask="groups_64.js"/>
        <files mask="groups_65.html"/>
        <files mask="groups_65.js"/>
        <files mask="groups_66.html"/>
        <files mask="groups_66.js"/>
        <files mask="groups_67.html"/>
        <files mask="groups_67.js"/>
        <files mask="groups_69.html"/>
        <files mask="groups_69.js"/>
        <files mask="groups_6c.html"/>
        <files mask="groups_6c.js"/>
        <files mask="groups_6d.html"/>
        <files mask="groups_6d.js"/>
        <files mask="groups_6f.html"/>
        <files mask="groups_6f.js"/>
        <files mask="groups_70.html"/>
        <files mask="groups_70.js"/>
        <files mask="groups_72.html"/>
        <files mask="groups_72.js"/>
        <files mask="groups_73.html"/>
        <files mask="groups_73.js"/>
        <files mask="groups_75.html"/>
        <files mask="groups_75.js"/>
        <files mask="groups_77.html"/>
        <files mask="groups_77.js"/>
        <files mask="mag_sel.png"/>
        <files mask="nomatches.html"/>
        <files mask="pages_61.html"/>
        <files mask="pages_61.js"/>
        <files mask="pages_64.html"/>
        <files mask="pages_64.js"/>
        <files mask="pages_69.html"/>
        <files mask="pages_69.js"/>
        <files mask="pages_74.html"/>
        <files mask="pages_74.js"/>
        <files mask="search.css"/>
        <files mask="search.js"/>
        <files mask="search_l.png"/>
        <files mask="search_m.png"/>
        <files mask="search_r.png"/>
        <files mask="typedefs_65.html"/>
        <files mask="typedefs_65.js"/>
        <files mask="typedefs_68.html"/>
        <files mask="typedefs_68.js"/>
        <files mask="typedefs_69.html"/>
        <files mask="typedefs_69.js"/>
        <files mask="typedefs_6c.html"/>
        <files mask="typedefs_6c.js"/>
        <files mask="typedefs_6f.html"/>
        <files mask="typedefs_6f.js"/>
        <files mask="typedefs_70.html"/>
        <files mask="typedefs_70.js"/>
        <files mask="typedefs_73.html"/>
        <files mask="typedefs_73.js"/>
        <files mask="typedefs_75.html"/>
        <files mask="typedefs_75.js"/>
        <files mask="typedefs_77.html"/>
        <files mask="typedefs_77.js"/>
        <files mask="variables_61.html"/>
        <files mask="variables_61.js"/>
        <files mask="variables_62.html"/>
        <files mask="variables_62.js"/>
        <files mask="variables_63.html"/>
        <files mask="variables_63.js"/>
        <files mask="variables_64.html"/>
        <files mask="variables_64.js"/>
        <files mask="variables_65.html"/>
        <files mask="variables_65.js"/>
        <files mask="variables_66.html"/>
        <files mask="variables_66.js"/>
        <files mask="variables_67.html"/>
        <files mask="variables_67.js"/>
        <files mask="variables_68.html"/>
        <files mask="variables_68.js"/>
        <files mask="variables_69.html"/>
        <files mask="variables_69.js"/>
        <files mask="variables_6b.html"/>
        <files mask="variables_6b.js"/>
        <files mask="variables_6c.html"/>
        <files mask="variables_6c.js"/>
        <files mask="variables_6d.html"/>
        <files mask="variables_6d.js"/>
        <files mask="variables_6e.html"/>
        <files mask="variables_6e.js"/>
        <files mask="variables_6f.html"/>
        <files mask="variables_6f.js"/>
        <files mask="variables_70.html"/>
        <files mask="variables_70.js"/>
        <files mask="variables_72.html"/>
        <files mask="variables_72.js"/>
        <files mask="variables_73.html"/>
        <files mask="variables_73.js"/>
        <files mask="variables_74.html"/>
        <files mask="variables_74.js"/>
        <files mask="variables_75.html"/>
        <files mask="variables_75.js"/>
        <files mask="variables_76.html"/>
        <files mask="variables_76.js"/>
        <files mask="variables_77.html"/>
        <files mask="variables_77.js"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MCXA153" name="clock" brief="Clock Driver" version="2.0.0" full_name="Clock Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.mcx_spc.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_clock.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma4.MCXA153" name="edma" brief="EDMA Driver" version="2.10.0" full_name="EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/edma4" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma_soc.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
        <files mask="fsl_edma_core.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_edma4.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma_soc.MCXA153" name="edma_soc" brief="EDMA SOC Driver" version="1.0.0" full_name="EDMA SOC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma_soc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma_soc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_edma_soc.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_edma.MCXA153" name="i2c_edma" brief="LPI2C Driver" version="2.4.2" full_name="LPI2C Edma Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MCXA153"/>
          <component_dependency value="platform.drivers.lpi2c.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpi2c_edma.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_edma.MCXA153" name="lpspi_edma" brief="LPSPI Driver" version="2.4.4" full_name="LPSPI Edma Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MCXA153"/>
          <component_dependency value="platform.drivers.lpspi.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpspi_edma.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_edma.MCXA153" name="lpuart_edma" brief="LPUART Driver" version="2.6.0" full_name="LPUART Edma Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MCXA153"/>
          <component_dependency value="platform.drivers.lpuart.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpuart_edma.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_cmsis.MCXA153" name="lpspi_cmsis" brief="LPSPI CMSIS Driver" version="2.9.0" full_name="LPSPI CMSIS Driver" category="CMSIS Driver/SPI" user_visible="true" type="CMSIS_driver" package_base_path="core/cmsis_drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi_edma.MCXA153"/>
          <component_dependency value="platform.drivers.lpspi.MCXA153"/>
          <component_dependency value="CMSIS_Driver_Include.SPI.MCXA153"/>
          <component_dependency value="RTE_Device.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_lpspi.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_cmsis.MCXA153" name="lpi2c_cmsis" brief="LPI2C CMSIS Driver" version="2.5.0" full_name="LPI2C CMSIS Driver" category="CMSIS Driver/I2C" user_visible="true" type="CMSIS_driver" package_base_path="core/cmsis_drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c_edma.MCXA153"/>
          <component_dependency value="platform.drivers.lpi2c.MCXA153"/>
          <component_dependency value="CMSIS_Driver_Include.I2C.MCXA153"/>
          <component_dependency value="RTE_Device.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_lpi2c.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_cmsis.MCXA153" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.6.0" full_name="LPUART CMSIS Driver" category="CMSIS Driver/USART" user_visible="true" type="CMSIS_driver" package_base_path="core/cmsis_drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart_edma.MCXA153"/>
          <component_dependency value="platform.drivers.lpuart.MCXA153"/>
          <component_dependency value="CMSIS_Driver_Include.USART.MCXA153"/>
          <component_dependency value="RTE_Device.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_lpuart.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trdc1.MCXA153" name="trdc" brief="TRDC Driver" version="2.2.1" full_name="TRDC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/trdc_1" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.trdc_soc.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trdc.h"/>
        <files mask="fsl_trdc_core.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_trdc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_trdc_1.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.MCXA153" name="common" brief="COMMON Driver" version="2.4.2" full_name="COMMON Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.reset.MCXA153"/>
          <component_dependency value="platform.drivers.clock.MCXA153"/>
          <component_dependency value="device.MCXA153_CMSIS.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source relative_path="./" type="src" device_cores="cm33_core0_MCXA153">
        <files mask="fsl_common_arm.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_core0_MCXA153">
        <files mask="fsl_common_arm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_common.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux_connections.MCXA153" name="inputmux_connections" brief="Inputmux_connections Driver" version="2.0.1" full_name="Inputmux_connections Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_inputmux_connections.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console.MCXA153" name="debug_console" brief="Utility debug_console" version="1.0.1" full_name="Utility debug_console" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="utility.str.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_debug_console.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.str.MCXA153" name="utility_str" brief="Utility str" version="1.0.0" full_name="Utility str" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_str.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MCXA153" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="utility.str.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="debug_console_lite" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console_lite" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_debug_console_lite.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="debug_console_lite" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.assert.MCXA153" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_assert.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_assert.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.assert_lite.MCXA153" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console_lite.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_assert.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_assert_lite.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_NN_Source.MCXA153" name="CMSIS_NN_Library_Source" brief="CMSIS-NN Library" version="5.0.0" full_name="CMSIS NN Library Source" category="CMSIS/NN" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/NN" project_base_path="CMSIS/NN">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_DSP_Source.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_nnfunctions.h"/>
        <files mask="arm_nnsupportfunctions.h"/>
        <files mask="arm_nn_math_types.h"/>
        <files mask="arm_nn_tables.h"/>
        <files mask="arm_nn_types.h"/>
      </source>
      <source relative_path="Include/Internal" type="c_include">
        <files mask="arm_nn_compiler.h"/>
      </source>
      <source relative_path="Source/ActivationFunctions" type="src">
        <files mask="arm_nn_activation_s16.c"/>
        <files mask="arm_relu6_s8.c"/>
        <files mask="arm_relu_q15.c"/>
        <files mask="arm_relu_q7.c"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_elementwise_add_s16.c"/>
        <files mask="arm_elementwise_add_s8.c"/>
        <files mask="arm_elementwise_mul_s16.c"/>
        <files mask="arm_elementwise_mul_s16_s8.c"/>
        <files mask="arm_elementwise_mul_s8.c"/>
      </source>
      <source relative_path="Source/ConcatenationFunctions" type="src">
        <files mask="arm_concatenation_s8_w.c"/>
        <files mask="arm_concatenation_s8_x.c"/>
        <files mask="arm_concatenation_s8_y.c"/>
        <files mask="arm_concatenation_s8_z.c"/>
      </source>
      <source relative_path="Source/ConvolutionFunctions" type="src">
        <files mask="arm_convolve_1x1_s4.c"/>
        <files mask="arm_convolve_1x1_s4_fast.c"/>
        <files mask="arm_convolve_1x1_s8.c"/>
        <files mask="arm_convolve_1x1_s8_fast.c"/>
        <files mask="arm_convolve_1_x_n_s8.c"/>
        <files mask="arm_convolve_fast_s16.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s16.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s4.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s8.c"/>
        <files mask="arm_convolve_s16.c"/>
        <files mask="arm_convolve_s4.c"/>
        <files mask="arm_convolve_s8.c"/>
        <files mask="arm_convolve_wrapper_s16.c"/>
        <files mask="arm_convolve_wrapper_s4.c"/>
        <files mask="arm_convolve_wrapper_s8.c"/>
        <files mask="arm_depthwise_conv_3x3_s8.c"/>
        <files mask="arm_depthwise_conv_fast_s16.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s16.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s4.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s8.c"/>
        <files mask="arm_depthwise_conv_s16.c"/>
        <files mask="arm_depthwise_conv_s4.c"/>
        <files mask="arm_depthwise_conv_s4_opt.c"/>
        <files mask="arm_depthwise_conv_s8.c"/>
        <files mask="arm_depthwise_conv_s8_opt.c"/>
        <files mask="arm_depthwise_conv_wrapper_s16.c"/>
        <files mask="arm_depthwise_conv_wrapper_s4.c"/>
        <files mask="arm_depthwise_conv_wrapper_s8.c"/>
        <files mask="arm_nn_depthwise_conv_s8_core.c"/>
        <files mask="arm_nn_mat_mult_kernel_s4_s16.c"/>
        <files mask="arm_nn_mat_mult_kernel_s8_s16.c"/>
        <files mask="arm_nn_mat_mult_s8.c"/>
        <files mask="arm_transpose_conv_get_buffer_sizes_s8.c"/>
        <files mask="arm_transpose_conv_s8.c"/>
      </source>
      <source relative_path="Source/FullyConnectedFunctions" type="src">
        <files mask="arm_fully_connected_get_buffer_sizes_s16.c"/>
        <files mask="arm_fully_connected_get_buffer_sizes_s8.c"/>
        <files mask="arm_fully_connected_s16.c"/>
        <files mask="arm_fully_connected_s4.c"/>
        <files mask="arm_fully_connected_s8.c"/>
        <files mask="arm_vector_sum_s8.c"/>
      </source>
      <source relative_path="Source/LSTMFunctions" type="src">
        <files mask="arm_lstm_unidirectional_s8_s16.c"/>
      </source>
      <source relative_path="Source/NNSupportFunctions" type="src">
        <files mask="arm_nntables.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_padded_s8.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s16.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s8.c"/>
        <files mask="arm_nn_lstm_calculate_gate_s8_s16.c"/>
        <files mask="arm_nn_lstm_step_s8_s16.c"/>
        <files mask="arm_nn_lstm_update_cell_state_s16.c"/>
        <files mask="arm_nn_lstm_update_output_s8_s16.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s4.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s8.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s8_s32.c"/>
        <files mask="arm_nn_mat_mul_core_1x_s8.c"/>
        <files mask="arm_nn_mat_mul_core_4x_s8.c"/>
        <files mask="arm_nn_mat_mul_kernel_s16.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s16.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s4.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s8.c"/>
        <files mask="arm_nn_vec_mat_mult_t_svdf_s8.c"/>
        <files mask="arm_nn_vec_mat_mul_result_acc_s8.c"/>
        <files mask="arm_q7_to_q15_with_offset.c"/>
        <files mask="arm_s8_to_s16_unordered_with_offset.c"/>
      </source>
      <source relative_path="Source/PoolingFunctions" type="src">
        <files mask="arm_avgpool_get_buffer_sizes_s16.c"/>
        <files mask="arm_avgpool_get_buffer_sizes_s8.c"/>
        <files mask="arm_avgpool_s16.c"/>
        <files mask="arm_avgpool_s8.c"/>
        <files mask="arm_max_pool_s16.c"/>
        <files mask="arm_max_pool_s8.c"/>
      </source>
      <source relative_path="Source/ReshapeFunctions" type="src">
        <files mask="arm_reshape_s8.c"/>
      </source>
      <source relative_path="Source/SoftmaxFunctions" type="src">
        <files mask="arm_nn_softmax_common_s8.c"/>
        <files mask="arm_softmax_s16.c"/>
        <files mask="arm_softmax_s8.c"/>
        <files mask="arm_softmax_s8_s16.c"/>
        <files mask="arm_softmax_u8.c"/>
      </source>
      <source relative_path="Source/SVDFunctions" type="src">
        <files mask="arm_svdf_get_buffer_sizes_s8.c"/>
        <files mask="arm_svdf_s8.c"/>
        <files mask="arm_svdf_state_s16_s8.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_NN_Source.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_Secure.MCXA153" name="CMSIS_RTOS2_Keil_RTX5" brief="CMSIS-RTOS2 RTX5 for Cortex-M, SC000, C300 and Armv8-M (Library)" version="2.1.3" full_name="CMSIS RTOS2 Keil RTX5" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Device_API_OSTick.MCXA153"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
        <files mask="rtx_def.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_RTOS2_Secure.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Source" type="c_include"/>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_NonSecure.MCXA153" name="CMSIS_RTOS2_Keil_RTX5_NS" brief="CMSIS-RTOS2 RTX5 for Armv8-M Non-Secure Domain (Library)" version="2.1.3" full_name="CMSIS RTOS2 Keil RTX5 Non Secure" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Device_API_OSTick.MCXA153"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
        <files mask="rtx_def.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_RTOS2_NonSecure.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Source" type="c_include"/>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MCXA153_system.MCXA153" name="MCXA153_system" brief="Device MCXA153_system" version="1.0.0" full_name="Device MCXA153_system" category="Device/CMSIS" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MCXA153" project_base_path="device">
      <dependencies>
        <all>
          <component_dependency value="device.MCXA153_CMSIS.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_MCXA153.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_MCXA153.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MCXA153_system.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.rtt.MCXA153" name="segger_rtt" brief="SEGGER Real Time Transfer(RTT)" version="7.22.0" full_name="SEGGER RTT" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="core/components/rtt" project_base_path="rtt">
      <dependencies>
        <all>
          <component_dependency value="driver.rtt.template.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="RTT" type="src">
        <files mask="SEGGER_RTT.c"/>
        <files mask="SEGGER_RTT_printf.c"/>
      </source>
      <source relative_path="RTT" type="c_include">
        <files mask="SEGGER_RTT.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="Syscalls" type="src">
        <files mask="SEGGER_RTT_Syscalls_GCC.c"/>
      </source>
      <source exclude="true" relative_path="Syscalls" type="src">
        <files mask="SEGGER_RTT_Syscalls_SES.c" hidden="true"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="License.txt" hidden="true"/>
        <files mask="README.txt" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_rtt.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTT" type="c_include"/>
        <include_path relative_path="RTT" type="asm_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.mcxa.MCXA153" name="mflash mcxa" brief="mflash mcxa" version="1.0.0" full_name="mflash mcxa" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/flash/mflash/mcxa" project_base_path="flash/mflash/mcxa">
      <dependencies>
        <all>
          <component_dependency value="component.mflash.common.MCXA153"/>
          <component_dependency value="platform.drivers.romapi.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="mflash_drv.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="mflash_drv.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mflash_mcxa.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mcuboot.bootutil.MCXA153" name="mcuboot_bootutil" brief="mcuboot" version="2.0.0" full_name="MCUboot bootloader" category="File System/MCUboot bootloader" user_visible="false" type="middleware" package_base_path="middleware/mcuboot_opensource/boot/bootutil" project_base_path="bootutil">
      <dependencies>
        <all>
          <component_dependency value="middleware.mcuboot.tinycrypt.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="include/bootutil" type="c_include">
        <files mask="bench.h"/>
        <files mask="boot_hooks.h"/>
        <files mask="boot_public_hooks.h"/>
        <files mask="boot_record.h"/>
        <files mask="boot_status.h"/>
        <files mask="bootutil.h"/>
        <files mask="bootutil_log.h"/>
        <files mask="bootutil_public.h"/>
        <files mask="bootutil_test.h"/>
        <files mask="caps.h"/>
        <files mask="enc_key.h"/>
        <files mask="enc_key_public.h"/>
        <files mask="fault_injection_hardening.h"/>
        <files mask="fault_injection_hardening_delay_rng.h"/>
        <files mask="ignore.h"/>
        <files mask="image.h"/>
        <files mask="mcuboot_status.h"/>
        <files mask="ramload.h"/>
        <files mask="security_cnt.h"/>
        <files mask="sign_key.h"/>
      </source>
      <source relative_path="include/bootutil/crypto" type="c_include">
        <files mask="aes_ctr.h"/>
        <files mask="aes_kw.h"/>
        <files mask="common.h"/>
        <files mask="ecdh_p256.h"/>
        <files mask="ecdh_x25519.h"/>
        <files mask="ecdsa.h"/>
        <files mask="hmac_sha256.h"/>
        <files mask="rsa.h"/>
        <files mask="sha.h"/>
      </source>
      <source relative_path="src" type="src">
        <files mask="boot_record.c"/>
        <files mask="bootutil_misc.c"/>
        <files mask="bootutil_public.c"/>
        <files mask="caps.c"/>
        <files mask="encrypted.c"/>
        <files mask="fault_injection_hardening.c"/>
        <files mask="fault_injection_hardening_delay_rng_mbedtls.c"/>
        <files mask="image_ecdsa.c"/>
        <files mask="image_ed25519.c"/>
        <files mask="image_rsa.c"/>
        <files mask="image_validate.c"/>
        <files mask="loader.c"/>
        <files mask="swap_misc.c"/>
        <files mask="swap_move.c"/>
        <files mask="swap_scratch.c"/>
        <files mask="tlv.c"/>
      </source>
      <source relative_path="src" type="c_include">
        <files mask="bootutil_misc.h"/>
        <files mask="bootutil_priv.h"/>
        <files mask="swap_priv.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_mcuboot_bootutil.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="src" type="c_include"/>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.host.common_header.MCXA153" name="USB Host Common Header" brief="Middleware usb host common_header" version="2.10.1" full_name="USB Host Common Header" category="USB/USB Host" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MCXA153"/>
          <component_dependency value="middleware.usb.common_header.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="host" type="c_include">
        <files mask="usb_host.h"/>
        <files mask="usb_host_hci.h"/>
        <files mask="usb_host_devices.h"/>
        <files mask="usb_host_framework.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_host_common_header.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.khci_config_header.MCXA153" name="USB device khci config header" brief="USB device khci config header" version="2.10.1" full_name="USB device khci config header" category="USB/USB Device" user_visible="true" type="project_template" package_base_path="middleware/usb" project_base_path="source">
      <dependencies>
        <device_dependency value="MCXA153"/>
      </dependencies>
      <source relative_path="output/npw/device_config/khci" project_relative_path="generated" config="true" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_khci_config_header.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/npw/device_config/khci" project_relative_path="generated" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.common_header.MCXA153" name="USB Common Header" brief="Middleware usb common_header" version="2.10.1" full_name="USB Common Header" category="USB/USB Common Header" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_common_header.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.common_header.MCXA153" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.10.1" full_name="USB Device Common Header" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MCXA153"/>
          <component_dependency value="middleware.usb.common_header.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_common_header.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/include" type="c_include"/>
        <include_path relative_path="device" project_relative_path="device/source" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device_controller_khci.MCXA153" name="USB Device KHCI Controller Driver(FS)" brief="Middleware usb device khci" version="2.10.1" full_name="USB Device KHCI Controller Driver(FS)" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.khci_config_header.MCXA153"/>
          <component_dependency value="middleware.usb.device.common_header.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/source/khci" type="src">
        <files mask="usb_device_khci.c"/>
      </source>
      <source relative_path="device" project_relative_path="device/source/khci" type="c_include">
        <files mask="usb_device_khci.h"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="usb.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_khci.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/source/khci" type="c_include"/>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.stack.external.MCXA153" name="USB Device Stack" brief="Middleware usb device stack external" version="2.10.1" full_name="USB Device Stack" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MCXA153"/>
          <component_dependency value="middleware.usb.device.controller.driver.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class" type="src">
        <files mask="usb_device_class.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class" type="c_include">
        <files mask="usb_device_class.h"/>
      </source>
      <source relative_path="output/source/device" project_relative_path="device/source" type="src">
        <files mask="usb_device_ch9.c"/>
      </source>
      <source relative_path="output/source/device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_ch9.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_stack_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class" type="c_include"/>
        <include_path relative_path="output/source/device" project_relative_path="device/source" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
        <include_path relative_path="output/source/device" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.audio.external.MCXA153" name="USB Device Audio" brief="Middleware usb device audio external" version="2.10.1" full_name="USB Device Audio" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/audio" type="src">
        <files mask="usb_device_audio.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/audio" type="c_include">
        <files mask="usb_device_audio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_audio_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/audio" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.cdc.external.MCXA153" name="USB Device CDC" brief="Middleware usb device cdc external" version="2.10.1" full_name="USB Device CDC" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/cdc" type="src">
        <files mask="usb_device_cdc_acm.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/cdc" type="c_include">
        <files mask="usb_device_cdc_acm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_cdc_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/cdc" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.cdc.rndis.external.MCXA153" name="USB Device CDC RNDIS" brief="Middleware usb device cdc rndis external" version="2.10.1" full_name="USB Device CDC RNDIS" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <component_dependency value="middleware.usb.device.cdc.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/cdc_rndis" type="src">
        <files mask="usb_device_cdc_rndis.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/cdc_rndis" type="c_include">
        <files mask="usb_device_cdc_rndis.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_cdc_rndis_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/cdc_rndis" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.hid.external.MCXA153" name="USB Device HID" brief="Middleware usb device hid external" version="2.10.1" full_name="USB Device HID" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/hid" type="src">
        <files mask="usb_device_hid.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/hid" type="c_include">
        <files mask="usb_device_hid.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_hid_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/hid" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.dfu.external.MCXA153" name="USB Device DFU" brief="Middleware usb device dfu external" version="2.10.1" full_name="USB Device DFU" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/dfu" type="src">
        <files mask="usb_device_dfu.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/dfu" type="c_include">
        <files mask="usb_device_dfu.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_dfu_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/dfu" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.msd.external.MCXA153" name="USB Device MSD" brief="Middleware usb device msd external" version="2.10.1" full_name="USB Device MSD" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/msc" type="src">
        <files mask="usb_device_msc.c"/>
        <files mask="usb_device_msc_ufi.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/msc" type="c_include">
        <files mask="usb_device_msc.h"/>
        <files mask="usb_device_msc_ufi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_msd_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/msc" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.phdc.external.MCXA153" name="USB Device PHDC" brief="Middleware usb device phdc external" version="2.10.1" full_name="USB Device PHDC" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/phdc" type="src">
        <files mask="usb_device_phdc.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/phdc" type="c_include">
        <files mask="usb_device_phdc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_phdc_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/phdc" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.video.external.MCXA153" name="USB Device Video" brief="Middleware usb device video external" version="2.10.1" full_name="USB Device Video" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/video" type="src">
        <files mask="usb_device_video.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/video" type="c_include">
        <files mask="usb_device_video.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_video_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/video" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.ccid.external.MCXA153" name="USB Device CCID" brief="Middleware usb device ccid external" version="2.10.1" full_name="USB Device CCID" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/ccid" type="src">
        <files mask="usb_device_ccid.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/ccid" type="c_include">
        <files mask="usb_device_ccid.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_ccid_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/ccid" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.printer.external.MCXA153" name="USB Device Printer" brief="Middleware usb device printer external" version="2.10.1" full_name="USB Device Printer" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="middleware.usb.device.stack.external.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="output/source/device/class" project_relative_path="device/class/printer" type="src">
        <files mask="usb_device_printer.c"/>
      </source>
      <source relative_path="output/source/device/class" project_relative_path="device/class/printer" type="c_include">
        <files mask="usb_device_printer.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_printer_external.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="output/source/device/class" project_relative_path="device/class/printer" type="c_include"/>
        <include_path relative_path="output/source/device/class" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.controller.driver.MCXA153" name="USB Device Common Controller" brief="Middleware usb device controller driver" version="2.10.1" full_name="USB Device Common Controller" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MCXA153"/>
          <component_dependency value="middleware.usb.device_controller_khci.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="src">
        <files mask="usb_device_dci.c"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="ChangeLogKSDK.txt" hidden="true"/>
      </source>
      <source exclude="true" relative_path="device" type="c_include">
        <files mask="usb_device_mcux_drv_port.h" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_usb_device_controller_driver.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/include" type="c_include"/>
        <include_path relative_path="device" project_relative_path="device/source" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.MCXA153" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="11.0.1" full_name="FreeRTOS kernel" category="RTOS/Core" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <defines>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.template.MCXA153"/>
          <component_dependency value="middleware.freertos-kernel.extension.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="croutine.c"/>
        <files mask="event_groups.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="atomic.h"/>
        <files mask="croutine.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_syscall_numbers.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="newlib-freertos.h"/>
        <files mask="picolibc-freertos.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="StackMacros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="include" type="asm_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.cm33_non_trustzone.MCXA153" name="cm33 nontrustzone port" brief="FreeRTOS cm33 non trustzone port" version="11.0.1" full_name="FreeRTOS cm33 non trustzone port" category="RTOS/cm33_non_trustzone_port" user_visible="true" type="middleware" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <any_of>
            <not>
              <component_dependency value="middleware.freertos-kernel.template.MCXA153"/>
            </not>
            <component_dependency value="middleware.freertos-kernel.template.MCXA153"/>
          </any_of>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
          <device_core_dependency value="cm33_core0_MCXA153"/>
        </all>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" type="src" device_cores="cm33_core0_MCXA153">
        <files mask="mpu_wrappers_v2_asm.c"/>
        <files mask="port.c"/>
        <files mask="portasm.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" type="c_include" device_cores="cm33_core0_MCXA153">
        <files mask="portasm.h"/>
        <files mask="portmacro.h"/>
        <files mask="portmacrocommon.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_cm33_non_trustzone.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" toolchain="armgcc mcuxpresso" type="c_include" device_cores="cm33_core0_MCXA153"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.MCXA153" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="11.0.1" full_name="FreeRTOS heap 1" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_2.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_3.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_4.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_5.MCXA153"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_1.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.MCXA153" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="11.0.1" full_name="FreeRTOS heap 2" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_1.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_3.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_4.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_5.MCXA153"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_2.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.MCXA153" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="11.0.1" full_name="FreeRTOS heap_3" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_1.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_2.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_4.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_5.MCXA153"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_3.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.MCXA153" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="11.0.1" full_name="FreeRTOS heap 4" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_1.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_2.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_3.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_5.MCXA153"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_4.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.MCXA153" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="11.0.1" full_name="FreeRTOS heap 5" category="RTOS/Heap" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_1.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_2.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_3.MCXA153"/>
          </not>
          <not>
            <component_dependency value="middleware.freertos-kernel.heap_4.MCXA153"/>
          </not>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_heap_5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers_v2.MCXA153" name="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" brief="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" version="11.0.1" full_name="new V2 FreeRTOS MPU wrappers introduced in V10.6.0" category="RTOS/MPU wrappers V2" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers_v2.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_mpu_wrappers_v2.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.MCXA153" name="old FreeRTOS MPU wrappers used before V10.6.0" brief="old FreeRTOS MPU wrappers used before V10.6.0" version="11.0.1" full_name="old FreeRTOS MPU wrappers used before V10.6.0" category="RTOS/MPU wrappers" user_visible="false" type="other" package_base_path="rtos/freertos/freertos-kernel" project_base_path="freertos/freertos-kernel">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_freertos-kernel_mpu_wrappers.cmake" hidden="true"/>
      </source>
    </component>
    <component id="docs.FreeRTOS.MCXA153" name="FreeRTOS documentation" brief="FreeRTOS documentation" version="1.0.0" full_name="FreeRTOS documentation" category="docs/FreeRTOS" user_visible="true" type="documentation" package_base_path="core/docs/FreeRTOS" project_base_path="FreeRTOS">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpressoSDK and FreeRTOS OS.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.trdc_soc.MCXA153" name="trdc_soc" brief="TRDC SOC Driver" version="2.0.0" full_name="TRDC SOC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trdc_soc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_trdc_soc.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.romapi.MCXA153" name="ROMAPI" brief="ROMAPI Driver" version="2.0.0" full_name="ROMAPI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_romapi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_romapi.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.reset.MCXA153" name="reset" brief="Reset Driver" version="2.0.0" full_name="Reset Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_reset.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cdog.MCXA153" name="cdog" brief="cdog Driver" version="2.1.3" full_name="cdog Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/cdog" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cdog.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cdog.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cdog.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.glikey.MCXA153" name="glikey" brief="GLIKEY Driver" version="2.0.0" full_name="GLIKEY Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/glikey" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_glikey.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_glikey.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_glikey.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.waketimer.MCXA153" name="waketimer" brief="WAKETIMER Driver" version="2.0.1" full_name="WAKETIMER Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/waketimer" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_waketimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_waketimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_waketimer.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mcx_vbat.MCXA153" name="mcx_vbat" brief="MCX VBAT Driver" version="2.3.1" full_name="MCX VBAT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/mcx_vbat" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_vbat.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_vbat.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_mcx_vbat.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mcx_spc.MCXA153" name="mcx_spc" brief="MCX SPC Driver" version="2.4.2" full_name="MCX SPC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/mcx_spc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_mcx_spc.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mcx_cmc.MCXA153" name="mcx_cmc" brief="MCX_CMC Driver" version="2.2.2" full_name="mcx_cmc Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/mcx_cmc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cmc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cmc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_mcx_cmc.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.crc.MCXA153" name="crc" brief="CRC Driver" version="2.0.4" full_name="CRC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/crc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_crc.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpcmp.MCXA153" name="lpcmp" brief="LPCMP Driver" version="2.1.3" full_name="LPCMP Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpcmp" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpcmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpcmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpcmp.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpadc.MCXA153" name="lpadc" brief="LPADC Driver" version="2.8.4" full_name="LPADC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpadc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpadc.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i3c_edma.MCXA153" name="i3c_edma" brief="I3C EDMA Driver" version="2.2.9" full_name="I3C EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/i3c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i3c.MCXA153"/>
          <component_dependency value="platform.drivers.edma4.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i3c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i3c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_i3c_edma.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i3c.MCXA153" name="i3c" brief="I3C Driver" version="2.12.0" full_name="I3C Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/i3c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i3c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_i3c.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi.MCXA153" name="lpspi" brief="LPSPI Driver" version="2.6.8" full_name="LPSPI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpspi.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_freertos.MCXA153" name="lpspi_freertos" brief="LPSPI FreeRTOS Driver" version="2.3.1" full_name="LPSPI FreeRTOS Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi.MCXA153"/>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpspi_freertos.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart.MCXA153" name="lpuart" brief="LPUART Driver" version="2.8.2" full_name="LPUART Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpuart.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_freertos.MCXA153" name="lpuart_freertos" brief="LPUART Freertos Driver" version="2.5.0" full_name="LPUART Freertos Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MCXA153"/>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpuart_freertos.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c.MCXA153" name="i2c" brief="LPI2C Driver" version="2.5.4" full_name="LPI2C Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpi2c.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_freertos.MCXA153" name="i2c_freertos" brief="LPI2C FreeRTOS Driver" version="2.3.2" full_name="LPI2C FreeRTOS Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MCXA153/drivers" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c.MCXA153"/>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpi2c_freertos.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lptmr.MCXA153" name="lptmr" brief="LPTMR Driver" version="2.2.0" full_name="LPTMR Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lptmr" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lptmr.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_freqme.MCXA153" name="lpc_freqme" brief="lpc_freqme Driver" version="2.1.2" full_name="lpc_freqme Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_freqme" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_freqme.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_freqme.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_freqme.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.eqdc.MCXA153" name="eqdc" brief="EQDC Driver" version="2.3.0" full_name="EQDC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/eqdc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_eqdc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_eqdc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_eqdc.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pwm.MCXA153" name="pwm" brief="PWM Driver" version="2.8.4" full_name="PWM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/pwm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_pwm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pwm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pwm.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ostimer.MCXA153" name="ostimer" brief="OSTimer Driver" version="2.2.2" full_name="OSTimer Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/ostimer" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ostimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ostimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ostimer.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.utick.MCXA153" name="utick" brief="UTICK Driver" version="2.0.5" full_name="UTICK Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/utick" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_utick.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_utick.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_utick.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wwdt.MCXA153" name="wwdt" brief="WWDT Driver" version="2.1.9" full_name="WWDT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/wwdt" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wwdt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wwdt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wwdt.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ctimer.MCXA153" name="ctimer" brief="CTimer Driver" version="2.3.1" full_name="CTimer Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/ctimer" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ctimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ctimer.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.aoi.MCXA153" name="aoi" brief="AOI Driver" version="2.0.2" full_name="AOI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/aoi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_aoi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_aoi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_aoi.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.erm.MCXA153" name="erm" brief="ERM Driver" version="2.0.1" full_name="ERM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/erm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_erm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_erm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_erm.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.eim.MCXA153" name="eim" brief="EIM Driver" version="2.0.1" full_name="EIM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/eim" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_eim.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_eim.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_eim.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wuu.MCXA153" name="wuu" brief="WUU Driver" version="2.4.0" full_name="WUU Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/wuu" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_wuu.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wuu.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wuu.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux.MCXA153" name="inputmux" brief="INPUTMUX Driver" version="2.0.7" full_name="INPUTMUX Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/inputmux" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.inputmux_connections.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_inputmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_inputmux.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.MCXA153" name="gpio" brief="GPIO Driver" version="2.7.3" full_name="GPIO Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_gpio.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.port.MCXA153" name="port" brief="PORT Driver" version="2.5.0" full_name="PORT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/port" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_port.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MCXA153" name="serial_manager" brief="Component serial_manager" version="1.0.1" full_name="Serial Manager" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MCXA153"/>
            <component_dependency value="component.serial_manager_usb_cdc.MCXA153"/>
            <component_dependency value="component.serial_manager_virtual.MCXA153"/>
            <component_dependency value="component.serial_manager_swo.MCXA153"/>
            <component_dependency value="component.serial_manager_spi.MCXA153"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_spi.MCXA153" name="serial_manager_spi" brief="Component serial_manager_spi" version="1.0.0" full_name="Serial Manager spi" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SPI" value="1"/>
        <define name="SERIAL_PORT_TYPE_SPI_MASTER" value="1"/>
        <define name="SERIAL_PORT_TYPE_SPI_SLAVE" value="1"/>
        <define name="SERIAL_MANAGER_NON_BLOCKING_MODE" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MCXA153"/>
          <component_dependency value="platform.drivers.lpspi.MCXA153"/>
          <component_dependency value="component.lpspi_adapter.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_spi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_spi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_spi.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_usb_cdc.MCXA153" name="serial_manager_usb_cdc" brief="Component serial_manager_usb_cdc" version="1.0.0" full_name="Serial Manager USB CDC" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_USBCDC" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
        <define name="USB_DEVICE_CONFIG_CDC_ACM" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MCXA153"/>
          <component_dependency value="middleware.usb.device.cdc.external.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_usb.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_usb.c"/>
      </source>
      <source relative_path="usb_cdc_adapter" type="c_include">
        <files mask="usb_device_descriptor.h"/>
      </source>
      <source relative_path="usb_cdc_adapter" type="src">
        <files mask="usb_device_descriptor.c"/>
      </source>
      <source relative_path="usb_cdc_adapter/inf" type="configuration">
        <files mask="fsl_ucwxp.inf" hidden="true"/>
      </source>
      <source relative_path="usb_cdc_adapter/inf" type="other">
        <files mask="cdc.cat" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_usb_cdc.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="usb_cdc_adapter" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MCXA153" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_virtual.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.MCXA153" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.serial_manager.MCXA153"/>
          <device_dependency value="MCXA153"/>
          <device_core_dependency value="cm33_core0_MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_swo.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MCXA153" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lists.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpspi_adapter.MCXA153" name="lpspi_adapter" brief="Component lpspi_adapter" version="1.0.0" full_name="Component lpspi_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/spi" project_base_path="component/spi">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.lpspi.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_spi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpspi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpspi_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.MCXA153" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" category="Device/SDK Drivers" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.lpuart.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpuart_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_dma_adapter.MCXA153" name="lpuart_dma_adapter" brief="Component lpuart_dma_adapter" version="1.0.0" full_name="lpuart_dma_adapter" category="Device/SDK Drivers" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <defines>
        <define name="HAL_UART_DMA_ENABLE" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MCXA153"/>
          <component_dependency value="component.timer_manager.MCXA153"/>
          <component_dependency value="platform.drivers.lpuart_edma.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpuart_dma_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.messaging.MCXA153" name="messaging" brief="Component messaging" version="1.0.0" full_name="Component messaging" category="Device/SDK Drivers" user_visible="true" type="other" package_base_path="core/components/messaging" project_base_path="component/messaging">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.mem_manager_light.MCXA153"/>
            <component_dependency value="component.mem_manager_freertos.MCXA153"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_messaging.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_messaging.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_messaging.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.MCXA153" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mem_manager.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.MCXA153" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mem_manager_light.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_freertos.MCXA153" name="mem_manager_freertos" brief="Component mem_manager_freertos" version="1.0.0" full_name="Component mem_manager_freertos" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mem_manager_freertos.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.MCXA153" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_panic.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.reset_adapter.MCXA153" name="reset_adapter" brief="Component reset_adapter" version="1.0.0" full_name="Component reset_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/reset" project_base_path="component/reset">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_reset_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.MCXA153" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.ctimer_adapter.MCXA153"/>
            <component_dependency value="component.lptmr_adapter.MCXA153"/>
            <component_dependency value="component.ostimer_adapter.MCXA153"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_timer_manager.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.MCXA153" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.1" full_name="Component gpio_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MCXA153"/>
          <component_dependency value="platform.drivers.port.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_gpio_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.MCXA153" name="led" brief="Component led" version="1.0.0" full_name="Component led" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.timer_manager.MCXA153"/>
          <component_dependency value="component.gpio_adapter.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_led.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.button.MCXA153" name="button" brief="Component button" version="1.0.0" full_name="Component button" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.timer_manager.MCXA153"/>
          <component_dependency value="component.gpio_adapter.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_button.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.MCXA153" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <component_dependency value="component.osa_interface.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_bm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.MCXA153" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <component_dependency value="component.osa_interface.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_free_rtos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.MCXA153" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" category="NXP Component/OS Abstraction Layer" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MCXA153" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MCXA153" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MCXA153" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.MCXA153" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_interface.MCXA153" name="osa_interface" brief="Component osa interface" version="1.0.0" full_name="Component osa interface" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_interface.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.MCXA153" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.osa.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_common_task.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ctimer_adapter.MCXA153" name="ctimer_adapter" brief="Component ctimer_adapter" version="1.0.0" full_name="Component ctimer_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <defines>
        <define name="TIMER_PORT_TYPE_CTIMER" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.ctimer.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ctimer_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_adapter.MCXA153" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <defines>
        <define name="TIMER_PORT_TYPE_LPTMR" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.lptmr.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lptmr_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ostimer_adapter.MCXA153" name="ostimer_adapter" brief="Component ostimer_adapter" version="1.0.0" full_name="Component ostimer_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <defines>
        <define name="TIMER_PORT_TYPE_OSTIMER" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.ostimer.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ostimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ostimer_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_time_stamp_adapter.MCXA153" name="lptmr time stamp adapter" brief="Component lptmr time stamp adapter" version="1.0.0" full_name="component lptmr time stamp adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/time_stamp" project_base_path="component/time_stamp">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.lptmr.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_time_stamp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr_time_stamp.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lptmr_time_stamp_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ctimer_time_stamp_adapter.MCXA153" name="ctimer time stamp adapter" brief="Component ctimer time stamp adapter" version="1.0.0" full_name="component ctimer time stamp adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/time_stamp" project_base_path="component/time_stamp">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.ctimer.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_time_stamp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ctimer_time_stamp.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ctimer_time_stamp_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ostimer_time_stamp_adapter.MCXA153" name="ostimer time stamp adapter" brief="Component ostimer time stamp adapter" version="1.0.0" full_name="component ostimer time stamp adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/time_stamp" project_base_path="component/time_stamp">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="platform.drivers.ostimer.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_time_stamp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ostimer_time_stamp.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ostimer_time_stamp_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_bus.MCXA153" name="i3c_bus" brief="Component i3c_bus" version="1.0.1" full_name="Component i3c_bus" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/i3c_bus" project_base_path="component/i3c_bus">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_i3c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i3c_bus.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_bus_adapter.MCXA153" name="i3c_bus_adapter" brief="Component i3c_bus_adapter" version="1.1.0" full_name="Component i3c_bus_adapter" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/i3c_bus" project_base_path="component/i3c_bus">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i3c.MCXA153"/>
          <component_dependency value="component.i3c_bus.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_i3c_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_i3c_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i3c_bus_adapter.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.MCXA153" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/shell" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.str.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_shell.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.power_manager_core.MCXA153" name="power_manager_core" brief="Component power manager core level" version="2.0.0" full_name="Component power manager core" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="core/components/power_manager/core" project_base_path="component/power_manager">
      <defines>
        <define name="GENERIC_LIST_LIGHT" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCXA153"/>
          <component_dependency value="component.lists.MCXA153"/>
          <device_dependency value="MCXA153"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pm_core.h"/>
        <files mask="fsl_pm_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pm_core.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_power_manager_core.MCXA153.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
