<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_MIMXRT700-EVK_manifest_v3_14" name="2.16.000 RT700" brief="SDK Superset" format_version="3.14" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.14.xsd">

  <externalDefinitions>
    <definition extID="fpga_rt700"/>
    <definition extID="ezhv_MIMXRT798S"/>
    <definition extID="hifi1_MIMXRT798S"/>
    <definition extID="hifi4_MIMXRT798S"/>
  </externalDefinitions>
  <ksdk id="MCUXpressoSDK216000" name="MCUXpresso SDK216000" version="2.16.000" revision="2.16.000"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <core_slave_roles_definitions>
    <slave_role id="M33SLAVE" name="Cortex-M33 core1 acts as slave"/>
  </core_slave_roles_definitions>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.10.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded_13-2023.10" version="13.2.1" full_name="GCC ARM Embedded 13-2023.10" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.10.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="mimxrt700evk" name="MIMXRT700-EVK" version="1.0.0" package="MIMXRT798SGFOA">
      <description>i.MX RT700 Evaluation Kit</description>
      <memory>
        <memoryBlock id="OCTAL_FLASH_mimxrt700evk" name="OCTAL_FLASH" addr="28000000" size="00800000" type="ExtFlash" access="RO"/>
      </memory>
      <examples>
        <example id="mimxrt700evk_power_mode_comp_only_cm33_core0" name="power_mode_comp_only_cm33_core0" brief="The power_mode_comp_only application shows the usage of normal power mode control APIs for entering the low power mode: Sleep mode, Deep Sleep mode, Deep Sleep Retention mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low power mode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other when only using the compute domain(CPU0). The sense domain (CPU1) should also be booted to configure PMC and SLEEPCON correctly, after that it will enter Deep Sleep mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" linked_projects="mimxrt700evk_power_mode_comp_only_cm33_core1" path="examples/mimxrt700evk/demo_apps/power_mode_comp_only/cm33_core0">
          <external path="examples/mimxrt700evk/demo_apps/power_mode_comp_only/cm33_core0" type="xml">
            <files mask="power_mode_comp_only_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ctimer_match_example_cm33_core0" name="ctimer_match_example_cm33_core0" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, the match feature of the CTimer is used to toggle the output level." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/mimxrt700evk/driver_examples/ctimer/simple_match/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/ctimer/simple_match/cm33_core0" type="xml">
            <files mask="ctimer_match_example_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_uart_interrupt_transfer_cm33_core0" name="flexio_uart_interrupt_transfer_cm33_core0" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/uart/interrupt_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/uart/interrupt_transfer/cm33_core0" type="xml">
            <files mask="flexio_uart_interrupt_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpadc_dual_single_ended_conversion_cm33_core0" name="lpadc_dual_single_ended_conversion_cm33_core0" brief="The lpadc_dual_single_ended_conversion example shows how to use two channel with LPADC driver. In this example, user should indicate two channel to provide a voltage signal (can be controlled by user) as the LPADC's sample input, Channel B does not need to be paired with Channel A, Channel B is user selectable.When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/mimxrt700evk/driver_examples/lpadc/dual_single_ended_conversion/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpadc/dual_single_ended_conversion/cm33_core0" type="xml">
            <files mask="lpadc_dual_single_ended_conversion_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpi2c_interrupt_b2b_transfer_master_cm33_core0" name="lpi2c_interrupt_b2b_transfer_master_cm33_core0" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mimxrt700evk/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpi2c_edma_b2b_transfer_master_cm33_core0" name="cmsis_lpi2c_edma_b2b_transfer_master_cm33_core0" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="examples/mimxrt700evk/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpi2c/edma_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_irtc_cm33_core0" name="irtc_cm33_core0" brief="The IRTC project is a simple demonstration program of the SDK IRTC driver.This example is a low power module that provides time keeping and calendaring functions and additionally providesprotection against tampering, protection against spurious memory/register updates and battery operation." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/irtc" path="examples/mimxrt700evk/driver_examples/irtc/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/irtc/cm33_core0" type="xml">
            <files mask="irtc_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pdm_interrupt_cm33_core0" name="pdm_interrupt_cm33_core0" brief="The pdm_interrupt example shows how to use pdm driver with interrupt:In this example, one pdm instance playbacks the audio data stored in flash using interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdm" path="examples/mimxrt700evk/driver_examples/pdm/pdm_interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pdm/pdm_interrupt/cm33_core0" type="xml">
            <files mask="pdm_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lcdif_rotate_flip" name="lcdif_rotate_flip" brief="This example demonstrates how to use the LCDIF rotate/flip feature. In this example, you will see a square with three color(red, green and blue). The rotate/flip mode is changing." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/mimxrt700evk/driver_examples/lcdif/rotate_flip/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lcdif/rotate_flip/cm33_core0" type="xml">
            <files mask="lcdif_rotate_flip_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_freqme_interrupt" name="freqme_interrupt" brief="The freqme_interrupt is a demonstration program of the SDK LPC_FREQME driver's features. The example demostrate the usage of frequency measurement operate mode and pulse width measurement operate mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/freqme" path="examples/mimxrt700evk/driver_examples/freqme/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/freqme/cm33_core0" type="xml">
            <files mask="freqme_interrupt_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ctimer_pwm_interrupt_example_cm33_core1" name="ctimer_pwm_interrupt_example_cm33_core1" brief="The Simple PWM Interrupt project is to demonstrate usage of the SDK CTimer driver as a PWM with interrupt callback functionsIn this example an IO pin connected to the LED is used as a PWM output line to generate a PWM signal.With an interrupt callback the PWM duty cycle is changed frequently in such a way that the LED brightness can be varied." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/mimxrt700evk/driver_examples/ctimer/simple_pwm_interrupt/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/ctimer/simple_pwm_interrupt/cm33_core1" type="xml">
            <files mask="ctimer_pwm_interrupt_example_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_interrupt_transfer_cm33_core1" name="lpuart_interrupt_transfer_cm33_core1" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_transfer/cm33_core1" type="xml">
            <files mask="lpuart_interrupt_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_mu_polling_core1" name="mu_polling_core1" brief="The mu_polling example shows how to use MU driver in polling way:In this example:1. Core 0 send message to Core 1 in polling mode via MU module.2. Core 1 send message back to Core 0 in polling mode.3. Core 0 receive message sent from Core 1 in polling mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mu" path="examples/mimxrt700evk/driver_examples/mu/polling/core1">
          <external path="examples/mimxrt700evk/driver_examples/mu/polling/core1" type="xml">
            <files mask="mu_polling_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_hello_world_demo_cm33_core0" name="hello_world_demo_cm33_core0" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/mimxrt700evk/demo_apps/hello_world/cm33_core0">
          <external path="examples/mimxrt700evk/demo_apps/hello_world/cm33_core0" type="xml">
            <files mask="hello_world_demo_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ctimer_match_interrupt_example_cm33_core0" name="ctimer_match_interrupt_example_cm33_core0" brief="The Simple Match Interrupt project is to demonstrate usage of the SDK CTimer driver with interrupt callback functionsIn this example the upon match and IO pin connected to the LED is toggled and the timer is reset, so it would generate a square wave.With an interrupt callback the match value is changed frequently in such a way that the frequency of the output square wave is increased gradually." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/mimxrt700evk/driver_examples/ctimer/simple_match_interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/ctimer/simple_match_interrupt/cm33_core0" type="xml">
            <files mask="ctimer_match_interrupt_example_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_uart_int_rb_transfer_cm33_core0" name="flexio_uart_int_rb_transfer_cm33_core0" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/uart/int_rb_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/uart/int_rb_transfer/cm33_core0" type="xml">
            <files mask="flexio_uart_int_rb_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpadc_polling_cm33_core0" name="lpadc_polling_cm33_core0" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/mimxrt700evk/driver_examples/lpadc/polling/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpadc/polling/cm33_core0" type="xml">
            <files mask="lpadc_polling_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpi2c_interrupt_b2b_transfer_slave_cm33_core0" name="lpi2c_interrupt_b2b_transfer_slave_cm33_core0" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mimxrt700evk/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpi2c_edma_b2b_transfer_slave_cm33_core0" name="cmsis_lpi2c_edma_b2b_transfer_slave_cm33_core0" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="examples/mimxrt700evk/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="cmsis_lpi2c_edma_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_mrt_example_cm33_core0" name="mrt_example_cm33_core0" brief="The MRT project is a simple demonstration program of the SDK MRT driver. It sets up the MRThardware block to trigger a periodic interrupt after every 250 milliseconds. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mrt" path="examples/mimxrt700evk/driver_examples/mrt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/mrt/cm33_core0" type="xml">
            <files mask="mrt_example_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pdm_hwvad_cm33_core0" name="pdm_hwvad_cm33_core0" brief="The pdm_hwvad example shows how to use pdm driver with interrupt:In this example, one pdm instance playbacks the audio data stored in flash using interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdm" path="examples/mimxrt700evk/driver_examples/pdm/pdm_hwvad/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pdm/pdm_hwvad/cm33_core0" type="xml">
            <files mask="pdm_hwvad_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lcdif_color_key" name="lcdif_color_key" brief="This example demonstrates how to use the LCDIF color key feature in ARGB8888 mode. In this exapmle, background layer is use as destination layer and video layer is used as source layer. The gray rectangles in source layer fall into the color key range and are replaced by background layer which is red when the color key mode is on." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/mimxrt700evk/driver_examples/lcdif/color_key/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lcdif/color_key/cm33_core0" type="xml">
            <files mask="lcdif_color_key_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_sdadc_sai_interrupt_cm33_core0" name="sdadc_sai_interrupt_cm33_core0" brief="The sdadc sai interrupt example shows how to use sdadc driver with interrupt. In this example, sdadc gathers analog data from the microphone, and uses the sai to send the digital data to the codec. The user can hear the sound from the microphone and see the log on the terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sdadc" path="examples/mimxrt700evk/driver_examples/sdadc/sdadc_sai_interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/sdadc/sdadc_sai_interrupt/cm33_core0" type="xml">
            <files mask="sdadc_sai_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ctimer_match_example_cm33_core1" name="ctimer_match_example_cm33_core1" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, the match feature of the CTimer is used to toggle the output level." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/mimxrt700evk/driver_examples/ctimer/simple_match/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/ctimer/simple_match/cm33_core1" type="xml">
            <files mask="ctimer_match_example_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_edma_rb_transfer_cm33_core1" name="lpuart_edma_rb_transfer_cm33_core1" brief="The lpuart_edma Ring Buffer Example project is to demonstrate usage of the KSDK lpuart driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/edma_rb_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/edma_rb_transfer/cm33_core1" type="xml">
            <files mask="lpuart_edma_rb_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_mu_interrupt_core1" name="mu_interrupt_core1" brief="The mu_interrupt example shows how to use MU driver in interrupt way:In this example:1. Core 0 send message to Core 1 in interrupt mode via MU module.2. Core 1 send message back to Core 0 in interrupt mode.3. Core 0 receive message sent from Core 1 in interrupt mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mu" path="examples/mimxrt700evk/driver_examples/mu/interrupt/core1">
          <external path="examples/mimxrt700evk/driver_examples/mu/interrupt/core1" type="xml">
            <files mask="mu_interrupt_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_shell_cm33_core0" name="shell_cm33_core0" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/mimxrt700evk/demo_apps/shell/cm33_core0">
          <external path="examples/mimxrt700evk/demo_apps/shell/cm33_core0" type="xml">
            <files mask="shell_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_clockout_cm33_core0" name="clockout_cm33_core0" brief="The syscon_clockout driver example shows how to output the internal clock signal. In this driver example, users can choose the clock signal to be outputted, and the divider of the output clock signal. By probe the output pin, users can observe the selected internal clock signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/syscon" path="examples/mimxrt700evk/driver_examples/clockout/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/clockout/cm33_core0" type="xml">
            <files mask="clockout_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_pwm_cm33_core0" name="flexio_pwm_cm33_core0" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/pwm/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/pwm/cm33_core0" type="xml">
            <files mask="flexio_pwm_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpadc_interrupt_cm33_core0" name="lpadc_interrupt_cm33_core0" brief="The lpadc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/mimxrt700evk/driver_examples/lpadc/interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpadc/interrupt/cm33_core0" type="xml">
            <files mask="lpadc_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpi2c_edma_b2b_transfer_master_cm33_core0" name="lpi2c_edma_b2b_transfer_master_cm33_core0" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mimxrt700evk/driver_examples/lpi2c/edma_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpi2c/edma_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpspi_int_b2b_transfer_master_cm33_core0" name="cmsis_lpspi_int_b2b_transfer_master_cm33_core0" brief="The cmsis_lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="examples/mimxrt700evk/cmsis_driver_examples/lpspi/int_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpspi/int_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_utick_cm33_core0" name="utick_cm33_core0" brief="The utick project is a simple demonstration program of the SDK utick driver. It sets up the utick hardware block to trigger a periodic interrupt after every 1 second. When the utick interrupt is triggered a message is printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/utick" path="examples/mimxrt700evk/driver_examples/utick/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/utick/cm33_core0" type="xml">
            <files mask="utick_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pdm_sai_interrupt_cm33_core0" name="pdm_sai_interrupt_cm33_core0" brief="The pdm_sdma_transfer example shows how to use pdm driver with interrupt:In this example, one sai instance loopback the audio data that recieve from PDM." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdm" path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_interrupt/cm33_core0" type="xml">
            <files mask="pdm_sai_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pngdec" name="pngdec" brief="The PNG decoder demo uses the PNG decoder driver to decode an PNG picture of NXP logo and shows it in the LCD panel." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pngdec" path="examples/mimxrt700evk/driver_examples/pngdec/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pngdec/cm33_core0" type="xml">
            <files mask="pngdec_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flash_component_octal_xspi" name="flash_component_octal_xspi" brief="octal flash demo shows the use of nor flash component to erase, program, and read an external serial nor flash device." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="component_examples/flash_component/xspi_octal" path="examples/mimxrt700evk/component_examples/flash_component/xspi_octal/cm33_core0">
          <external path="examples/mimxrt700evk/component_examples/flash_component/xspi_octal/cm33_core0" type="xml">
            <files mask="flash_component_octal_xspi_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_memory_to_memory_cm33_core1" name="edma4_memory_to_memory_cm33_core1" brief="The EDMA4 memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA4 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/memory_to_memory/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/edma4/memory_to_memory/cm33_core1" type="xml">
            <files mask="edma4_memory_to_memory_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_interrupt_rb_transfer_cm33_core1" name="lpuart_interrupt_rb_transfer_cm33_core1" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_rb_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_rb_transfer/cm33_core1" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ostimer_example_cm33_core1" name="ostimer_example_cm33_core1" brief="The OSTIMER project is a simple demonstration program of the SDK OSTIMER driver. It sets the OSTIMER as the wakeup source from deep-sleep mode. After wakeup from deep-sleep mode, OS timer will set match value to trigger the interrupt while the timer count tick reach the match value about every 2 seconds." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ostimer" path="examples/mimxrt700evk/driver_examples/ostimer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/ostimer/cm33_core1" type="xml">
            <files mask="ostimer_example_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_log_bm_cm33_core0" name="log_bm_cm33_core0" brief="The log demo is used to demonstrate how to use log component. The main function of the demo is to prompt the LOG level string according to the user input log level command." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="component_examples" path="examples/mimxrt700evk/component_examples/log/bm/cm33_core0">
          <external path="examples/mimxrt700evk/component_examples/log/bm/cm33_core0" type="xml">
            <files mask="log_bm_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_memory_to_memory_cm33_core0" name="edma4_memory_to_memory_cm33_core0" brief="The EDMA4 memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA4 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/memory_to_memory/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/edma4/memory_to_memory/cm33_core0" type="xml">
            <files mask="edma4_memory_to_memory_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_int_lpspi_xfer_master_cm33_core0" name="flexio_spi_int_lpspi_xfer_master_cm33_core0" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/int_lpspi_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/int_lpspi_transfer/master/cm33_core0" type="xml">
            <files mask="flexio_spi_int_lpspi_xfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_hardware_flow_control_cm33_core0" name="lpuart_hardware_flow_control_cm33_core0" brief="The lpuart_hardware_flow_control Example project is to demonstrate usage of the hardware flow control function.This example will send data to itself(loopback), and hardware flow control will be enabled in the example.The CTS(clear-to-send) pin is for transmiter to check if receiver is ready, if the CTS pin is assert, transmiter startto send data. The RTS(request-to-send) is a pin for receiver to inform the transmiter if receiver is ready to receivedata. So, please connect RTS to CTS pin directly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/hardware_flow_control">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/hardware_flow_control" type="xml">
            <files mask="lpuart_hardware_flow_control_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpi2c_edma_b2b_transfer_slave_cm33_core0" name="lpi2c_edma_b2b_transfer_slave_cm33_core0" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mimxrt700evk/driver_examples/lpi2c/edma_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpi2c/edma_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpspi_int_b2b_transfer_slave_cm33_core0" name="cmsis_lpspi_int_b2b_transfer_slave_cm33_core0" brief="The lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="examples/mimxrt700evk/cmsis_driver_examples/lpspi/int_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpspi/int_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="cmsis_lpspi_int_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_romapi_bootloader" name="romapi_bootloader" brief="Rom API driver example for bootloader functions." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/romapi/bootloader" path="examples/mimxrt700evk/driver_examples/romapi/bootloader/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/romapi/bootloader/cm33_core0" type="xml">
            <files mask="romapi_bootloader_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pdm_sai_interrupt_transfer_cm33_core0" name="pdm_sai_interrupt_transfer_cm33_core0" brief="The pdm_sdma_transfer example shows how to use pdm driver with interrupt transaction api:In this example, one sai instance loopback the audio data that recieve from PDM." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdm" path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_interrupt_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_interrupt_transfer/cm33_core0" type="xml">
            <files mask="pdm_sai_interrupt_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_jpegdec_single_stream_single_frame_config" name="jpegdec_single_stream_single_frame_config" brief="The JPEG decoder example decodes one JPEG picture using slot 0 then shows it on panel. First we configure the decoder configuration then starts the decoder. After decoding complete the picture will be shown on panel." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/jpegdec" path="examples/mimxrt700evk/driver_examples/jpegdec/single_stream_single_frame/config/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/jpegdec/single_stream_single_frame/config/cm33_core0" type="xml">
            <files mask="jpegdec_single_stream_single_frame_config_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_puf_v3_cm33_core0" name="puf_v3_cm33_core0" brief="This driver example project demonstrates how to use driver for the PUFv3 controller which provides a secure key storage." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/puf_v3" path="examples/mimxrt700evk/driver_examples/puf_v3/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/puf_v3/cm33_core0" type="xml">
            <files mask="puf_v3_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_memory_to_memory_transfer_cm33_core1" name="edma4_memory_to_memory_transfer_cm33_core1" brief="The EDMA4 memory to memory transfer example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA4 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/memory_to_memory_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/edma4/memory_to_memory_transfer/cm33_core1" type="xml">
            <files mask="edma4_memory_to_memory_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpuart_interrupt_transfer_cm33_core1" name="cmsis_lpuart_interrupt_transfer_cm33_core1" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="examples/mimxrt700evk/cmsis_driver_examples/lpuart/interrupt_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpuart/interrupt_transfer/cm33_core1" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_sema42_dual_core_core1" name="sema42_dual_core_core1" brief="The sema42 example shows how to use SEMA42 driver to lock and unlock a sema gate:In this example:1. Firstly, Core 0 turn on LED  and lock a sema gate then boot up Core 1 wake up.2. Core 1 must be wait until Core 0 unlocks this sema gate to lock it.3. After user press any key in terminal window, the sema gate will be unlocked by core 0,then core 1 will lock it and turn off the LEDIf the board does not have LED to show the status, then core 1 will send a flagto core 0 when core 1 has locked the sema gate. Core 0 outputs the success logafter it received the flag." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sema42" path="examples/mimxrt700evk/driver_examples/sema42/dual_core/core1">
          <external path="examples/mimxrt700evk/driver_examples/sema42/dual_core/core1" type="xml">
            <files mask="sema42_dual_core_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pmc_temperature_sensor" name="pmc_temperature_sensor" brief="The demo shows how to measure the temperature within the PMC module." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/mimxrt700evk/demo_apps/pmc_temperature_sensor/cm33_core0">
          <external path="examples/mimxrt700evk/demo_apps/pmc_temperature_sensor/cm33_core0" type="xml">
            <files mask="pmc_temperature_sensor_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_memory_to_memory_transfer_cm33_core0" name="edma4_memory_to_memory_transfer_cm33_core0" brief="The EDMA4 memory to memory transfer example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA4 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/memory_to_memory_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/edma4/memory_to_memory_transfer/cm33_core0" type="xml">
            <files mask="edma4_memory_to_memory_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_int_lpspi_xfer_slave_cm33_core0" name="flexio_spi_int_lpspi_xfer_slave_cm33_core0" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/int_lpspi_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/int_lpspi_transfer/slave/cm33_core0" type="xml">
            <files mask="flexio_spi_int_lpspi_xfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_interrupt_cm33_core0" name="lpuart_interrupt_cm33_core0" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/interrupt/cm33_core0" type="xml">
            <files mask="lpuart_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpspi_polling_b2b_transfer_master_cm33_core0" name="lpspi_polling_b2b_transfer_master_cm33_core0" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mimxrt700evk/driver_examples/lpspi/polling_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpspi/polling_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpspi_edma_b2b_transfer_master_cm33_core0" name="cmsis_lpspi_edma_b2b_transfer_master_cm33_core0" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="examples/mimxrt700evk/cmsis_driver_examples/lpspi/edma_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpspi/edma_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_romapi_otp" name="romapi_otp" brief="Rom API driver example for OCOTP interface." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/romapi/otp" path="examples/mimxrt700evk/driver_examples/romapi/otp/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/romapi/otp/cm33_core0" type="xml">
            <files mask="romapi_otp_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pdm_sai_multi_channel_edma_cm33_core0" name="pdm_sai_multi_channel_edma_cm33_core0" brief="The pdm_sai_multi_channel_edma example shows how to use pdm edma driver to record multi channel data together with sai edma driver" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdm" path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_multi_channel_edma/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_multi_channel_edma/cm33_core0" type="xml">
            <files mask="pdm_sai_multi_channel_edma_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_jpegdec_single_stream_single_frame_descriptor" name="jpegdec_single_stream_single_frame_descriptor" brief="The JPEG decoder example decodes one JPEG picture using slot 0 then shows it on panel. First we configure the descriptor, then enable the descriptor to let it update the decoder configuration and start decode. After decoding complete the picture will be shown on panel." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/jpegdec" path="examples/mimxrt700evk/driver_examples/jpegdec/single_stream_single_frame/descriptor/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/jpegdec/single_stream_single_frame/descriptor/cm33_core0" type="xml">
            <files mask="jpegdec_single_stream_single_frame_descriptor_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_gdet_cm33_core0" name="gdet_cm33_core0" brief="The GDET Example project is a demonstration program that uses the MCUX SDK software to show funcionality of Glitch Detect (GDET) module." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gdet" path="examples/mimxrt700evk/driver_examples/gdet/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/gdet/cm33_core0" type="xml">
            <files mask="gdet_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_ping_pong_transfer_cm33_core1" name="edma4_ping_pong_transfer_cm33_core1" brief="The EDMA4 ping pong transfer example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/ping_pong_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/edma4/ping_pong_transfer/cm33_core1" type="xml">
            <files mask="edma4_ping_pong_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpuart_edma_transfer_cm33_core1" name="cmsis_lpuart_edma_transfer_cm33_core1" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="examples/mimxrt700evk/cmsis_driver_examples/lpuart/edma_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpuart/edma_transfer/cm33_core1" type="xml">
            <files mask="cmsis_lpuart_edma_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_glikey_cm33_core1" name="glikey_cm33_core1" brief="The GLIKEY Example project is a demonstration program that uses the MCUX SDK software to show funcionality of GLIKEY IP." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/glikey" path="examples/mimxrt700evk/driver_examples/glikey/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/glikey/cm33_core1" type="xml">
            <files mask="glikey_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_ping_pong_transfer_cm33_core0" name="edma4_ping_pong_transfer_cm33_core0" brief="The EDMA4 ping pong transfer example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/ping_pong_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/edma4/ping_pong_transfer/cm33_core0" type="xml">
            <files mask="edma4_ping_pong_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_edma_lpspi_xfer_master_cm33_core0" name="flexio_spi_edma_lpspi_xfer_master_cm33_core0" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/edma_lpspi_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/edma_lpspi_transfer/master/cm33_core0" type="xml">
            <files mask="flexio_spi_edma_lpspi_xfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_edma_transfer_cm33_core0" name="lpuart_edma_transfer_cm33_core0" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/edma_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/edma_transfer/cm33_core0" type="xml">
            <files mask="lpuart_edma_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpspi_polling_b2b_transfer_slave_cm33_core0" name="lpspi_polling_b2b_transfer_slave_cm33_core0" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mimxrt700evk/driver_examples/lpspi/polling_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpspi/polling_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpspi_edma_b2b_transfer_slave_cm33_core0" name="cmsis_lpspi_edma_b2b_transfer_slave_cm33_core0" brief="The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpspi" path="examples/mimxrt700evk/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpspi/edma_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="cmsis_lpspi_edma_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_sai_edma_transfer_cm33_core0" name="sai_edma_transfer_cm33_core0" brief="The sai_edma_transfer example shows how to use sai driver with EDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM using EDMA channel." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mimxrt700evk/driver_examples/sai/edma_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/sai/edma_transfer/cm33_core0" type="xml">
            <files mask="sai_edma_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pdm_sai_multi_channel_tdm_edma_cm33_core0" name="pdm_sai_multi_channel_tdm_edma_cm33_core0" brief="The pdm_sai_multi_channel_tdm_edma example shows how to use pdm edma driver to record multi channel data together with sai edma driver" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdm" path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_multi_channel_tdm_edma/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_multi_channel_tdm_edma/cm33_core0" type="xml">
            <files mask="pdm_sai_multi_channel_tdm_edma_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_acmp_interrupt_cm33_core0" name="acmp_interrupt_cm33_core0" brief="The ACMP Interrupt project is a simple demonstration program that uses the SDK software. Itcompares the selected analog input with ACMP internal DAC output continuously and toggle the LEDwhen the final comparison result changed. The purpose of this demo is to show how to use theACMP driver in SDK software by interrupt way. The ACMP can be configured based on defaultconfiguration returned by the API ACMP_GetDefaultConfig(). The default configuration is: highspeed is not enabled, invert output is not enabled, unfiltered output is not enabled, pin outis not enabled, offset level is level 0, hysteresis level is level 0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/mimxrt700evk/driver_examples/acmp/interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/acmp/interrupt/cm33_core0" type="xml">
            <files mask="acmp_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_wrap_transfer_cm33_core1" name="edma4_wrap_transfer_cm33_core1" brief="The EDMA4 wrap transfer example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/wrap_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/edma4/wrap_transfer/cm33_core1" type="xml">
            <files mask="edma4_wrap_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pint_pin_interrupt_cm33_core1" name="pint_pin_interrupt_cm33_core1" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/mimxrt700evk/driver_examples/pint/pin_interrupt/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/pint/pin_interrupt/cm33_core1" type="xml">
            <files mask="pint_pin_interrupt_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_hello_world_usart_cm33_core1" name="dsp_hello_world_usart_cm33_core1" brief="The dsp_hello_world_usart demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" path="examples/mimxrt700evk/dsp_examples/hello_world_usart/cm33_core1">
          <external path="examples/mimxrt700evk/dsp_examples/hello_world_usart/cm33_core1" type="xml">
            <files mask="dsp_hello_world_usart_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_power_mode_switch_cm33_core0" name="power_mode_switch_cm33_core0" brief="The power_mode_switch application shows the usage of normal power mode control APIs for entering the low power mode: Sleep mode, Deep Sleep mode, Deep Sleep Retention mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low powermode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions. 1. Configure all pins as GPIO with pull-up resistor disabled in the IOCON block. 2. Configure GPIO pins as outputs using the GPIO DIR register. 3. Write 1 to the GPIO CLR register to drive the outputs LOW. 4. All peripherals disabled." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" linked_projects="mimxrt700evk_power_mode_switch_cm33_core1" path="examples/mimxrt700evk/demo_apps/power_mode_switch/cm33_core0">
          <external path="examples/mimxrt700evk/demo_apps/power_mode_switch/cm33_core0" type="xml">
            <files mask="power_mode_switch_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_wrap_transfer_cm33_core0" name="edma4_wrap_transfer_cm33_core0" brief="The EDMA4 wrap transfer example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/wrap_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/edma4/wrap_transfer/cm33_core0" type="xml">
            <files mask="edma4_wrap_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_edma_lpspi_xfer_slave_cm33_core0" name="flexio_spi_edma_lpspi_xfer_slave_cm33_core0" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/edma_lpspi_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/edma_lpspi_transfer/slave/cm33_core0" type="xml">
            <files mask="flexio_spi_edma_lpspi_xfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_interrupt_transfer_cm33_core0" name="lpuart_interrupt_transfer_cm33_core0" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_transfer/cm33_core0" type="xml">
            <files mask="lpuart_interrupt_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpspi_interrupt_b2b_transfer_master_cm33_core0" name="lpspi_interrupt_b2b_transfer_master_cm33_core0" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mimxrt700evk/driver_examples/lpspi/interrupt_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpspi/interrupt_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pint_pin_interrupt_cm33_core0" name="pint_pin_interrupt_cm33_core0" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/mimxrt700evk/driver_examples/pint/pin_interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pint/pin_interrupt/cm33_core0" type="xml">
            <files mask="pint_pin_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_sai_interrupt_transfer_cm33_core0" name="sai_interrupt_transfer_cm33_core0" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mimxrt700evk/driver_examples/sai/interrupt_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/sai/interrupt_transfer/cm33_core0" type="xml">
            <files mask="sai_interrupt_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_wwdt_example_cm33_core0" name="wwdt_example_cm33_core0" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wwdt" path="examples/mimxrt700evk/driver_examples/wwdt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/wwdt/cm33_core0" type="xml">
            <files mask="wwdt_example_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_acmp_polling_cm33_core0" name="acmp_polling_cm33_core0" brief="The ACMP Polling project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and toggle the LED when thefinal comparison result changed. The purpose of this demo is to show how to use the ACMP driverin SDK software by polling way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/mimxrt700evk/driver_examples/acmp/polling/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/acmp/polling/cm33_core0" type="xml">
            <files mask="acmp_polling_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_channel_link_cm33_core1" name="edma4_channel_link_cm33_core1" brief="The EDMA4 channel link example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/channel_link/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/edma4/channel_link/cm33_core1" type="xml">
            <files mask="edma4_channel_link_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_irtc_cm33_core1" name="irtc_cm33_core1" brief="The IRTC project is a simple demonstration program of the SDK IRTC driver.This example is a low power module that provides time keeping and calendaring functions and additionally providesprotection against tampering, protection against spurious memory/register updates and battery operation." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/irtc" path="examples/mimxrt700evk/driver_examples/irtc/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/irtc/cm33_core1" type="xml">
            <files mask="irtc_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_mu_interrupt_cm33_core1" name="dsp_mu_interrupt_cm33_core1" brief="The dsp_mu_interrupt demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" path="examples/mimxrt700evk/dsp_examples/mu_interrupt/cm33_core1">
          <external path="examples/mimxrt700evk/dsp_examples/mu_interrupt/cm33_core1" type="xml">
            <files mask="dsp_mu_interrupt_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_power_mode_with_hifi_cm33_core0" name="power_mode_with_hifi_cm33_core0" brief="The application shows the usage of normal power mode control APIs for entering the low power mode: Sleep mode, Deep Sleep mode, Deep Sleep Retention mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low powermode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions. 1. Configure all pins as GPIO with pull-up resistor disabled in the IOCON block. 2. Configure GPIO pins as outputs using the GPIO DIR register. 3. Write 1 to the GPIO CLR register to drive the outputs LOW. 4. All peripherals disabled." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" linked_projects="mimxrt700evk_power_mode_with_hifi_cm33_core1" path="examples/mimxrt700evk/demo_apps/power_mode_with_hifi/cm33_core0">
          <external path="examples/mimxrt700evk/demo_apps/power_mode_with_hifi/cm33_core0" type="xml">
            <files mask="power_mode_with_hifi_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_channel_link_cm33_core0" name="edma4_channel_link_cm33_core0" brief="The EDMA4 channel link example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/channel_link/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/edma4/channel_link/cm33_core0" type="xml">
            <files mask="edma4_channel_link_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_edma_b2b_transfer_master_cm33_core0" name="flexio_spi_edma_b2b_transfer_master_cm33_core0" brief="The flexio_spi_master_edma example shows how to use flexio spi master  driver in edma way:In this example, a flexio simulated master connect to a flexio simulated spi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/edma_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/edma_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="flexio_spi_edma_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_polling_cm33_core0" name="lpuart_polling_cm33_core0" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/polling/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/polling/cm33_core0" type="xml">
            <files mask="lpuart_polling_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpspi_interrupt_b2b_transfer_slave_cm33_core0" name="lpspi_interrupt_b2b_transfer_slave_cm33_core0" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mimxrt700evk/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pint_pattern_match_cm33_core0" name="pint_pattern_match_cm33_core0" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/mimxrt700evk/driver_examples/pint/pattern_match/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pint/pattern_match/cm33_core0" type="xml">
            <files mask="pint_pattern_match_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_sai_interrupt_record_playback_cm33_core0" name="sai_interrupt_record_playback_cm33_core0" brief="The sai_interrupt_record_playback example shows how to use sai driver with record and playback features: In this example, one sai instance record the audio data from input and playbacks the audio data." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mimxrt700evk/driver_examples/sai/interrupt_record_playback/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/sai/interrupt_record_playback/cm33_core0" type="xml">
            <files mask="sai_interrupt_record_playback_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_sema42_dual_core_core0" name="sema42_dual_core_core0" brief="The sema42 example shows how to use SEMA42 driver to lock and unlock a sema gate:In this example:1. Firstly, Core 0 turn on LED  and lock a sema gate then boot up Core 1 wake up.2. Core 1 must be wait until Core 0 unlocks this sema gate to lock it.3. After user press any key in terminal window, the sema gate will be unlocked by core 0,then core 1 will lock it and turn off the LEDIf the board does not have LED to show the status, then core 1 will send a flagto core 0 when core 1 has locked the sema gate. Core 0 outputs the success logafter it received the flag." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sema42" linked_projects="mimxrt700evk_sema42_dual_core_core1" path="examples/mimxrt700evk/driver_examples/sema42/dual_core/core0">
          <external path="examples/mimxrt700evk/driver_examples/sema42/dual_core/core0" type="xml">
            <files mask="sema42_dual_core_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_glikey_cm33_core0" name="glikey_cm33_core0" brief="The GLIKEY Example project is a demonstration program that uses the MCUX SDK software to show funcionality of GLIKEY IP." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/glikey" path="examples/mimxrt700evk/driver_examples/glikey/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/glikey/cm33_core0" type="xml">
            <files mask="glikey_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_memset_cm33_core1" name="edma4_memset_cm33_core1" brief="The EDMA4 memset example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA4 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/memset/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/edma4/memset/cm33_core1" type="xml">
            <files mask="edma4_memset_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_i3c_master_read_sensor_p3t1755_cm33_core1" name="i3c_master_read_sensor_p3t1755_cm33_core1" brief="The i3c_master_read_sensor_p3t1755 example shows how to use i3c driver as master to communicate with sensor P3T1755." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/mimxrt700evk/driver_examples/i3c/master_read_sensor_p3t1755/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/i3c/master_read_sensor_p3t1755/cm33_core1" type="xml">
            <files mask="i3c_master_read_sensor_p3t1755_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_mu_polling_cm33_core1" name="dsp_mu_polling_cm33_core1" brief="The dsp_mu_polling demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" path="examples/mimxrt700evk/dsp_examples/mu_polling/cm33_core1">
          <external path="examples/mimxrt700evk/dsp_examples/mu_polling/cm33_core1" type="xml">
            <files mask="dsp_mu_polling_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_power_manager_test_bm_cm33_core0" name="power_manager_test_bm_cm33_core0" brief="The power manager test application demonstrates the basic usage of power manager framework without RTOS. The demo tests all features of power manager framework, including notification manager, wakeup source manager and so on." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" linked_projects="mimxrt700evk_power_manager_test_bm_cm33_core1" path="examples/mimxrt700evk/demo_apps/power_manager_test/bm/cm33_core0">
          <external path="examples/mimxrt700evk/demo_apps/power_manager_test/bm/cm33_core0" type="xml">
            <files mask="power_manager_test_bm_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_memset_cm33_core0" name="edma4_memset_cm33_core0" brief="The EDMA4 memset example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA4 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/memset/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/edma4/memset/cm33_core0" type="xml">
            <files mask="edma4_memset_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_edma_b2b_transfer_slave_cm33_core0" name="flexio_spi_edma_b2b_transfer_slave_cm33_core0" brief="The flexio_spi_slave_edma example shows how to use flexio spi slave  driver in dma way:In this example, a flexio simulated slave connect to a flexio simulated spi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/edma_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/edma_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="flexio_spi_edma_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_edma_rb_transfer_cm33_core0" name="lpuart_edma_rb_transfer_cm33_core0" brief="The lpuart_edma Ring Buffer Example project is to demonstrate usage of the KSDK lpuart driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/edma_rb_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/edma_rb_transfer/cm33_core0" type="xml">
            <files mask="lpuart_edma_rb_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpspi_edma_b2b_transfer_master_cm33_core0" name="lpspi_edma_b2b_transfer_master_cm33_core0" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mimxrt700evk/driver_examples/lpspi/edma_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpspi/edma_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_xspi_octal_polling_transfer_cm33_core0" name="xspi_octal_polling_transfer_cm33_core0" brief="The xspi_octal_polling_transfer example shows how to use xspi driver with polling. In this example, xspi will send data and operate the external Nor flash connected with XSPI. Some simple flash command will be executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/xspi" path="examples/mimxrt700evk/driver_examples/xspi/octal/polling_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/xspi/octal/polling_transfer/cm33_core0" type="xml">
            <files mask="xspi_octal_polling_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_sai_edma_record_playback_cm33_core0" name="sai_edma_record_playback_cm33_core0" brief="The sai_edma_record_playback example shows how to use sai driver with EDMA: In this example, one sai instance record the audio data from input and playbacks the audio data." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mimxrt700evk/driver_examples/sai/edma_record_playback/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/sai/edma_record_playback/cm33_core0" type="xml">
            <files mask="sai_edma_record_playback_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lcdif_cursor_argb" name="lcdif_cursor_argb" brief="This example demonstrates how to use the LCDIF cursor in ARGB8888 mode. In this exapmle, the screen is devided into two parts: red and blue. A cursor is moving in the screen, the cursor alpha value changes during moving." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/mimxrt700evk/driver_examples/lcdif/cursor_argb/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lcdif/cursor_argb/cm33_core0" type="xml">
            <files mask="lcdif_cursor_argb_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_hello_world_usart_cm33_core0" name="dsp_hello_world_usart_cm33_core0" brief="The dsp_hello_world_usart demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" linked_projects="mimxrt700evk_dsp_hello_world_usart_cm33_core1" path="examples/mimxrt700evk/dsp_examples/hello_world_usart/cm33_core0">
          <external path="examples/mimxrt700evk/dsp_examples/hello_world_usart/cm33_core0" type="xml">
            <files mask="dsp_hello_world_usart_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_power_mode_comp_only_cm33_core1" name="power_mode_comp_only_cm33_core1" brief="The power_mode_comp_only application shows the usage of normal power mode control APIs for entering the low power mode: Sleep mode, Deep Sleep mode, Deep Sleep Retention mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low power mode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other when only using the compute domain(CPU0). The sense domain (CPU1) should also be booted to configure PMC and SLEEPCON correctly, after that it will enter Deep Sleep mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/mimxrt700evk/demo_apps/power_mode_comp_only/cm33_core1">
          <external path="examples/mimxrt700evk/demo_apps/power_mode_comp_only/cm33_core1" type="xml">
            <files mask="power_mode_comp_only_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_interleave_transfer_cm33_core1" name="edma4_interleave_transfer_cm33_core1" brief="The EDMA4 interleave example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/interleave_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/edma4/interleave_transfer/cm33_core1" type="xml">
            <files mask="edma4_interleave_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_i3c_interrupt_b2b_transfer_master_cm33_core1" name="i3c_interrupt_b2b_transfer_master_cm33_core1" brief="The i3c_interrupt_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using interrupt method. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/mimxrt700evk/driver_examples/i3c/interrupt_b2b_transfer/master/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/i3c/interrupt_b2b_transfer/master/cm33_core1" type="xml">
            <files mask="i3c_interrupt_b2b_transfer_master_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_sema42_cm33_core1" name="dsp_sema42_cm33_core1" brief="The dsp_sema42 demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" path="examples/mimxrt700evk/dsp_examples/sema42/cm33_core1">
          <external path="examples/mimxrt700evk/dsp_examples/sema42/cm33_core1" type="xml">
            <files mask="dsp_sema42_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cdog_cm33_core0" name="cdog_cm33_core0" brief="The CDOG Example project is a demonstration program that uses the KSDK software to show funcionality of Code Watchdog Timer." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/mimxrt700evk/driver_examples/cdog/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/cdog/cm33_core0" type="xml">
            <files mask="cdog_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_interleave_transfer_cm33_core0" name="edma4_interleave_transfer_cm33_core0" brief="The EDMA4 interleave example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/interleave_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/edma4/interleave_transfer/cm33_core0" type="xml">
            <files mask="edma4_interleave_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_int_b2b_transfer_master_cm33_core0" name="flexio_spi_int_b2b_transfer_master_cm33_core0" brief="The flexio_spi_master_interrupt example shows how to use flexio spi master  driver in interrupt way:In this example, a flexio simulated master connect to a flexio simulated spi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/int_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/int_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="flexio_spi_int_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_interrupt_rb_transfer_cm33_core0" name="lpuart_interrupt_rb_transfer_cm33_core0" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_rb_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_rb_transfer/cm33_core0" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpspi_edma_b2b_transfer_slave_cm33_core0" name="lpspi_edma_b2b_transfer_slave_cm33_core0" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mimxrt700evk/driver_examples/lpspi/edma_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpspi/edma_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_xspi_octal_edma_transfer_cm33_core0" name="xspi_octal_edma_transfer_cm33_core0" brief="The xspi_octal_edma_transfer example shows how to use xspi driver with dma. In this example, xspi will send data and operate the external octal flash connected with FLEXSPI. Some simple flash command will be executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/xspi" path="examples/mimxrt700evk/driver_examples/xspi/octal/edma_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/xspi/octal/edma_transfer/cm33_core0" type="xml">
            <files mask="xspi_octal_edma_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ostimer_example_cm33_core0" name="ostimer_example_cm33_core0" brief="The OSTIMER project is a simple demonstration program of the SDK OSTIMER driver. It sets the OSTIMER as the wakeup source from deep-sleep mode. After wakeup from deep-sleep mode, OS timer will set match value to trigger the interrupt while the timer count tick reach the match value about every 2 seconds." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ostimer" path="examples/mimxrt700evk/driver_examples/ostimer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/ostimer/cm33_core0" type="xml">
            <files mask="ostimer_example_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lcdif_cursor_masked" name="lcdif_cursor_masked" brief="This example demonstrates how to use the LCDIF cursor in masked mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/mimxrt700evk/driver_examples/lcdif/cursor_masked/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lcdif/cursor_masked/cm33_core0" type="xml">
            <files mask="lcdif_cursor_masked_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_mu_interrupt_cm33_core0" name="dsp_mu_interrupt_cm33_core0" brief="The dsp_mu_interrupt demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" linked_projects="mimxrt700evk_dsp_mu_interrupt_cm33_core1" path="examples/mimxrt700evk/dsp_examples/mu_interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/dsp_examples/mu_interrupt/cm33_core0" type="xml">
            <files mask="dsp_mu_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_power_mode_with_hifi_cm33_core1" name="power_mode_with_hifi_cm33_core1" brief="The application shows the usage of normal power mode control APIs for entering the low power mode: Sleep mode, Deep Sleep mode, Deep Sleep Retention mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low powermode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions. 1. Configure all pins as GPIO with pull-up resistor disabled in the IOCON block. 2. Configure GPIO pins as outputs using the GPIO DIR register. 3. Write 1 to the GPIO CLR register to drive the outputs LOW. 4. All peripherals disabled." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/mimxrt700evk/demo_apps/power_mode_with_hifi/cm33_core1">
          <external path="examples/mimxrt700evk/demo_apps/power_mode_with_hifi/cm33_core1" type="xml">
            <files mask="power_mode_with_hifi_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_scatter_gather_cm33_core1" name="edma4_scatter_gather_cm33_core1" brief="The EDMA4 scatter gather example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA4 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/scatter_gather/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/edma4/scatter_gather/cm33_core1" type="xml">
            <files mask="edma4_scatter_gather_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_i3c_interrupt_b2b_transfer_slave_cm33_core1" name="i3c_interrupt_b2b_transfer_slave_cm33_core1" brief="The i3c_interrupt_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a interrupt master. In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/mimxrt700evk/driver_examples/i3c/interrupt_b2b_transfer/slave/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/i3c/interrupt_b2b_transfer/slave/cm33_core1" type="xml">
            <files mask="i3c_interrupt_b2b_transfer_slave_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_itrc_cm33_core0" name="itrc_cm33_core0" brief="The ITRC Example project is a demonstration program that uses the MCUX SDK software to show funcionality of Intrusion and Tamper Response Controller." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/itrc" path="examples/mimxrt700evk/driver_examples/itrc/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/itrc/cm33_core0" type="xml">
            <files mask="itrc_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_edma4_scatter_gather_cm33_core0" name="edma4_scatter_gather_cm33_core0" brief="The EDMA4 scatter gather example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA4 drivers.The purpose of this example is to show how to use the EDMA4 and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma4" path="examples/mimxrt700evk/driver_examples/edma4/scatter_gather/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/edma4/scatter_gather/cm33_core0" type="xml">
            <files mask="edma4_scatter_gather_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_int_b2b_transfer_slave_cm33_core0" name="flexio_spi_int_b2b_transfer_slave_cm33_core0" brief="The flexio_spi_slave_interrupt example shows how to use flexio spi slave  driver in interrupt way:In this example, a flexio simulated slave connect to a flexio simulated spi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/int_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/int_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="flexio_spi_int_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_interrupt_transfer_seven_bits_cm33_core0" name="lpuart_interrupt_transfer_seven_bits_cm33_core0" brief="The lpuart_interrupt_transfer_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_transfer_seven_bits/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/interrupt_transfer_seven_bits/cm33_core0" type="xml">
            <files mask="lpuart_interrupt_transfer_seven_bits_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpuart_interrupt_transfer_cm33_core0" name="cmsis_lpuart_interrupt_transfer_cm33_core0" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="examples/mimxrt700evk/cmsis_driver_examples/lpuart/interrupt_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpuart/interrupt_transfer/cm33_core0" type="xml">
            <files mask="cmsis_lpuart_interrupt_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_xspi_psram_polling_transfer_cm33_core0" name="xspi_psram_polling_transfer_cm33_core0" brief="The xspi_psram_polling_transfer example shows how to use xspi driver with polling. In this example, xspi will send data and operate the external PSRAM connected with XSPI. Some simple flash command will be executed, such as Read Data and Write Data.Example will write/read through the whole chip, through IP command and AHB command." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/xspi" path="examples/mimxrt700evk/driver_examples/xspi/psram/polling_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/xspi/psram/polling_transfer/cm33_core0" type="xml">
            <files mask="xspi_psram_polling_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_mu_polling_core0" name="mu_polling_core0" brief="The mu_polling example shows how to use MU driver in polling way:In this example:1. Core 0 send message to Core 1 in polling mode via MU module.2. Core 1 send message back to Core 0 in polling mode.3. Core 0 receive message sent from Core 1 in polling mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mu" linked_projects="mimxrt700evk_mu_polling_core1" path="examples/mimxrt700evk/driver_examples/mu/polling/core0">
          <external path="examples/mimxrt700evk/driver_examples/mu/polling/core0" type="xml">
            <files mask="mu_polling_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lcdif_gamma" name="lcdif_gamma" brief="This example demonstrates how to use the LCDIF gamma correction feature. In this example, the gamma corretion table is set to invert the original picture. The original picture is gradual changed gray bars, the gamma correction is continuously enabled and disabled, so you can see the screen switch between the original picture and the inverted picture." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/mimxrt700evk/driver_examples/lcdif/gamma/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lcdif/gamma/cm33_core0" type="xml">
            <files mask="lcdif_gamma_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_mu_polling_cm33_core0" name="dsp_mu_polling_cm33_core0" brief="The dsp_mu_polling demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" linked_projects="mimxrt700evk_dsp_mu_polling_cm33_core1" path="examples/mimxrt700evk/dsp_examples/mu_polling/cm33_core0">
          <external path="examples/mimxrt700evk/dsp_examples/mu_polling/cm33_core0" type="xml">
            <files mask="dsp_mu_polling_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_hello_world_demo_cm33_core1" name="hello_world_demo_cm33_core1" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/mimxrt700evk/demo_apps/hello_world/cm33_core1">
          <external path="examples/mimxrt700evk/demo_apps/hello_world/cm33_core1" type="xml">
            <files mask="hello_world_demo_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_gpio_input_interrupt_cm33_core1" name="gpio_input_interrupt_cm33_core1" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/mimxrt700evk/driver_examples/gpio/input_interrupt/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/gpio/input_interrupt/cm33_core1" type="xml">
            <files mask="gpio_input_interrupt_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_i3c_polling_b2b_transfer_master_cm33_core1" name="i3c_polling_b2b_transfer_master_cm33_core1" brief="The i3c_polling_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using polling method. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/mimxrt700evk/driver_examples/i3c/polling_b2b_transfer/master/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/i3c/polling_b2b_transfer/master/cm33_core1" type="xml">
            <files mask="i3c_polling_b2b_transfer_master_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cdog_cm33_core1" name="cdog_cm33_core1" brief="The CDOG Example project is a demonstration program that uses the KSDK software to show funcionality of Code Watchdog Timer." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/mimxrt700evk/driver_examples/cdog/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/cdog/cm33_core1" type="xml">
            <files mask="cdog_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_crc_cm33_core0" name="crc_cm33_core0" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/crc" path="examples/mimxrt700evk/driver_examples/crc/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/crc/cm33_core0" type="xml">
            <files mask="crc_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_i2c_int_lpi2c_xfer_cm33_core0" name="flexio_i2c_int_lpi2c_xfer_cm33_core0" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/i2c/interrupt_lpi2c_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/i2c/interrupt_lpi2c_transfer/cm33_core0" type="xml">
            <files mask="flexio_i2c_int_lpi2c_xfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_spi_polling_lpspi_transfer_master_cm33_core0" name="flexio_spi_polling_lpspi_transfer_master_cm33_core0" brief="The flexio_spi_master_pooling_lpspi_slave example shows how to use flexio spi master driver in polling way. In this example, a flexio simulated master connect to a lpspi slave." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/spi/polling_lpspi_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/spi/polling_lpspi_transfer/master/cm33_core0" type="xml">
            <files mask="flexio_spi_polling_lpspi_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_polling_seven_bits_cm33_core0" name="lpuart_polling_seven_bits_cm33_core0" brief="The lpuart_polling_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console instantly.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/polling_seven_bits/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/polling_seven_bits/cm33_core0" type="xml">
            <files mask="lpuart_polling_seven_bits_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpuart_edma_transfer_cm33_core0" name="cmsis_lpuart_edma_transfer_cm33_core0" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpuart" path="examples/mimxrt700evk/cmsis_driver_examples/lpuart/edma_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpuart/edma_transfer/cm33_core0" type="xml">
            <files mask="cmsis_lpuart_edma_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_xspi_psram_edma_transfer_cm33_core0" name="xspi_psram_edma_transfer_cm33_core0" brief="The xspi_psram_edma_transfer example shows how to use xspi driver with edma. In this example, xspi will send data and operate the external PSRAM connected with XSPI. Some simple flash command will be executed, such as Read Data and Write Data.Example will write/read through the whole chip, through IP command and AHB command." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/xspi" path="examples/mimxrt700evk/driver_examples/xspi/psram/edma_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/xspi/psram/edma_transfer/cm33_core0" type="xml">
            <files mask="xspi_psram_edma_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_mu_interrupt_core0" name="mu_interrupt_core0" brief="The mu_interrupt example shows how to use MU driver in interrupt way:In this example:1. Core 0 send message to Core 1 in interrupt mode via MU module.2. Core 1 send message back to Core 0 in interrupt mode.3. Core 0 receive message sent from Core 1 in interrupt mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mu" linked_projects="mimxrt700evk_mu_interrupt_core1" path="examples/mimxrt700evk/driver_examples/mu/interrupt/core0">
          <external path="examples/mimxrt700evk/driver_examples/mu/interrupt/core0" type="xml">
            <files mask="mu_interrupt_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lcdif_rgb565" name="lcdif_rgb565" brief="This example demonstrates how to use the LCDIF driver to show the RGB565 format frame buffer. When the example runs, a rectangle is moving in the screen, and its color changes when touch border." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/mimxrt700evk/driver_examples/lcdif/rgb565/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lcdif/rgb565/cm33_core0" type="xml">
            <files mask="lcdif_rgb565_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_sema42_cm33_core0" name="dsp_sema42_cm33_core0" brief="The dsp_sema42 demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" linked_projects="mimxrt700evk_dsp_sema42_cm33_core1" path="examples/mimxrt700evk/dsp_examples/sema42/cm33_core0">
          <external path="examples/mimxrt700evk/dsp_examples/sema42/cm33_core0" type="xml">
            <files mask="dsp_sema42_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_power_mode_switch_cm33_core1" name="power_mode_switch_cm33_core1" brief="The power_mode_switch application shows the usage of normal power mode control APIs for entering the low power mode: Sleep mode, Deep Sleep mode, Deep Sleep Retention mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low powermode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions. 1. Configure all pins as GPIO with pull-up resistor disabled in the IOCON block. 2. Configure GPIO pins as outputs using the GPIO DIR register. 3. Write 1 to the GPIO CLR register to drive the outputs LOW. 4. All peripherals disabled." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/mimxrt700evk/demo_apps/power_mode_switch/cm33_core1">
          <external path="examples/mimxrt700evk/demo_apps/power_mode_switch/cm33_core1" type="xml">
            <files mask="power_mode_switch_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_polling_cm33_core1" name="lpuart_polling_cm33_core1" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/polling/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/polling/cm33_core1" type="xml">
            <files mask="lpuart_polling_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_i3c_polling_b2b_transfer_slave_cm33_core1" name="i3c_polling_b2b_transfer_slave_cm33_core1" brief="The i3c_polling_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a polling master. In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/mimxrt700evk/driver_examples/i3c/polling_b2b_transfer/slave/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/i3c/polling_b2b_transfer/slave/cm33_core1" type="xml">
            <files mask="i3c_polling_b2b_transfer_slave_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_gdet_cm33_core1" name="gdet_cm33_core1" brief="The GDET Example project is a demonstration program that uses the MCUX SDK software to show funcionality of Glitch Detect (GDET) module." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gdet" path="examples/mimxrt700evk/driver_examples/gdet/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/gdet/cm33_core1" type="xml">
            <files mask="gdet_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ctimer_pwm_example_cm33_core0" name="ctimer_pwm_example_cm33_core0" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, CTimer is used to generate a PWM signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/mimxrt700evk/driver_examples/ctimer/simple_pwm/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/ctimer/simple_pwm/cm33_core0" type="xml">
            <files mask="ctimer_pwm_example_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_uart_polling_transfer_cm33_core0" name="flexio_uart_polling_transfer_cm33_core0" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/uart/polling_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/uart/polling_transfer/cm33_core0" type="xml">
            <files mask="flexio_uart_polling_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_gpio_input_interrupt_cm33_core0" name="gpio_input_interrupt_cm33_core0" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/mimxrt700evk/driver_examples/gpio/input_interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/gpio/input_interrupt/cm33_core0" type="xml">
            <files mask="gpio_input_interrupt_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpi2c_polling_b2b_master_cm33_core0" name="lpi2c_polling_b2b_master_cm33_core0" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mimxrt700evk/driver_examples/lpi2c/polling_b2b/master/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpi2c/polling_b2b/master/cm33_core0" type="xml">
            <files mask="lpi2c_polling_b2b_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpi2c_int_b2b_transfer_master_cm33_core0" name="cmsis_lpi2c_int_b2b_transfer_master_cm33_core0" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="examples/mimxrt700evk/cmsis_driver_examples/lpi2c/int_b2b_transfer/master/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpi2c/int_b2b_transfer/master/cm33_core0" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_master_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_sctimer_16bit_counter" name="sctimer_16bit_counter" brief="The SCTimer 16-bit counter project is a demonstration program of the SDK SCTimer driver operation when using the SCTimer counteras two 16-bit counters.The example toggles an output per counter when a match occurs." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/mimxrt700evk/driver_examples/sctimer/16bit_counter/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/sctimer/16bit_counter/cm33_core0" type="xml">
            <files mask="sctimer_16bit_counter_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pdm_sai_edma_cm33_core0" name="pdm_sai_edma_cm33_core0" brief="The pdm_sai_sdma example shows how to use pdm edma driver together with sai edma driver" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdm" path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_edma/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pdm/pdm_sai_edma/cm33_core0" type="xml">
            <files mask="pdm_sai_edma_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lcdif_dbi_rgb565" name="lcdif_dbi_rgb565" brief="This example demonstrates how to use the LCDIF driver to show the dbi_rgb565 format frame buffer. When the example runs, a rectangle is moving in the screen, and its color changes when touch border." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/mimxrt700evk/driver_examples/lcdif/dbi_rgb565/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lcdif/dbi_rgb565/cm33_core0" type="xml">
            <files mask="lcdif_dbi_rgb565_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_power_manager_test_bm_cm33_core1" name="power_manager_test_bm_cm33_core1" brief="The power manager test application demonstrates the basic usage of power manager framework without RTOS. The demo tests all features of power manager framework, including notification manager, wakeup source manager and so on." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/mimxrt700evk/demo_apps/power_manager_test/bm/cm33_core1">
          <external path="examples/mimxrt700evk/demo_apps/power_manager_test/bm/cm33_core1" type="xml">
            <files mask="power_manager_test_bm_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_interrupt_cm33_core1" name="lpuart_interrupt_cm33_core1" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/interrupt/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/interrupt/cm33_core1" type="xml">
            <files mask="lpuart_interrupt_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_i3c_edma_b2b_transfer_master_cm33_core1" name="i3c_edma_b2b_transfer_master_cm33_core1" brief="The i3c_edma_b2b_transfer_master example shows how to use i3c driver as slave to do board to board transfer with EDMA. In this example, one i3c instance as master and another i3c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/mimxrt700evk/driver_examples/i3c/edma_b2b_transfer/master/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/i3c/edma_b2b_transfer/master/cm33_core1" type="xml">
            <files mask="i3c_edma_b2b_transfer_master_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ctimer_pwm_interrupt_example_cm33_core0" name="ctimer_pwm_interrupt_example_cm33_core0" brief="The Simple PWM Interrupt project is to demonstrate usage of the SDK CTimer driver as a PWM with interrupt callback functionsIn this example an IO pin connected to the LED is used as a PWM output line to generate a PWM signal.With an interrupt callback the PWM duty cycle is changed frequently in such a way that the LED brightness can be varied." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/mimxrt700evk/driver_examples/ctimer/simple_pwm_interrupt/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/ctimer/simple_pwm_interrupt/cm33_core0" type="xml">
            <files mask="ctimer_pwm_interrupt_example_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_flexio_uart_edma_transfer_cm33_core0" name="flexio_uart_edma_transfer_cm33_core0" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/mimxrt700evk/driver_examples/flexio/uart/edma_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/flexio/uart/edma_transfer/cm33_core0" type="xml">
            <files mask="flexio_uart_edma_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_gpio_led_output_cm33_core0" name="gpio_led_output_cm33_core0" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/mimxrt700evk/driver_examples/gpio/led_output/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/gpio/led_output/cm33_core0" type="xml">
            <files mask="gpio_led_output_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpi2c_polling_b2b_slave_cm33_core0" name="lpi2c_polling_b2b_slave_cm33_core0" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mimxrt700evk/driver_examples/lpi2c/polling_b2b/slave/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lpi2c/polling_b2b/slave/cm33_core0" type="xml">
            <files mask="lpi2c_polling_b2b_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_cmsis_lpi2c_int_b2b_transfer_slave_cm33_core0" name="cmsis_lpi2c_int_b2b_transfer_slave_cm33_core0" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="cmsis_driver_examples/lpi2c" path="examples/mimxrt700evk/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave/cm33_core0">
          <external path="examples/mimxrt700evk/cmsis_driver_examples/lpi2c/int_b2b_transfer/slave/cm33_core0" type="xml">
            <files mask="cmsis_lpi2c_int_b2b_transfer_slave_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_syspm_cm33_core0" name="syspm_cm33_core0" brief="The System Performance Monitor (SYSPM) is a memory mapped peripheral that enables the user to monitor system and/or CPU events. This demo project obtains the event count value through the system performance monitor, and prints three values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/syspm" path="examples/mimxrt700evk/driver_examples/syspm/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/syspm/cm33_core0" type="xml">
            <files mask="syspm_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_pdm_edma_transfer_cm33_core0" name="pdm_edma_transfer_cm33_core0" brief="pdm_edma_transfer" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdm" path="examples/mimxrt700evk/driver_examples/pdm/pdm_edma_transfer/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/pdm/pdm_edma_transfer/cm33_core0" type="xml">
            <files mask="pdm_edma_transfer_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lcdif_porter_duff" name="lcdif_porter_duff" brief="This example demonstrates how to use the LCDIF alpha blend function to perform the Porter Duff compositing. In this example, a blue rectangle is in the top left corner of the video/graphic layer as destination surface, a red rectangle is in the bottom right of the overlay layer0 as source surface. Every Porter Duff mode result is shown for 2 seconds, then switch to the next mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/mimxrt700evk/driver_examples/lcdif/porter_duff/cm33_core0">
          <external path="examples/mimxrt700evk/driver_examples/lcdif/porter_duff/cm33_core0" type="xml">
            <files mask="lcdif_porter_duff_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_dsp_audio_demo_bm_cm33_core0" name="dsp_audio_demo_bm_cm33_core0" brief="The dsp_audio_demo_bm demo application demonstrates starting DSP core with DSP image." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="dsp_examples" path="examples/mimxrt700evk/dsp_examples/audio_demo_bm/cm33_core0">
          <external path="examples/mimxrt700evk/dsp_examples/audio_demo_bm/cm33_core0" type="xml">
            <files mask="dsp_audio_demo_bm_cm33_core0_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_ctimer_pwm_example_cm33_core1" name="ctimer_pwm_example_cm33_core1" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, CTimer is used to generate a PWM signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/mimxrt700evk/driver_examples/ctimer/simple_pwm/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/ctimer/simple_pwm/cm33_core1" type="xml">
            <files mask="ctimer_pwm_example_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_lpuart_edma_transfer_cm33_core1" name="lpuart_edma_transfer_cm33_core1" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mimxrt700evk/driver_examples/lpuart/edma_transfer/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/lpuart/edma_transfer/cm33_core1" type="xml">
            <files mask="lpuart_edma_transfer_cm33_core1_v3_14.xml"/>
          </external>
        </example>
        <example id="mimxrt700evk_i3c_edma_b2b_transfer_slave_cm33_core1" name="i3c_edma_b2b_transfer_slave_cm33_core1" brief="The i3c_edma_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with EDMA. In this example, one i3c instance as slave and another i3c instance on the other board as master. Slave sends a piece of data to master, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/mimxrt700evk/driver_examples/i3c/edma_b2b_transfer/slave/cm33_core1">
          <external path="examples/mimxrt700evk/driver_examples/i3c/edma_b2b_transfer/slave/cm33_core1" type="xml">
            <files mask="i3c_edma_b2b_transfer_slave_cm33_core1_v3_14.xml"/>
          </external>
        </example>
      </examples>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <drivers>
            <driver id_refs="OCTAL_FLASH_mimxrt700evk">
              <driverBinary path="core/devices/MIMXRT798S/mcuxpresso" type="binary">
                <files mask="MIMXRT700_XSPI0_Octal.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
    </board>
  </boards>
  <devices>
    <device id="MIMXRT798S" name="MIMXRT798S" version="1.0.0" full_name="MIMXRT798S" family="MIMXRT700" platform="i.MX">
      <description>i.MX RT700</description>
      <metadataSet>
        <metadata key="vendor.device.multicore" value="true"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <defines>
        <define name="CPU_$|package|" value=""/>
        <define name="CPU_$|package|_$|core|" value=""/>
        <define name="CPU_$|package|_$|core_name|" value=""/>
      </defines>
      <core id="cm33_core0_MIMXRT798S" name="cm33_core0" fpu="true" type="cm33" boot_role="primary" dsp="true">
        <metadataSet>
          <metadata key="compatible_device.segger" value="MIMXRT798S_M33_0"/>
          <metadata key="compatible_device.pemicro" value="MIMXRT798S_M33_0"/>
        </metadataSet>
        <debug_configurations>
          <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
            <params>
              <params id="misc.options.MIMXRT798S.core_cm33_core0.MIMXRT798S" name="misc.options" value="--cachelib libahb_xcache.so"/>
            </params>
          </debug_configuration>
        </debug_configurations>
      </core>
      <core id="cm33_core1_MIMXRT798S" name="cm33_core1" fpu="true" type="cm33" slave_roles="M33SLAVE" boot_role="secondary" dsp="true">
        <metadataSet>
          <metadata key="compatible_device.segger" value="MIMXRT798S_M33_1"/>
          <metadata key="compatible_device.pemicro" value="MIMXRT798S_M33_1"/>
        </metadataSet>
        <debug_configurations>
          <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
            <params>
              <params id="internal.core.index.MIMXRT798S.core_cm33_core1.MIMXRT798S" name="internal.core.index" value="1"/>
            </params>
          </debug_configuration>
        </debug_configurations>
      </core>
      <memory>
        <memoryBlock id="SRAM_CMPT_MIMXRT798S" name="SRAM_CMPT" addr="00080000" size="00280000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_SHARED_MIMXRT798S" name="SRAM_SHARED" addr="00000000" size="00080000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_HIFI4_MIMXRT798S" name="SRAM_HIFI4" addr="00300000" size="00280000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_SENSE_MIMXRT798S" name="SRAM_SENSE" addr="00580000" size="00100000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_HIFI1_MIMXRT798S" name="SRAM_HIFI1" addr="00680000" size="00100000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="7680"/>
      <package id="MIMXRT798SGFOA" name="MIMXRT798SGFOA"/>
      <package id="MIMXRT798SGAWAR" name="MIMXRT798SGAWAR"/>
      <evaluation_boards>
        <evaluation_board name="fpga_rt700"/>
        <evaluation_board name="mimxrt700evk"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MIMXRT798S" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MIMXRT798S" name="internal.has_swo" value="true"/>
            <params id="misc.options.MIMXRT798S" name="misc.options" value="--bootromstall 0x50002094"/>
            <params id="internal.connect.script.debug.mcuxpresso.MIMXRT798S" name="internal.connect.script" value="RT700_connect.scp"/>
            <params id="internal.connect.reset.debug.mcuxpresso.MIMXRT798S" name="internal.reset.script" value="RT700_reset.scp"/>
          </params>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.mimxrt700evk.MIMXRT798S" name="mimxrt700evk" brief="Board_project_template mimxrt700evk" version="1.0.0" full_name="Board_project_template mimxrt700evk" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/mimxrt700evk/project_template" project_base_path="board">
      <defines>
        <define name="FSL_SDK_DRIVER_QUICK_ACCESS_ENABLE" value="1"/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MIMXRT798S"/>
              <component_dependency value="platform.utilities.assert.MIMXRT798S"/>
              <component_dependency value="component.serial_manager.MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="utility.debug_console_lite.MIMXRT798S"/>
              <component_dependency value="platform.utilities.assert_lite.MIMXRT798S"/>
            </all>
          </any_of>
          <any_of>
            <all>
              <component_dependency value="platform.drivers.xspi.MIMXRT798S"/>
              <component_dependency value="platform.drivers.cache_xcache.MIMXRT798S"/>
              <component_dependency value="platform.drivers.flash_config.mimxrt700evk.MIMXRT798S"/>
              <component_dependency value="platform.drivers.power.MIMXRT798S"/>
              <device_core_dependency value="cm33_core0_MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="platform.drivers.power.MIMXRT798S"/>
              <device_core_dependency value="cm33_core1_MIMXRT798S"/>
            </all>
          </any_of>
          <component_dependency value="platform.drivers.lpflexcomm.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpuart.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpc_iopctl.MIMXRT798S"/>
          <component_dependency value="platform.drivers.gpio.MIMXRT798S"/>
          <component_dependency value="platform.drivers.reset.MIMXRT798S"/>
          <component_dependency value="device.MIMXRT798S_startup.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.clock.MIMXRT798S"/>
          <component_dependency value="platform.drivers.glikey.MIMXRT798S"/>
          <board_dependency value="mimxrt700evk"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="board.h"/>
      </source>
      <source relative_path="./" config="true" type="src">
        <files mask="board.c"/>
      </source>
      <source relative_path="./cm33_core0" project_relative_path="./" config="true" type="c_include" device_cores="cm33_core0_MIMXRT798S">
        <files mask="clock_config.h"/>
      </source>
      <source relative_path="./cm33_core0" project_relative_path="./" config="true" type="src" device_cores="cm33_core0_MIMXRT798S">
        <files mask="clock_config.c"/>
      </source>
      <source relative_path="./cm33_core1" project_relative_path="./" config="true" type="c_include" device_cores="cm33_core1_MIMXRT798S">
        <files mask="clock_config.h"/>
      </source>
      <source relative_path="./cm33_core1" project_relative_path="./" config="true" type="src" device_cores="cm33_core1_MIMXRT798S">
        <files mask="clock_config.c"/>
      </source>
      <source relative_path="cm33_core0" project_relative_path="./" config="true" type="c_include" device_cores="cm33_core0_MIMXRT798S">
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="cm33_core0" project_relative_path="./" config="true" type="src" device_cores="cm33_core0_MIMXRT798S">
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source relative_path="cm33_core1" project_relative_path="./" config="true" type="c_include" device_cores="cm33_core1_MIMXRT798S">
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="cm33_core1" project_relative_path="./" config="true" type="src" device_cores="cm33_core1_MIMXRT798S">
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="BOARD_Project_Template_mimxrt700evk.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="cm33_core0" project_relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S"/>
        <include_path relative_path="cm33_core1" project_relative_path="./" type="c_include" device_cores="cm33_core1_MIMXRT798S"/>
        <include_path relative_path="cm33_core1" project_relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S"/>
        <include_path relative_path="ezhv" project_relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S"/>
        <include_path relative_path="hifi1" project_relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S"/>
        <include_path relative_path="hifi4" project_relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flash_config.mimxrt700evk.MIMXRT798S" name="flash_config" brief="flash config block" version="2.0.0" full_name="Flash config" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/boards/mimxrt700evk/flash_config" project_base_path="flash_config">
      <defines>
        <define name="BOOT_HEADER_ENABLE" value="1"/>
      </defines>
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="flash_config.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="flash_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flash_config_mimxrt700evk.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.MIMXRT798S_debugger.MIMXRT798S" name="Device MIMXRT798S_debugger" brief="Device MIMXRT798S_debugger" version="1.0.0" full_name="Device MIMXRT798S_debugger" category="Board Support/SDK Project Template" user_visible="true" type="debugger" package_base_path="svd/MIMXRT798S" project_base_path="svd">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="xml" device_cores="cm33_core0_MIMXRT798S">
        <files mask="MIMXRT798S_cm33_core0.xml"/>
      </source>
      <source relative_path="./" type="xml" device_cores="cm33_core1_MIMXRT798S">
        <files mask="MIMXRT798S_cm33_core1.xml"/>
      </source>
    </component>
    <component id="utility.incbin.MIMXRT798S" name="incbin" brief="Used to include slave core binary into master core binary." version="1.0.0" full_name="utility incbin" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="asm_include">
        <files mask="fsl_incbin.S"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_incbin.MIMXRT798S.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.baremetal.MIMXRT798S" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" category="Device/SDK Utilities" user_visible="true" type="OS" package_base_path="middleware/bm" project_base_path="middleware/bm">
      <defines>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="middleware_baremetal.MIMXRT798S.cmake" hidden="true"/>
      </source>
    </component>
    <component id="tools.MIMXRT798S" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" category="Device/SDK Utilities" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="xclang.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
        <files mask="mcux_config.cmake"/>
        <files mask="riscvllvm.cmake"/>
      </source>
    </component>
    <component id="CMSIS_Include_core_cm.MIMXRT798S" name="CMSIS_Include_CM" brief="CMSIS-CORE for Cortex-M, ARMv8-M, ARMv8.1-M" version="5.9.0" full_name="CMSIS Include For Cortex-M, ARMv8-M, ARMv8.1-M" category="CMSIS/CORE" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Core/Include" project_base_path="CMSIS">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source compiler="compiler_gcc" relative_path="./" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_version.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S cm33_core1_MIMXRT798S">
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Include_core_cm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <!--<component id="container.CMSIS_all_files.MIMXRT798S" name="MIMXRT798S" version="1.0.0" package_base_path="core/CMSIS" project_base_path="./">
  <source relative_path="./" type="src">
    <files mask="Driver_CAN.c"/>
    <files mask="Driver_ETH_MAC.c"/>
    <files mask="Driver_ETH_PHY.c"/>
    <files mask="Driver_Flash.c"/>
    <files mask="Driver_I2C.c"/>
    <files mask="Driver_MCI.c"/>
    <files mask="Driver_NAND.c"/>
    <files mask="Driver_SAI.c"/>
    <files mask="Driver_SPI.c"/>
    <files mask="Driver_Storage.c"/>
    <files mask="Driver_USART.c"/>
    <files mask="Driver_USBD.c"/>
    <files mask="Driver_USBH.c"/>
    <files mask="Driver_WiFi.c"/>
    <files mask="vio.c"/>
    <files mask="vio_memory.c"/>
    <files mask="BasicMathFunctions.c"/>
    <files mask="BasicMathFunctionsF16.c"/>
    <files mask="arm_abs_f16.c"/>
    <files mask="arm_abs_f32.c"/>
    <files mask="arm_abs_f64.c"/>
    <files mask="arm_abs_q15.c"/>
    <files mask="arm_abs_q31.c"/>
    <files mask="arm_abs_q7.c"/>
    <files mask="arm_add_f16.c"/>
    <files mask="arm_add_f32.c"/>
    <files mask="arm_add_f64.c"/>
    <files mask="arm_add_q15.c"/>
    <files mask="arm_add_q31.c"/>
    <files mask="arm_add_q7.c"/>
    <files mask="arm_and_u16.c"/>
    <files mask="arm_and_u32.c"/>
    <files mask="arm_and_u8.c"/>
    <files mask="arm_clip_f16.c"/>
    <files mask="arm_clip_f32.c"/>
    <files mask="arm_clip_q15.c"/>
    <files mask="arm_clip_q31.c"/>
    <files mask="arm_clip_q7.c"/>
    <files mask="arm_dot_prod_f16.c"/>
    <files mask="arm_dot_prod_f32.c"/>
    <files mask="arm_dot_prod_f64.c"/>
    <files mask="arm_dot_prod_q15.c"/>
    <files mask="arm_dot_prod_q31.c"/>
    <files mask="arm_dot_prod_q7.c"/>
    <files mask="arm_mult_f16.c"/>
    <files mask="arm_mult_f32.c"/>
    <files mask="arm_mult_f64.c"/>
    <files mask="arm_mult_q15.c"/>
    <files mask="arm_mult_q31.c"/>
    <files mask="arm_mult_q7.c"/>
    <files mask="arm_negate_f16.c"/>
    <files mask="arm_negate_f32.c"/>
    <files mask="arm_negate_f64.c"/>
    <files mask="arm_negate_q15.c"/>
    <files mask="arm_negate_q31.c"/>
    <files mask="arm_negate_q7.c"/>
    <files mask="arm_not_u16.c"/>
    <files mask="arm_not_u32.c"/>
    <files mask="arm_not_u8.c"/>
    <files mask="arm_offset_f16.c"/>
    <files mask="arm_offset_f32.c"/>
    <files mask="arm_offset_f64.c"/>
    <files mask="arm_offset_q15.c"/>
    <files mask="arm_offset_q31.c"/>
    <files mask="arm_offset_q7.c"/>
    <files mask="arm_or_u16.c"/>
    <files mask="arm_or_u32.c"/>
    <files mask="arm_or_u8.c"/>
    <files mask="arm_scale_f16.c"/>
    <files mask="arm_scale_f32.c"/>
    <files mask="arm_scale_f64.c"/>
    <files mask="arm_scale_q15.c"/>
    <files mask="arm_scale_q31.c"/>
    <files mask="arm_scale_q7.c"/>
    <files mask="arm_shift_q15.c"/>
    <files mask="arm_shift_q31.c"/>
    <files mask="arm_shift_q7.c"/>
    <files mask="arm_sub_f16.c"/>
    <files mask="arm_sub_f32.c"/>
    <files mask="arm_sub_f64.c"/>
    <files mask="arm_sub_q15.c"/>
    <files mask="arm_sub_q31.c"/>
    <files mask="arm_sub_q7.c"/>
    <files mask="arm_xor_u16.c"/>
    <files mask="arm_xor_u32.c"/>
    <files mask="arm_xor_u8.c"/>
    <files mask="BayesFunctions.c"/>
    <files mask="BayesFunctionsF16.c"/>
    <files mask="arm_gaussian_naive_bayes_predict_f16.c"/>
    <files mask="arm_gaussian_naive_bayes_predict_f32.c"/>
    <files mask="CommonTables.c"/>
    <files mask="CommonTablesF16.c"/>
    <files mask="arm_common_tables.c"/>
    <files mask="arm_common_tables_f16.c"/>
    <files mask="arm_const_structs.c"/>
    <files mask="arm_const_structs_f16.c"/>
    <files mask="arm_mve_tables.c"/>
    <files mask="arm_mve_tables_f16.c"/>
    <files mask="ComplexMathFunctions.c"/>
    <files mask="ComplexMathFunctionsF16.c"/>
    <files mask="arm_cmplx_conj_f16.c"/>
    <files mask="arm_cmplx_conj_f32.c"/>
    <files mask="arm_cmplx_conj_q15.c"/>
    <files mask="arm_cmplx_conj_q31.c"/>
    <files mask="arm_cmplx_dot_prod_f16.c"/>
    <files mask="arm_cmplx_dot_prod_f32.c"/>
    <files mask="arm_cmplx_dot_prod_q15.c"/>
    <files mask="arm_cmplx_dot_prod_q31.c"/>
    <files mask="arm_cmplx_mag_f16.c"/>
    <files mask="arm_cmplx_mag_f32.c"/>
    <files mask="arm_cmplx_mag_f64.c"/>
    <files mask="arm_cmplx_mag_fast_q15.c"/>
    <files mask="arm_cmplx_mag_q15.c"/>
    <files mask="arm_cmplx_mag_q31.c"/>
    <files mask="arm_cmplx_mag_squared_f16.c"/>
    <files mask="arm_cmplx_mag_squared_f32.c"/>
    <files mask="arm_cmplx_mag_squared_f64.c"/>
    <files mask="arm_cmplx_mag_squared_q15.c"/>
    <files mask="arm_cmplx_mag_squared_q31.c"/>
    <files mask="arm_cmplx_mult_cmplx_f16.c"/>
    <files mask="arm_cmplx_mult_cmplx_f32.c"/>
    <files mask="arm_cmplx_mult_cmplx_f64.c"/>
    <files mask="arm_cmplx_mult_cmplx_q15.c"/>
    <files mask="arm_cmplx_mult_cmplx_q31.c"/>
    <files mask="arm_cmplx_mult_real_f16.c"/>
    <files mask="arm_cmplx_mult_real_f32.c"/>
    <files mask="arm_cmplx_mult_real_q15.c"/>
    <files mask="arm_cmplx_mult_real_q31.c"/>
    <files mask="ControllerFunctions.c"/>
    <files mask="arm_pid_init_f32.c"/>
    <files mask="arm_pid_init_q15.c"/>
    <files mask="arm_pid_init_q31.c"/>
    <files mask="arm_pid_reset_f32.c"/>
    <files mask="arm_pid_reset_q15.c"/>
    <files mask="arm_pid_reset_q31.c"/>
    <files mask="arm_sin_cos_f32.c"/>
    <files mask="arm_sin_cos_q31.c"/>
    <files mask="DistanceFunctions.c"/>
    <files mask="DistanceFunctionsF16.c"/>
    <files mask="arm_boolean_distance.c"/>
    <files mask="arm_braycurtis_distance_f16.c"/>
    <files mask="arm_braycurtis_distance_f32.c"/>
    <files mask="arm_canberra_distance_f16.c"/>
    <files mask="arm_canberra_distance_f32.c"/>
    <files mask="arm_chebyshev_distance_f16.c"/>
    <files mask="arm_chebyshev_distance_f32.c"/>
    <files mask="arm_chebyshev_distance_f64.c"/>
    <files mask="arm_cityblock_distance_f16.c"/>
    <files mask="arm_cityblock_distance_f32.c"/>
    <files mask="arm_cityblock_distance_f64.c"/>
    <files mask="arm_correlation_distance_f16.c"/>
    <files mask="arm_correlation_distance_f32.c"/>
    <files mask="arm_cosine_distance_f16.c"/>
    <files mask="arm_cosine_distance_f32.c"/>
    <files mask="arm_cosine_distance_f64.c"/>
    <files mask="arm_dice_distance.c"/>
    <files mask="arm_dtw_distance_f32.c"/>
    <files mask="arm_dtw_init_window_q7.c"/>
    <files mask="arm_dtw_path_f32.c"/>
    <files mask="arm_euclidean_distance_f16.c"/>
    <files mask="arm_euclidean_distance_f32.c"/>
    <files mask="arm_euclidean_distance_f64.c"/>
    <files mask="arm_hamming_distance.c"/>
    <files mask="arm_jaccard_distance.c"/>
    <files mask="arm_jensenshannon_distance_f16.c"/>
    <files mask="arm_jensenshannon_distance_f32.c"/>
    <files mask="arm_kulsinski_distance.c"/>
    <files mask="arm_minkowski_distance_f16.c"/>
    <files mask="arm_minkowski_distance_f32.c"/>
    <files mask="arm_rogerstanimoto_distance.c"/>
    <files mask="arm_russellrao_distance.c"/>
    <files mask="arm_sokalmichener_distance.c"/>
    <files mask="arm_sokalsneath_distance.c"/>
    <files mask="arm_yule_distance.c"/>
    <files mask="FastMathFunctions.c"/>
    <files mask="FastMathFunctionsF16.c"/>
    <files mask="arm_atan2_f16.c"/>
    <files mask="arm_atan2_f32.c"/>
    <files mask="arm_atan2_q15.c"/>
    <files mask="arm_atan2_q31.c"/>
    <files mask="arm_cos_f32.c"/>
    <files mask="arm_cos_q15.c"/>
    <files mask="arm_cos_q31.c"/>
    <files mask="arm_divide_q15.c"/>
    <files mask="arm_divide_q31.c"/>
    <files mask="arm_sin_f32.c"/>
    <files mask="arm_sin_q15.c"/>
    <files mask="arm_sin_q31.c"/>
    <files mask="arm_sqrt_q15.c"/>
    <files mask="arm_sqrt_q31.c"/>
    <files mask="arm_vexp_f16.c"/>
    <files mask="arm_vexp_f32.c"/>
    <files mask="arm_vexp_f64.c"/>
    <files mask="arm_vinverse_f16.c"/>
    <files mask="arm_vlog_f16.c"/>
    <files mask="arm_vlog_f32.c"/>
    <files mask="arm_vlog_f64.c"/>
    <files mask="arm_vlog_q15.c"/>
    <files mask="arm_vlog_q31.c"/>
    <files mask="FilteringFunctions.c"/>
    <files mask="FilteringFunctionsF16.c"/>
    <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
    <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
    <files mask="arm_biquad_cascade_df1_f16.c"/>
    <files mask="arm_biquad_cascade_df1_f32.c"/>
    <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
    <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
    <files mask="arm_biquad_cascade_df1_init_f16.c"/>
    <files mask="arm_biquad_cascade_df1_init_f32.c"/>
    <files mask="arm_biquad_cascade_df1_init_q15.c"/>
    <files mask="arm_biquad_cascade_df1_init_q31.c"/>
    <files mask="arm_biquad_cascade_df1_q15.c"/>
    <files mask="arm_biquad_cascade_df1_q31.c"/>
    <files mask="arm_biquad_cascade_df2T_f16.c"/>
    <files mask="arm_biquad_cascade_df2T_f32.c"/>
    <files mask="arm_biquad_cascade_df2T_f64.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f16.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_f16.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_init_f16.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
    <files mask="arm_conv_f32.c"/>
    <files mask="arm_conv_fast_opt_q15.c"/>
    <files mask="arm_conv_fast_q15.c"/>
    <files mask="arm_conv_fast_q31.c"/>
    <files mask="arm_conv_opt_q15.c"/>
    <files mask="arm_conv_opt_q7.c"/>
    <files mask="arm_conv_partial_f32.c"/>
    <files mask="arm_conv_partial_fast_opt_q15.c"/>
    <files mask="arm_conv_partial_fast_q15.c"/>
    <files mask="arm_conv_partial_fast_q31.c"/>
    <files mask="arm_conv_partial_opt_q15.c"/>
    <files mask="arm_conv_partial_opt_q7.c"/>
    <files mask="arm_conv_partial_q15.c"/>
    <files mask="arm_conv_partial_q31.c"/>
    <files mask="arm_conv_partial_q7.c"/>
    <files mask="arm_conv_q15.c"/>
    <files mask="arm_conv_q31.c"/>
    <files mask="arm_conv_q7.c"/>
    <files mask="arm_correlate_f16.c"/>
    <files mask="arm_correlate_f32.c"/>
    <files mask="arm_correlate_f64.c"/>
    <files mask="arm_correlate_fast_opt_q15.c"/>
    <files mask="arm_correlate_fast_q15.c"/>
    <files mask="arm_correlate_fast_q31.c"/>
    <files mask="arm_correlate_opt_q15.c"/>
    <files mask="arm_correlate_opt_q7.c"/>
    <files mask="arm_correlate_q15.c"/>
    <files mask="arm_correlate_q31.c"/>
    <files mask="arm_correlate_q7.c"/>
    <files mask="arm_fir_decimate_f32.c"/>
    <files mask="arm_fir_decimate_fast_q15.c"/>
    <files mask="arm_fir_decimate_fast_q31.c"/>
    <files mask="arm_fir_decimate_init_f32.c"/>
    <files mask="arm_fir_decimate_init_q15.c"/>
    <files mask="arm_fir_decimate_init_q31.c"/>
    <files mask="arm_fir_decimate_q15.c"/>
    <files mask="arm_fir_decimate_q31.c"/>
    <files mask="arm_fir_f16.c"/>
    <files mask="arm_fir_f32.c"/>
    <files mask="arm_fir_f64.c"/>
    <files mask="arm_fir_fast_q15.c"/>
    <files mask="arm_fir_fast_q31.c"/>
    <files mask="arm_fir_init_f16.c"/>
    <files mask="arm_fir_init_f32.c"/>
    <files mask="arm_fir_init_f64.c"/>
    <files mask="arm_fir_init_q15.c"/>
    <files mask="arm_fir_init_q31.c"/>
    <files mask="arm_fir_init_q7.c"/>
    <files mask="arm_fir_interpolate_f32.c"/>
    <files mask="arm_fir_interpolate_init_f32.c"/>
    <files mask="arm_fir_interpolate_init_q15.c"/>
    <files mask="arm_fir_interpolate_init_q31.c"/>
    <files mask="arm_fir_interpolate_q15.c"/>
    <files mask="arm_fir_interpolate_q31.c"/>
    <files mask="arm_fir_lattice_f32.c"/>
    <files mask="arm_fir_lattice_init_f32.c"/>
    <files mask="arm_fir_lattice_init_q15.c"/>
    <files mask="arm_fir_lattice_init_q31.c"/>
    <files mask="arm_fir_lattice_q15.c"/>
    <files mask="arm_fir_lattice_q31.c"/>
    <files mask="arm_fir_q15.c"/>
    <files mask="arm_fir_q31.c"/>
    <files mask="arm_fir_q7.c"/>
    <files mask="arm_fir_sparse_f32.c"/>
    <files mask="arm_fir_sparse_init_f32.c"/>
    <files mask="arm_fir_sparse_init_q15.c"/>
    <files mask="arm_fir_sparse_init_q31.c"/>
    <files mask="arm_fir_sparse_init_q7.c"/>
    <files mask="arm_fir_sparse_q15.c"/>
    <files mask="arm_fir_sparse_q31.c"/>
    <files mask="arm_fir_sparse_q7.c"/>
    <files mask="arm_iir_lattice_f32.c"/>
    <files mask="arm_iir_lattice_init_f32.c"/>
    <files mask="arm_iir_lattice_init_q15.c"/>
    <files mask="arm_iir_lattice_init_q31.c"/>
    <files mask="arm_iir_lattice_q15.c"/>
    <files mask="arm_iir_lattice_q31.c"/>
    <files mask="arm_levinson_durbin_f16.c"/>
    <files mask="arm_levinson_durbin_f32.c"/>
    <files mask="arm_levinson_durbin_q31.c"/>
    <files mask="arm_lms_f32.c"/>
    <files mask="arm_lms_init_f32.c"/>
    <files mask="arm_lms_init_q15.c"/>
    <files mask="arm_lms_init_q31.c"/>
    <files mask="arm_lms_norm_f32.c"/>
    <files mask="arm_lms_norm_init_f32.c"/>
    <files mask="arm_lms_norm_init_q15.c"/>
    <files mask="arm_lms_norm_init_q31.c"/>
    <files mask="arm_lms_norm_q15.c"/>
    <files mask="arm_lms_norm_q31.c"/>
    <files mask="arm_lms_q15.c"/>
    <files mask="arm_lms_q31.c"/>
    <files mask="InterpolationFunctions.c"/>
    <files mask="InterpolationFunctionsF16.c"/>
    <files mask="arm_bilinear_interp_f16.c"/>
    <files mask="arm_bilinear_interp_f32.c"/>
    <files mask="arm_bilinear_interp_q15.c"/>
    <files mask="arm_bilinear_interp_q31.c"/>
    <files mask="arm_bilinear_interp_q7.c"/>
    <files mask="arm_linear_interp_f16.c"/>
    <files mask="arm_linear_interp_f32.c"/>
    <files mask="arm_linear_interp_q15.c"/>
    <files mask="arm_linear_interp_q31.c"/>
    <files mask="arm_linear_interp_q7.c"/>
    <files mask="arm_spline_interp_f32.c"/>
    <files mask="arm_spline_interp_init_f32.c"/>
    <files mask="MatrixFunctions.c"/>
    <files mask="MatrixFunctionsF16.c"/>
    <files mask="arm_householder_f16.c"/>
    <files mask="arm_householder_f32.c"/>
    <files mask="arm_householder_f64.c"/>
    <files mask="arm_mat_add_f16.c"/>
    <files mask="arm_mat_add_f32.c"/>
    <files mask="arm_mat_add_q15.c"/>
    <files mask="arm_mat_add_q31.c"/>
    <files mask="arm_mat_cholesky_f16.c"/>
    <files mask="arm_mat_cholesky_f32.c"/>
    <files mask="arm_mat_cholesky_f64.c"/>
    <files mask="arm_mat_cmplx_mult_f16.c"/>
    <files mask="arm_mat_cmplx_mult_f32.c"/>
    <files mask="arm_mat_cmplx_mult_q15.c"/>
    <files mask="arm_mat_cmplx_mult_q31.c"/>
    <files mask="arm_mat_cmplx_trans_f16.c"/>
    <files mask="arm_mat_cmplx_trans_f32.c"/>
    <files mask="arm_mat_cmplx_trans_q15.c"/>
    <files mask="arm_mat_cmplx_trans_q31.c"/>
    <files mask="arm_mat_init_f16.c"/>
    <files mask="arm_mat_init_f32.c"/>
    <files mask="arm_mat_init_f64.c"/>
    <files mask="arm_mat_init_q15.c"/>
    <files mask="arm_mat_init_q31.c"/>
    <files mask="arm_mat_inverse_f16.c"/>
    <files mask="arm_mat_inverse_f32.c"/>
    <files mask="arm_mat_inverse_f64.c"/>
    <files mask="arm_mat_ldlt_f32.c"/>
    <files mask="arm_mat_ldlt_f64.c"/>
    <files mask="arm_mat_mult_f16.c"/>
    <files mask="arm_mat_mult_f32.c"/>
    <files mask="arm_mat_mult_f64.c"/>
    <files mask="arm_mat_mult_fast_q15.c"/>
    <files mask="arm_mat_mult_fast_q31.c"/>
    <files mask="arm_mat_mult_opt_q31.c"/>
    <files mask="arm_mat_mult_q15.c"/>
    <files mask="arm_mat_mult_q31.c"/>
    <files mask="arm_mat_mult_q7.c"/>
    <files mask="arm_mat_qr_f16.c"/>
    <files mask="arm_mat_qr_f32.c"/>
    <files mask="arm_mat_qr_f64.c"/>
    <files mask="arm_mat_scale_f16.c"/>
    <files mask="arm_mat_scale_f32.c"/>
    <files mask="arm_mat_scale_q15.c"/>
    <files mask="arm_mat_scale_q31.c"/>
    <files mask="arm_mat_solve_lower_triangular_f16.c"/>
    <files mask="arm_mat_solve_lower_triangular_f32.c"/>
    <files mask="arm_mat_solve_lower_triangular_f64.c"/>
    <files mask="arm_mat_solve_upper_triangular_f16.c"/>
    <files mask="arm_mat_solve_upper_triangular_f32.c"/>
    <files mask="arm_mat_solve_upper_triangular_f64.c"/>
    <files mask="arm_mat_sub_f16.c"/>
    <files mask="arm_mat_sub_f32.c"/>
    <files mask="arm_mat_sub_f64.c"/>
    <files mask="arm_mat_sub_q15.c"/>
    <files mask="arm_mat_sub_q31.c"/>
    <files mask="arm_mat_trans_f16.c"/>
    <files mask="arm_mat_trans_f32.c"/>
    <files mask="arm_mat_trans_f64.c"/>
    <files mask="arm_mat_trans_q15.c"/>
    <files mask="arm_mat_trans_q31.c"/>
    <files mask="arm_mat_trans_q7.c"/>
    <files mask="arm_mat_vec_mult_f16.c"/>
    <files mask="arm_mat_vec_mult_f32.c"/>
    <files mask="arm_mat_vec_mult_q15.c"/>
    <files mask="arm_mat_vec_mult_q31.c"/>
    <files mask="arm_mat_vec_mult_q7.c"/>
    <files mask="QuaternionMathFunctions.c"/>
    <files mask="arm_quaternion2rotation_f32.c"/>
    <files mask="arm_quaternion_conjugate_f32.c"/>
    <files mask="arm_quaternion_inverse_f32.c"/>
    <files mask="arm_quaternion_norm_f32.c"/>
    <files mask="arm_quaternion_normalize_f32.c"/>
    <files mask="arm_quaternion_product_f32.c"/>
    <files mask="arm_quaternion_product_single_f32.c"/>
    <files mask="arm_rotation2quaternion_f32.c"/>
    <files mask="SVMFunctions.c"/>
    <files mask="SVMFunctionsF16.c"/>
    <files mask="arm_svm_linear_init_f16.c"/>
    <files mask="arm_svm_linear_init_f32.c"/>
    <files mask="arm_svm_linear_predict_f16.c"/>
    <files mask="arm_svm_linear_predict_f32.c"/>
    <files mask="arm_svm_polynomial_init_f16.c"/>
    <files mask="arm_svm_polynomial_init_f32.c"/>
    <files mask="arm_svm_polynomial_predict_f16.c"/>
    <files mask="arm_svm_polynomial_predict_f32.c"/>
    <files mask="arm_svm_rbf_init_f16.c"/>
    <files mask="arm_svm_rbf_init_f32.c"/>
    <files mask="arm_svm_rbf_predict_f16.c"/>
    <files mask="arm_svm_rbf_predict_f32.c"/>
    <files mask="arm_svm_sigmoid_init_f16.c"/>
    <files mask="arm_svm_sigmoid_init_f32.c"/>
    <files mask="arm_svm_sigmoid_predict_f16.c"/>
    <files mask="arm_svm_sigmoid_predict_f32.c"/>
    <files mask="StatisticsFunctions.c"/>
    <files mask="StatisticsFunctionsF16.c"/>
    <files mask="arm_absmax_f16.c"/>
    <files mask="arm_absmax_f32.c"/>
    <files mask="arm_absmax_f64.c"/>
    <files mask="arm_absmax_no_idx_f16.c"/>
    <files mask="arm_absmax_no_idx_f32.c"/>
    <files mask="arm_absmax_no_idx_f64.c"/>
    <files mask="arm_absmax_no_idx_q15.c"/>
    <files mask="arm_absmax_no_idx_q31.c"/>
    <files mask="arm_absmax_no_idx_q7.c"/>
    <files mask="arm_absmax_q15.c"/>
    <files mask="arm_absmax_q31.c"/>
    <files mask="arm_absmax_q7.c"/>
    <files mask="arm_absmin_f16.c"/>
    <files mask="arm_absmin_f32.c"/>
    <files mask="arm_absmin_f64.c"/>
    <files mask="arm_absmin_no_idx_f16.c"/>
    <files mask="arm_absmin_no_idx_f32.c"/>
    <files mask="arm_absmin_no_idx_f64.c"/>
    <files mask="arm_absmin_no_idx_q15.c"/>
    <files mask="arm_absmin_no_idx_q31.c"/>
    <files mask="arm_absmin_no_idx_q7.c"/>
    <files mask="arm_absmin_q15.c"/>
    <files mask="arm_absmin_q31.c"/>
    <files mask="arm_absmin_q7.c"/>
    <files mask="arm_accumulate_f16.c"/>
    <files mask="arm_accumulate_f32.c"/>
    <files mask="arm_accumulate_f64.c"/>
    <files mask="arm_entropy_f16.c"/>
    <files mask="arm_entropy_f32.c"/>
    <files mask="arm_entropy_f64.c"/>
    <files mask="arm_kullback_leibler_f16.c"/>
    <files mask="arm_kullback_leibler_f32.c"/>
    <files mask="arm_kullback_leibler_f64.c"/>
    <files mask="arm_logsumexp_dot_prod_f16.c"/>
    <files mask="arm_logsumexp_dot_prod_f32.c"/>
    <files mask="arm_logsumexp_f16.c"/>
    <files mask="arm_logsumexp_f32.c"/>
    <files mask="arm_max_f16.c"/>
    <files mask="arm_max_f32.c"/>
    <files mask="arm_max_f64.c"/>
    <files mask="arm_max_no_idx_f16.c"/>
    <files mask="arm_max_no_idx_f32.c"/>
    <files mask="arm_max_no_idx_f64.c"/>
    <files mask="arm_max_no_idx_q15.c"/>
    <files mask="arm_max_no_idx_q31.c"/>
    <files mask="arm_max_no_idx_q7.c"/>
    <files mask="arm_max_q15.c"/>
    <files mask="arm_max_q31.c"/>
    <files mask="arm_max_q7.c"/>
    <files mask="arm_mean_f16.c"/>
    <files mask="arm_mean_f32.c"/>
    <files mask="arm_mean_f64.c"/>
    <files mask="arm_mean_q15.c"/>
    <files mask="arm_mean_q31.c"/>
    <files mask="arm_mean_q7.c"/>
    <files mask="arm_min_f16.c"/>
    <files mask="arm_min_f32.c"/>
    <files mask="arm_min_f64.c"/>
    <files mask="arm_min_no_idx_f16.c"/>
    <files mask="arm_min_no_idx_f32.c"/>
    <files mask="arm_min_no_idx_f64.c"/>
    <files mask="arm_min_no_idx_q15.c"/>
    <files mask="arm_min_no_idx_q31.c"/>
    <files mask="arm_min_no_idx_q7.c"/>
    <files mask="arm_min_q15.c"/>
    <files mask="arm_min_q31.c"/>
    <files mask="arm_min_q7.c"/>
    <files mask="arm_mse_f16.c"/>
    <files mask="arm_mse_f32.c"/>
    <files mask="arm_mse_f64.c"/>
    <files mask="arm_mse_q15.c"/>
    <files mask="arm_mse_q31.c"/>
    <files mask="arm_mse_q7.c"/>
    <files mask="arm_power_f16.c"/>
    <files mask="arm_power_f32.c"/>
    <files mask="arm_power_f64.c"/>
    <files mask="arm_power_q15.c"/>
    <files mask="arm_power_q31.c"/>
    <files mask="arm_power_q7.c"/>
    <files mask="arm_rms_f16.c"/>
    <files mask="arm_rms_f32.c"/>
    <files mask="arm_rms_q15.c"/>
    <files mask="arm_rms_q31.c"/>
    <files mask="arm_std_f16.c"/>
    <files mask="arm_std_f32.c"/>
    <files mask="arm_std_f64.c"/>
    <files mask="arm_std_q15.c"/>
    <files mask="arm_std_q31.c"/>
    <files mask="arm_var_f16.c"/>
    <files mask="arm_var_f32.c"/>
    <files mask="arm_var_f64.c"/>
    <files mask="arm_var_q15.c"/>
    <files mask="arm_var_q31.c"/>
    <files mask="SupportFunctions.c"/>
    <files mask="SupportFunctionsF16.c"/>
    <files mask="arm_barycenter_f16.c"/>
    <files mask="arm_barycenter_f32.c"/>
    <files mask="arm_bitonic_sort_f32.c"/>
    <files mask="arm_bubble_sort_f32.c"/>
    <files mask="arm_copy_f16.c"/>
    <files mask="arm_copy_f32.c"/>
    <files mask="arm_copy_f64.c"/>
    <files mask="arm_copy_q15.c"/>
    <files mask="arm_copy_q31.c"/>
    <files mask="arm_copy_q7.c"/>
    <files mask="arm_f16_to_f64.c"/>
    <files mask="arm_f16_to_float.c"/>
    <files mask="arm_f16_to_q15.c"/>
    <files mask="arm_f64_to_f16.c"/>
    <files mask="arm_f64_to_float.c"/>
    <files mask="arm_f64_to_q15.c"/>
    <files mask="arm_f64_to_q31.c"/>
    <files mask="arm_f64_to_q7.c"/>
    <files mask="arm_fill_f16.c"/>
    <files mask="arm_fill_f32.c"/>
    <files mask="arm_fill_f64.c"/>
    <files mask="arm_fill_q15.c"/>
    <files mask="arm_fill_q31.c"/>
    <files mask="arm_fill_q7.c"/>
    <files mask="arm_float_to_f16.c"/>
    <files mask="arm_float_to_f64.c"/>
    <files mask="arm_float_to_q15.c"/>
    <files mask="arm_float_to_q31.c"/>
    <files mask="arm_float_to_q7.c"/>
    <files mask="arm_heap_sort_f32.c"/>
    <files mask="arm_insertion_sort_f32.c"/>
    <files mask="arm_merge_sort_f32.c"/>
    <files mask="arm_merge_sort_init_f32.c"/>
    <files mask="arm_q15_to_f16.c"/>
    <files mask="arm_q15_to_f64.c"/>
    <files mask="arm_q15_to_float.c"/>
    <files mask="arm_q15_to_q31.c"/>
    <files mask="arm_q15_to_q7.c"/>
    <files mask="arm_q31_to_f64.c"/>
    <files mask="arm_q31_to_float.c"/>
    <files mask="arm_q31_to_q15.c"/>
    <files mask="arm_q31_to_q7.c"/>
    <files mask="arm_q7_to_f64.c"/>
    <files mask="arm_q7_to_float.c"/>
    <files mask="arm_q7_to_q15.c"/>
    <files mask="arm_q7_to_q31.c"/>
    <files mask="arm_quick_sort_f32.c"/>
    <files mask="arm_selection_sort_f32.c"/>
    <files mask="arm_sort_f32.c"/>
    <files mask="arm_sort_init_f32.c"/>
    <files mask="arm_weighted_sum_f16.c"/>
    <files mask="arm_weighted_sum_f32.c"/>
    <files mask="TransformFunctions.c"/>
    <files mask="TransformFunctionsF16.c"/>
    <files mask="arm_bitreversal.c"/>
    <files mask="arm_bitreversal2.c"/>
    <files mask="arm_bitreversal_f16.c"/>
    <files mask="arm_cfft_f16.c"/>
    <files mask="arm_cfft_f32.c"/>
    <files mask="arm_cfft_f64.c"/>
    <files mask="arm_cfft_init_f16.c"/>
    <files mask="arm_cfft_init_f32.c"/>
    <files mask="arm_cfft_init_f64.c"/>
    <files mask="arm_cfft_init_q15.c"/>
    <files mask="arm_cfft_init_q31.c"/>
    <files mask="arm_cfft_q15.c"/>
    <files mask="arm_cfft_q31.c"/>
    <files mask="arm_cfft_radix2_f16.c"/>
    <files mask="arm_cfft_radix2_f32.c"/>
    <files mask="arm_cfft_radix2_init_f16.c"/>
    <files mask="arm_cfft_radix2_init_f32.c"/>
    <files mask="arm_cfft_radix2_init_q15.c"/>
    <files mask="arm_cfft_radix2_init_q31.c"/>
    <files mask="arm_cfft_radix2_q15.c"/>
    <files mask="arm_cfft_radix2_q31.c"/>
    <files mask="arm_cfft_radix4_f16.c"/>
    <files mask="arm_cfft_radix4_f32.c"/>
    <files mask="arm_cfft_radix4_init_f16.c"/>
    <files mask="arm_cfft_radix4_init_f32.c"/>
    <files mask="arm_cfft_radix4_init_q15.c"/>
    <files mask="arm_cfft_radix4_init_q31.c"/>
    <files mask="arm_cfft_radix4_q15.c"/>
    <files mask="arm_cfft_radix4_q31.c"/>
    <files mask="arm_cfft_radix8_f16.c"/>
    <files mask="arm_cfft_radix8_f32.c"/>
    <files mask="arm_dct4_f32.c"/>
    <files mask="arm_dct4_init_f32.c"/>
    <files mask="arm_dct4_init_q15.c"/>
    <files mask="arm_dct4_init_q31.c"/>
    <files mask="arm_dct4_q15.c"/>
    <files mask="arm_dct4_q31.c"/>
    <files mask="arm_mfcc_f16.c"/>
    <files mask="arm_mfcc_f32.c"/>
    <files mask="arm_mfcc_init_f16.c"/>
    <files mask="arm_mfcc_init_f32.c"/>
    <files mask="arm_mfcc_init_q15.c"/>
    <files mask="arm_mfcc_init_q31.c"/>
    <files mask="arm_mfcc_q15.c"/>
    <files mask="arm_mfcc_q31.c"/>
    <files mask="arm_rfft_f32.c"/>
    <files mask="arm_rfft_fast_f16.c"/>
    <files mask="arm_rfft_fast_f32.c"/>
    <files mask="arm_rfft_fast_f64.c"/>
    <files mask="arm_rfft_fast_init_f16.c"/>
    <files mask="arm_rfft_fast_init_f32.c"/>
    <files mask="arm_rfft_fast_init_f64.c"/>
    <files mask="arm_rfft_init_f32.c"/>
    <files mask="arm_rfft_init_q15.c"/>
    <files mask="arm_rfft_init_q31.c"/>
    <files mask="arm_rfft_q15.c"/>
    <files mask="arm_rfft_q31.c"/>
    <files mask="WindowFunctions.c"/>
    <files mask="arm_bartlett_f32.c"/>
    <files mask="arm_bartlett_f64.c"/>
    <files mask="arm_blackman_harris_92db_f32.c"/>
    <files mask="arm_blackman_harris_92db_f64.c"/>
    <files mask="arm_hamming_f32.c"/>
    <files mask="arm_hamming_f64.c"/>
    <files mask="arm_hanning_f32.c"/>
    <files mask="arm_hanning_f64.c"/>
    <files mask="arm_hft116d_f32.c"/>
    <files mask="arm_hft116d_f64.c"/>
    <files mask="arm_hft144d_f32.c"/>
    <files mask="arm_hft144d_f64.c"/>
    <files mask="arm_hft169d_f32.c"/>
    <files mask="arm_hft169d_f64.c"/>
    <files mask="arm_hft196d_f32.c"/>
    <files mask="arm_hft196d_f64.c"/>
    <files mask="arm_hft223d_f32.c"/>
    <files mask="arm_hft223d_f64.c"/>
    <files mask="arm_hft248d_f32.c"/>
    <files mask="arm_hft248d_f64.c"/>
    <files mask="arm_hft90d_f32.c"/>
    <files mask="arm_hft90d_f64.c"/>
    <files mask="arm_hft95_f32.c"/>
    <files mask="arm_hft95_f64.c"/>
    <files mask="arm_nuttall3_f32.c"/>
    <files mask="arm_nuttall3_f64.c"/>
    <files mask="arm_nuttall3a_f32.c"/>
    <files mask="arm_nuttall3a_f64.c"/>
    <files mask="arm_nuttall3b_f32.c"/>
    <files mask="arm_nuttall3b_f64.c"/>
    <files mask="arm_nuttall4_f32.c"/>
    <files mask="arm_nuttall4_f64.c"/>
    <files mask="arm_nuttall4a_f32.c"/>
    <files mask="arm_nuttall4a_f64.c"/>
    <files mask="arm_nuttall4b_f32.c"/>
    <files mask="arm_nuttall4b_f64.c"/>
    <files mask="arm_nuttall4c_f32.c"/>
    <files mask="arm_nuttall4c_f64.c"/>
    <files mask="arm_welch_f32.c"/>
    <files mask="arm_welch_f64.c"/>
  </source>
  <source relative_path="./" type="c_include">
    <files mask="Driver_CAN.h"/>
    <files mask="Driver_Common.h"/>
    <files mask="Driver_ETH.h"/>
    <files mask="Driver_ETH_MAC.h"/>
    <files mask="Driver_ETH_PHY.h"/>
    <files mask="Driver_Flash.h"/>
    <files mask="Driver_I2C.h"/>
    <files mask="Driver_MCI.h"/>
    <files mask="Driver_NAND.h"/>
    <files mask="Driver_SAI.h"/>
    <files mask="Driver_SPI.h"/>
    <files mask="Driver_Storage.h"/>
    <files mask="Driver_USART.h"/>
    <files mask="Driver_USB.h"/>
    <files mask="Driver_USBD.h"/>
    <files mask="Driver_USBH.h"/>
    <files mask="Driver_WiFi.h"/>
    <files mask="cmsis_vio.h"/>
    <files mask="arm_boolean_distance_template.h"/>
  </source>
  <source relative_path="./" type="other">
    <files mask="cmsis_vio.scvd"/>
    <files mask="CMSIS.yml"/>
    <files mask="CMSIS_v2.yml"/>
    <files mask="CMSIS_v3.yml"/>
    <files mask="README.md"/>
  </source>
  <source relative_path="./" type="doc">
    <files mask="LICENSE.txt"/>
  </source>
</component>-->
    <component id="CMSIS_DSP_Include.MIMXRT798S" name="CMSIS_DSP_Library_Header" brief="CMSIS-DSP Library Header" version="1.15.0" full_name="CMSIS DSP Library Header" category="CMSIS/DSP" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/DSP" project_base_path="CMSIS/DSP">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_common_tables_f16.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_const_structs_f16.h"/>
        <files mask="arm_helium_utils.h"/>
        <files mask="arm_math.h"/>
        <files mask="arm_math_f16.h"/>
        <files mask="arm_math_memory.h"/>
        <files mask="arm_math_types.h"/>
        <files mask="arm_math_types_f16.h"/>
        <files mask="arm_mve_tables.h"/>
        <files mask="arm_mve_tables_f16.h"/>
        <files mask="arm_vec_math.h"/>
        <files mask="arm_vec_math_f16.h"/>
      </source>
      <source relative_path="Include/dsp" type="c_include">
        <files mask="basic_math_functions.h"/>
        <files mask="basic_math_functions_f16.h"/>
        <files mask="bayes_functions.h"/>
        <files mask="bayes_functions_f16.h"/>
        <files mask="complex_math_functions.h"/>
        <files mask="complex_math_functions_f16.h"/>
        <files mask="controller_functions.h"/>
        <files mask="controller_functions_f16.h"/>
        <files mask="debug.h"/>
        <files mask="distance_functions.h"/>
        <files mask="distance_functions_f16.h"/>
        <files mask="fast_math_functions.h"/>
        <files mask="fast_math_functions_f16.h"/>
        <files mask="filtering_functions.h"/>
        <files mask="filtering_functions_f16.h"/>
        <files mask="interpolation_functions.h"/>
        <files mask="interpolation_functions_f16.h"/>
        <files mask="matrix_functions.h"/>
        <files mask="matrix_functions_f16.h"/>
        <files mask="matrix_utils.h"/>
        <files mask="none.h"/>
        <files mask="quaternion_math_functions.h"/>
        <files mask="statistics_functions.h"/>
        <files mask="statistics_functions_f16.h"/>
        <files mask="support_functions.h"/>
        <files mask="support_functions_f16.h"/>
        <files mask="svm_defines.h"/>
        <files mask="svm_functions.h"/>
        <files mask="svm_functions_f16.h"/>
        <files mask="transform_functions.h"/>
        <files mask="transform_functions_f16.h"/>
        <files mask="utils.h"/>
        <files mask="window_functions.h"/>
      </source>
      <source relative_path="PrivateInclude" type="c_include">
        <files mask="arm_sorting.h"/>
        <files mask="arm_vec_fft.h"/>
        <files mask="arm_vec_filtering.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_DSP_Include.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="PrivateInclude" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_DSP_Source.MIMXRT798S" name="CMSIS_DSP_Library_Source" brief="CMSIS-DSP Library" version="1.15.0" full_name="CMSIS DSP Library Source" category="CMSIS/DSP" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/DSP" project_base_path="CMSIS/DSP">
      <defines>
        <define name="DISABLEFLOAT16" value=""/>
      </defines>
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_common_tables_f16.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_const_structs_f16.h"/>
        <files mask="arm_helium_utils.h"/>
        <files mask="arm_math.h"/>
        <files mask="arm_math_f16.h"/>
        <files mask="arm_math_memory.h"/>
        <files mask="arm_math_types.h"/>
        <files mask="arm_math_types_f16.h"/>
        <files mask="arm_mve_tables.h"/>
        <files mask="arm_mve_tables_f16.h"/>
        <files mask="arm_vec_math.h"/>
        <files mask="arm_vec_math_f16.h"/>
      </source>
      <source relative_path="Include/dsp" type="c_include">
        <files mask="basic_math_functions.h"/>
        <files mask="basic_math_functions_f16.h"/>
        <files mask="bayes_functions.h"/>
        <files mask="bayes_functions_f16.h"/>
        <files mask="complex_math_functions.h"/>
        <files mask="complex_math_functions_f16.h"/>
        <files mask="controller_functions.h"/>
        <files mask="controller_functions_f16.h"/>
        <files mask="debug.h"/>
        <files mask="distance_functions.h"/>
        <files mask="distance_functions_f16.h"/>
        <files mask="fast_math_functions.h"/>
        <files mask="fast_math_functions_f16.h"/>
        <files mask="filtering_functions.h"/>
        <files mask="filtering_functions_f16.h"/>
        <files mask="interpolation_functions.h"/>
        <files mask="interpolation_functions_f16.h"/>
        <files mask="matrix_functions.h"/>
        <files mask="matrix_functions_f16.h"/>
        <files mask="matrix_utils.h"/>
        <files mask="none.h"/>
        <files mask="quaternion_math_functions.h"/>
        <files mask="statistics_functions.h"/>
        <files mask="statistics_functions_f16.h"/>
        <files mask="support_functions.h"/>
        <files mask="support_functions_f16.h"/>
        <files mask="svm_defines.h"/>
        <files mask="svm_functions.h"/>
        <files mask="svm_functions_f16.h"/>
        <files mask="transform_functions.h"/>
        <files mask="transform_functions_f16.h"/>
        <files mask="utils.h"/>
        <files mask="window_functions.h"/>
      </source>
      <source relative_path="PrivateInclude" type="c_include">
        <files mask="arm_sorting.h"/>
        <files mask="arm_vec_fft.h"/>
        <files mask="arm_vec_filtering.h"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="BasicMathFunctions.c"/>
        <files mask="BasicMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_abs_f32.c"/>
        <files mask="arm_abs_f64.c"/>
        <files mask="arm_abs_q15.c"/>
        <files mask="arm_abs_q31.c"/>
        <files mask="arm_abs_q7.c"/>
        <files mask="arm_add_f32.c"/>
        <files mask="arm_add_f64.c"/>
        <files mask="arm_add_q15.c"/>
        <files mask="arm_add_q31.c"/>
        <files mask="arm_add_q7.c"/>
        <files mask="arm_and_u16.c"/>
        <files mask="arm_and_u32.c"/>
        <files mask="arm_and_u8.c"/>
        <files mask="arm_clip_f32.c"/>
        <files mask="arm_clip_q15.c"/>
        <files mask="arm_clip_q31.c"/>
        <files mask="arm_clip_q7.c"/>
        <files mask="arm_dot_prod_f32.c"/>
        <files mask="arm_dot_prod_f64.c"/>
        <files mask="arm_dot_prod_q15.c"/>
        <files mask="arm_dot_prod_q31.c"/>
        <files mask="arm_dot_prod_q7.c"/>
        <files mask="arm_mult_f32.c"/>
        <files mask="arm_mult_f64.c"/>
        <files mask="arm_mult_q15.c"/>
        <files mask="arm_mult_q31.c"/>
        <files mask="arm_mult_q7.c"/>
        <files mask="arm_negate_f32.c"/>
        <files mask="arm_negate_f64.c"/>
        <files mask="arm_negate_q15.c"/>
        <files mask="arm_negate_q31.c"/>
        <files mask="arm_negate_q7.c"/>
        <files mask="arm_not_u16.c"/>
        <files mask="arm_not_u32.c"/>
        <files mask="arm_not_u8.c"/>
        <files mask="arm_offset_f32.c"/>
        <files mask="arm_offset_f64.c"/>
        <files mask="arm_offset_q15.c"/>
        <files mask="arm_offset_q31.c"/>
        <files mask="arm_offset_q7.c"/>
        <files mask="arm_or_u16.c"/>
        <files mask="arm_or_u32.c"/>
        <files mask="arm_or_u8.c"/>
        <files mask="arm_scale_f32.c"/>
        <files mask="arm_scale_f64.c"/>
        <files mask="arm_scale_q15.c"/>
        <files mask="arm_scale_q31.c"/>
        <files mask="arm_scale_q7.c"/>
        <files mask="arm_shift_q15.c"/>
        <files mask="arm_shift_q31.c"/>
        <files mask="arm_shift_q7.c"/>
        <files mask="arm_sub_f32.c"/>
        <files mask="arm_sub_f64.c"/>
        <files mask="arm_sub_q15.c"/>
        <files mask="arm_sub_q31.c"/>
        <files mask="arm_sub_q7.c"/>
        <files mask="arm_xor_u16.c"/>
        <files mask="arm_xor_u32.c"/>
        <files mask="arm_xor_u8.c"/>
        <files mask="arm_abs_f16.c"/>
        <files mask="arm_add_f16.c"/>
        <files mask="arm_clip_f16.c"/>
        <files mask="arm_dot_prod_f16.c"/>
        <files mask="arm_mult_f16.c"/>
        <files mask="arm_negate_f16.c"/>
        <files mask="arm_offset_f16.c"/>
        <files mask="arm_scale_f16.c"/>
        <files mask="arm_sub_f16.c"/>
      </source>
      <source relative_path="Source/BayesFunctions" type="src">
        <files mask="BayesFunctions.c"/>
        <files mask="BayesFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/BayesFunctions" type="src">
        <files mask="arm_gaussian_naive_bayes_predict_f32.c"/>
        <files mask="arm_gaussian_naive_bayes_predict_f16.c"/>
      </source>
      <source relative_path="Source/CommonTables" type="src">
        <files mask="CommonTables.c"/>
        <files mask="CommonTablesF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/CommonTables" type="src">
        <files mask="arm_common_tables.c"/>
        <files mask="arm_const_structs.c"/>
        <files mask="arm_mve_tables.c"/>
        <files mask="arm_common_tables_f16.c"/>
        <files mask="arm_const_structs_f16.c"/>
        <files mask="arm_mve_tables_f16.c"/>
      </source>
      <source relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="ComplexMathFunctions.c"/>
        <files mask="ComplexMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="arm_cmplx_conj_f32.c"/>
        <files mask="arm_cmplx_conj_q15.c"/>
        <files mask="arm_cmplx_conj_q31.c"/>
        <files mask="arm_cmplx_dot_prod_f32.c"/>
        <files mask="arm_cmplx_dot_prod_q15.c"/>
        <files mask="arm_cmplx_dot_prod_q31.c"/>
        <files mask="arm_cmplx_mag_f32.c"/>
        <files mask="arm_cmplx_mag_f64.c"/>
        <files mask="arm_cmplx_mag_fast_q15.c"/>
        <files mask="arm_cmplx_mag_q15.c"/>
        <files mask="arm_cmplx_mag_q31.c"/>
        <files mask="arm_cmplx_mag_squared_f32.c"/>
        <files mask="arm_cmplx_mag_squared_f64.c"/>
        <files mask="arm_cmplx_mag_squared_q15.c"/>
        <files mask="arm_cmplx_mag_squared_q31.c"/>
        <files mask="arm_cmplx_mult_cmplx_f32.c"/>
        <files mask="arm_cmplx_mult_cmplx_f64.c"/>
        <files mask="arm_cmplx_mult_cmplx_q15.c"/>
        <files mask="arm_cmplx_mult_cmplx_q31.c"/>
        <files mask="arm_cmplx_mult_real_f32.c"/>
        <files mask="arm_cmplx_mult_real_q15.c"/>
        <files mask="arm_cmplx_mult_real_q31.c"/>
        <files mask="arm_cmplx_conj_f16.c"/>
        <files mask="arm_cmplx_dot_prod_f16.c"/>
        <files mask="arm_cmplx_mag_f16.c"/>
        <files mask="arm_cmplx_mag_squared_f16.c"/>
        <files mask="arm_cmplx_mult_cmplx_f16.c"/>
        <files mask="arm_cmplx_mult_real_f16.c"/>
      </source>
      <source relative_path="Source/ControllerFunctions" type="src">
        <files mask="ControllerFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/ControllerFunctions" type="src">
        <files mask="arm_pid_init_f32.c"/>
        <files mask="arm_pid_init_q15.c"/>
        <files mask="arm_pid_init_q31.c"/>
        <files mask="arm_pid_reset_f32.c"/>
        <files mask="arm_pid_reset_q15.c"/>
        <files mask="arm_pid_reset_q31.c"/>
        <files mask="arm_sin_cos_f32.c"/>
        <files mask="arm_sin_cos_q31.c"/>
      </source>
      <source relative_path="Source/DistanceFunctions" type="src">
        <files mask="DistanceFunctions.c"/>
        <files mask="DistanceFunctionsF16.c"/>
      </source>
      <source relative_path="Source/DistanceFunctions" type="c_include">
        <files mask="arm_boolean_distance_template.h"/>
      </source>
      <source exclude="true" relative_path="Source/DistanceFunctions" type="src">
        <files mask="arm_boolean_distance.c"/>
        <files mask="arm_braycurtis_distance_f32.c"/>
        <files mask="arm_canberra_distance_f32.c"/>
        <files mask="arm_chebyshev_distance_f32.c"/>
        <files mask="arm_chebyshev_distance_f64.c"/>
        <files mask="arm_cityblock_distance_f32.c"/>
        <files mask="arm_cityblock_distance_f64.c"/>
        <files mask="arm_correlation_distance_f32.c"/>
        <files mask="arm_cosine_distance_f32.c"/>
        <files mask="arm_cosine_distance_f64.c"/>
        <files mask="arm_dice_distance.c"/>
        <files mask="arm_dtw_distance_f32.c"/>
        <files mask="arm_dtw_init_window_q7.c"/>
        <files mask="arm_dtw_path_f32.c"/>
        <files mask="arm_euclidean_distance_f32.c"/>
        <files mask="arm_euclidean_distance_f64.c"/>
        <files mask="arm_hamming_distance.c"/>
        <files mask="arm_jaccard_distance.c"/>
        <files mask="arm_jensenshannon_distance_f32.c"/>
        <files mask="arm_kulsinski_distance.c"/>
        <files mask="arm_minkowski_distance_f32.c"/>
        <files mask="arm_rogerstanimoto_distance.c"/>
        <files mask="arm_russellrao_distance.c"/>
        <files mask="arm_sokalmichener_distance.c"/>
        <files mask="arm_sokalsneath_distance.c"/>
        <files mask="arm_yule_distance.c"/>
        <files mask="arm_braycurtis_distance_f16.c"/>
        <files mask="arm_chebyshev_distance_f16.c"/>
        <files mask="arm_canberra_distance_f16.c"/>
        <files mask="arm_cityblock_distance_f16.c"/>
        <files mask="arm_correlation_distance_f16.c"/>
        <files mask="arm_cosine_distance_f16.c"/>
        <files mask="arm_euclidean_distance_f16.c"/>
        <files mask="arm_jensenshannon_distance_f16.c"/>
        <files mask="arm_minkowski_distance_f16.c"/>
      </source>
      <source relative_path="Source/FastMathFunctions" type="src">
        <files mask="FastMathFunctions.c"/>
        <files mask="FastMathFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/FastMathFunctions" type="src">
        <files mask="arm_atan2_f32.c"/>
        <files mask="arm_atan2_q15.c"/>
        <files mask="arm_atan2_q31.c"/>
        <files mask="arm_cos_f32.c"/>
        <files mask="arm_cos_q15.c"/>
        <files mask="arm_cos_q31.c"/>
        <files mask="arm_divide_q15.c"/>
        <files mask="arm_divide_q31.c"/>
        <files mask="arm_sin_f32.c"/>
        <files mask="arm_sin_q15.c"/>
        <files mask="arm_sin_q31.c"/>
        <files mask="arm_sqrt_q15.c"/>
        <files mask="arm_sqrt_q31.c"/>
        <files mask="arm_vexp_f32.c"/>
        <files mask="arm_vexp_f64.c"/>
        <files mask="arm_vlog_f32.c"/>
        <files mask="arm_vlog_f64.c"/>
        <files mask="arm_vlog_q15.c"/>
        <files mask="arm_vlog_q31.c"/>
        <files mask="arm_atan2_f16.c"/>
        <files mask="arm_vexp_f16.c"/>
        <files mask="arm_vinverse_f16.c"/>
        <files mask="arm_vlog_f16.c"/>
      </source>
      <source relative_path="Source/FilteringFunctions" type="src">
        <files mask="FilteringFunctions.c"/>
        <files mask="FilteringFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/FilteringFunctions" type="src">
        <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f32.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
        <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
        <files mask="arm_biquad_cascade_df1_init_f32.c"/>
        <files mask="arm_biquad_cascade_df1_init_q15.c"/>
        <files mask="arm_biquad_cascade_df1_init_q31.c"/>
        <files mask="arm_biquad_cascade_df1_q15.c"/>
        <files mask="arm_biquad_cascade_df1_q31.c"/>
        <files mask="arm_biquad_cascade_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_f64.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
        <files mask="arm_conv_f32.c"/>
        <files mask="arm_conv_fast_opt_q15.c"/>
        <files mask="arm_conv_fast_q15.c"/>
        <files mask="arm_conv_fast_q31.c"/>
        <files mask="arm_conv_opt_q15.c"/>
        <files mask="arm_conv_opt_q7.c"/>
        <files mask="arm_conv_partial_f32.c"/>
        <files mask="arm_conv_partial_fast_opt_q15.c"/>
        <files mask="arm_conv_partial_fast_q15.c"/>
        <files mask="arm_conv_partial_fast_q31.c"/>
        <files mask="arm_conv_partial_opt_q15.c"/>
        <files mask="arm_conv_partial_opt_q7.c"/>
        <files mask="arm_conv_partial_q15.c"/>
        <files mask="arm_conv_partial_q31.c"/>
        <files mask="arm_conv_partial_q7.c"/>
        <files mask="arm_conv_q15.c"/>
        <files mask="arm_conv_q31.c"/>
        <files mask="arm_conv_q7.c"/>
        <files mask="arm_correlate_f32.c"/>
        <files mask="arm_correlate_f64.c"/>
        <files mask="arm_correlate_fast_opt_q15.c"/>
        <files mask="arm_correlate_fast_q15.c"/>
        <files mask="arm_correlate_fast_q31.c"/>
        <files mask="arm_correlate_opt_q15.c"/>
        <files mask="arm_correlate_opt_q7.c"/>
        <files mask="arm_correlate_q15.c"/>
        <files mask="arm_correlate_q31.c"/>
        <files mask="arm_correlate_q7.c"/>
        <files mask="arm_fir_decimate_f32.c"/>
        <files mask="arm_fir_decimate_fast_q15.c"/>
        <files mask="arm_fir_decimate_fast_q31.c"/>
        <files mask="arm_fir_decimate_init_f32.c"/>
        <files mask="arm_fir_decimate_init_q15.c"/>
        <files mask="arm_fir_decimate_init_q31.c"/>
        <files mask="arm_fir_decimate_q15.c"/>
        <files mask="arm_fir_decimate_q31.c"/>
        <files mask="arm_fir_f32.c"/>
        <files mask="arm_fir_f64.c"/>
        <files mask="arm_fir_fast_q15.c"/>
        <files mask="arm_fir_fast_q31.c"/>
        <files mask="arm_fir_init_f32.c"/>
        <files mask="arm_fir_init_f64.c"/>
        <files mask="arm_fir_init_q15.c"/>
        <files mask="arm_fir_init_q31.c"/>
        <files mask="arm_fir_init_q7.c"/>
        <files mask="arm_fir_interpolate_f32.c"/>
        <files mask="arm_fir_interpolate_init_f32.c"/>
        <files mask="arm_fir_interpolate_init_q15.c"/>
        <files mask="arm_fir_interpolate_init_q31.c"/>
        <files mask="arm_fir_interpolate_q15.c"/>
        <files mask="arm_fir_interpolate_q31.c"/>
        <files mask="arm_fir_lattice_f32.c"/>
        <files mask="arm_fir_lattice_init_f32.c"/>
        <files mask="arm_fir_lattice_init_q15.c"/>
        <files mask="arm_fir_lattice_init_q31.c"/>
        <files mask="arm_fir_lattice_q15.c"/>
        <files mask="arm_fir_lattice_q31.c"/>
        <files mask="arm_fir_q15.c"/>
        <files mask="arm_fir_q31.c"/>
        <files mask="arm_fir_q7.c"/>
        <files mask="arm_fir_sparse_f32.c"/>
        <files mask="arm_fir_sparse_init_f32.c"/>
        <files mask="arm_fir_sparse_init_q15.c"/>
        <files mask="arm_fir_sparse_init_q31.c"/>
        <files mask="arm_fir_sparse_init_q7.c"/>
        <files mask="arm_fir_sparse_q15.c"/>
        <files mask="arm_fir_sparse_q31.c"/>
        <files mask="arm_fir_sparse_q7.c"/>
        <files mask="arm_iir_lattice_f32.c"/>
        <files mask="arm_iir_lattice_init_f32.c"/>
        <files mask="arm_iir_lattice_init_q15.c"/>
        <files mask="arm_iir_lattice_init_q31.c"/>
        <files mask="arm_iir_lattice_q15.c"/>
        <files mask="arm_iir_lattice_q31.c"/>
        <files mask="arm_levinson_durbin_f32.c"/>
        <files mask="arm_levinson_durbin_q31.c"/>
        <files mask="arm_lms_f32.c"/>
        <files mask="arm_lms_init_f32.c"/>
        <files mask="arm_lms_init_q15.c"/>
        <files mask="arm_lms_init_q31.c"/>
        <files mask="arm_lms_norm_f32.c"/>
        <files mask="arm_lms_norm_init_f32.c"/>
        <files mask="arm_lms_norm_init_q15.c"/>
        <files mask="arm_lms_norm_init_q31.c"/>
        <files mask="arm_lms_norm_q15.c"/>
        <files mask="arm_lms_norm_q31.c"/>
        <files mask="arm_lms_q15.c"/>
        <files mask="arm_lms_q31.c"/>
        <files mask="arm_biquad_cascade_df1_f16.c"/>
        <files mask="arm_biquad_cascade_df1_init_f16.c"/>
        <files mask="arm_biquad_cascade_df2T_f16.c"/>
        <files mask="arm_biquad_cascade_df2T_init_f16.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f16.c"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f16.c"/>
        <files mask="arm_correlate_f16.c"/>
        <files mask="arm_fir_f16.c"/>
        <files mask="arm_fir_init_f16.c"/>
        <files mask="arm_levinson_durbin_f16.c"/>
      </source>
      <source relative_path="Source/InterpolationFunctions" type="src">
        <files mask="InterpolationFunctions.c"/>
        <files mask="InterpolationFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/InterpolationFunctions" type="src">
        <files mask="arm_bilinear_interp_f32.c"/>
        <files mask="arm_bilinear_interp_q15.c"/>
        <files mask="arm_bilinear_interp_q31.c"/>
        <files mask="arm_bilinear_interp_q7.c"/>
        <files mask="arm_linear_interp_f32.c"/>
        <files mask="arm_linear_interp_q15.c"/>
        <files mask="arm_linear_interp_q31.c"/>
        <files mask="arm_linear_interp_q7.c"/>
        <files mask="arm_spline_interp_f32.c"/>
        <files mask="arm_spline_interp_init_f32.c"/>
        <files mask="arm_bilinear_interp_f16.c"/>
        <files mask="arm_linear_interp_f16.c"/>
      </source>
      <source relative_path="Source/MatrixFunctions" type="src">
        <files mask="MatrixFunctions.c"/>
        <files mask="MatrixFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/MatrixFunctions" type="src">
        <files mask="arm_householder_f32.c"/>
        <files mask="arm_householder_f64.c"/>
        <files mask="arm_mat_add_f32.c"/>
        <files mask="arm_mat_add_q15.c"/>
        <files mask="arm_mat_add_q31.c"/>
        <files mask="arm_mat_cholesky_f32.c"/>
        <files mask="arm_mat_cholesky_f64.c"/>
        <files mask="arm_mat_cmplx_mult_f32.c"/>
        <files mask="arm_mat_cmplx_mult_q15.c"/>
        <files mask="arm_mat_cmplx_mult_q31.c"/>
        <files mask="arm_mat_cmplx_trans_f32.c"/>
        <files mask="arm_mat_cmplx_trans_q15.c"/>
        <files mask="arm_mat_cmplx_trans_q31.c"/>
        <files mask="arm_mat_init_f32.c"/>
        <files mask="arm_mat_init_f64.c"/>
        <files mask="arm_mat_init_q15.c"/>
        <files mask="arm_mat_init_q31.c"/>
        <files mask="arm_mat_inverse_f32.c"/>
        <files mask="arm_mat_inverse_f64.c"/>
        <files mask="arm_mat_ldlt_f32.c"/>
        <files mask="arm_mat_ldlt_f64.c"/>
        <files mask="arm_mat_mult_f32.c"/>
        <files mask="arm_mat_mult_f64.c"/>
        <files mask="arm_mat_mult_fast_q15.c"/>
        <files mask="arm_mat_mult_fast_q31.c"/>
        <files mask="arm_mat_mult_opt_q31.c"/>
        <files mask="arm_mat_mult_q15.c"/>
        <files mask="arm_mat_mult_q31.c"/>
        <files mask="arm_mat_mult_q7.c"/>
        <files mask="arm_mat_qr_f32.c"/>
        <files mask="arm_mat_qr_f64.c"/>
        <files mask="arm_mat_scale_f32.c"/>
        <files mask="arm_mat_scale_q15.c"/>
        <files mask="arm_mat_scale_q31.c"/>
        <files mask="arm_mat_solve_lower_triangular_f32.c"/>
        <files mask="arm_mat_solve_lower_triangular_f64.c"/>
        <files mask="arm_mat_solve_upper_triangular_f32.c"/>
        <files mask="arm_mat_solve_upper_triangular_f64.c"/>
        <files mask="arm_mat_sub_f32.c"/>
        <files mask="arm_mat_sub_f64.c"/>
        <files mask="arm_mat_sub_q15.c"/>
        <files mask="arm_mat_sub_q31.c"/>
        <files mask="arm_mat_trans_f32.c"/>
        <files mask="arm_mat_trans_f64.c"/>
        <files mask="arm_mat_trans_q15.c"/>
        <files mask="arm_mat_trans_q31.c"/>
        <files mask="arm_mat_trans_q7.c"/>
        <files mask="arm_mat_vec_mult_f32.c"/>
        <files mask="arm_mat_vec_mult_q15.c"/>
        <files mask="arm_mat_vec_mult_q31.c"/>
        <files mask="arm_mat_vec_mult_q7.c"/>
        <files mask="arm_householder_f16.c"/>
        <files mask="arm_mat_add_f16.c"/>
        <files mask="arm_mat_cholesky_f16.c"/>
        <files mask="arm_mat_cmplx_mult_f16.c"/>
        <files mask="arm_mat_cmplx_trans_f16.c"/>
        <files mask="arm_mat_init_f16.c"/>
        <files mask="arm_mat_inverse_f16.c"/>
        <files mask="arm_mat_qr_f16.c"/>
        <files mask="arm_mat_mult_f16.c"/>
        <files mask="arm_mat_scale_f16.c"/>
        <files mask="arm_mat_solve_lower_triangular_f16.c"/>
        <files mask="arm_mat_solve_upper_triangular_f16.c"/>
        <files mask="arm_mat_sub_f16.c"/>
        <files mask="arm_mat_trans_f16.c"/>
        <files mask="arm_mat_vec_mult_f16.c"/>
      </source>
      <source relative_path="Source/QuaternionMathFunctions" type="src">
        <files mask="QuaternionMathFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/QuaternionMathFunctions" type="src">
        <files mask="arm_quaternion2rotation_f32.c"/>
        <files mask="arm_quaternion_conjugate_f32.c"/>
        <files mask="arm_quaternion_inverse_f32.c"/>
        <files mask="arm_quaternion_normalize_f32.c"/>
        <files mask="arm_quaternion_norm_f32.c"/>
        <files mask="arm_quaternion_product_f32.c"/>
        <files mask="arm_quaternion_product_single_f32.c"/>
        <files mask="arm_rotation2quaternion_f32.c"/>
      </source>
      <source relative_path="Source/SVMFunctions" type="src">
        <files mask="SVMFunctions.c"/>
        <files mask="SVMFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/SVMFunctions" type="src">
        <files mask="arm_svm_linear_init_f32.c"/>
        <files mask="arm_svm_linear_predict_f32.c"/>
        <files mask="arm_svm_polynomial_init_f32.c"/>
        <files mask="arm_svm_polynomial_predict_f32.c"/>
        <files mask="arm_svm_rbf_init_f32.c"/>
        <files mask="arm_svm_rbf_predict_f32.c"/>
        <files mask="arm_svm_sigmoid_init_f32.c"/>
        <files mask="arm_svm_sigmoid_predict_f32.c"/>
        <files mask="arm_svm_linear_init_f16.c"/>
        <files mask="arm_svm_linear_predict_f16.c"/>
        <files mask="arm_svm_polynomial_init_f16.c"/>
        <files mask="arm_svm_polynomial_predict_f16.c"/>
        <files mask="arm_svm_rbf_init_f16.c"/>
        <files mask="arm_svm_rbf_predict_f16.c"/>
        <files mask="arm_svm_sigmoid_init_f16.c"/>
        <files mask="arm_svm_sigmoid_predict_f16.c"/>
      </source>
      <source relative_path="Source/StatisticsFunctions" type="src">
        <files mask="StatisticsFunctions.c"/>
        <files mask="StatisticsFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/StatisticsFunctions" type="src">
        <files mask="arm_absmax_f32.c"/>
        <files mask="arm_absmax_f64.c"/>
        <files mask="arm_absmax_no_idx_f32.c"/>
        <files mask="arm_absmax_no_idx_f64.c"/>
        <files mask="arm_absmax_no_idx_q15.c"/>
        <files mask="arm_absmax_no_idx_q31.c"/>
        <files mask="arm_absmax_no_idx_q7.c"/>
        <files mask="arm_absmax_q15.c"/>
        <files mask="arm_absmax_q31.c"/>
        <files mask="arm_absmax_q7.c"/>
        <files mask="arm_absmin_f32.c"/>
        <files mask="arm_absmin_f64.c"/>
        <files mask="arm_absmin_no_idx_f32.c"/>
        <files mask="arm_absmin_no_idx_f64.c"/>
        <files mask="arm_absmin_no_idx_q15.c"/>
        <files mask="arm_absmin_no_idx_q31.c"/>
        <files mask="arm_absmin_no_idx_q7.c"/>
        <files mask="arm_absmin_q15.c"/>
        <files mask="arm_absmin_q31.c"/>
        <files mask="arm_absmin_q7.c"/>
        <files mask="arm_accumulate_f32.c"/>
        <files mask="arm_accumulate_f64.c"/>
        <files mask="arm_entropy_f32.c"/>
        <files mask="arm_entropy_f64.c"/>
        <files mask="arm_kullback_leibler_f32.c"/>
        <files mask="arm_kullback_leibler_f64.c"/>
        <files mask="arm_logsumexp_dot_prod_f32.c"/>
        <files mask="arm_logsumexp_f32.c"/>
        <files mask="arm_max_f32.c"/>
        <files mask="arm_max_f64.c"/>
        <files mask="arm_max_no_idx_f32.c"/>
        <files mask="arm_max_no_idx_f64.c"/>
        <files mask="arm_max_no_idx_q15.c"/>
        <files mask="arm_max_no_idx_q31.c"/>
        <files mask="arm_max_no_idx_q7.c"/>
        <files mask="arm_max_q15.c"/>
        <files mask="arm_max_q31.c"/>
        <files mask="arm_max_q7.c"/>
        <files mask="arm_mean_f32.c"/>
        <files mask="arm_mean_f64.c"/>
        <files mask="arm_mean_q15.c"/>
        <files mask="arm_mean_q31.c"/>
        <files mask="arm_mean_q7.c"/>
        <files mask="arm_min_f32.c"/>
        <files mask="arm_min_f64.c"/>
        <files mask="arm_min_no_idx_f32.c"/>
        <files mask="arm_min_no_idx_f64.c"/>
        <files mask="arm_min_no_idx_q15.c"/>
        <files mask="arm_min_no_idx_q31.c"/>
        <files mask="arm_min_no_idx_q7.c"/>
        <files mask="arm_min_q15.c"/>
        <files mask="arm_min_q31.c"/>
        <files mask="arm_min_q7.c"/>
        <files mask="arm_mse_f32.c"/>
        <files mask="arm_mse_f64.c"/>
        <files mask="arm_mse_q15.c"/>
        <files mask="arm_mse_q31.c"/>
        <files mask="arm_mse_q7.c"/>
        <files mask="arm_power_f32.c"/>
        <files mask="arm_power_f64.c"/>
        <files mask="arm_power_q15.c"/>
        <files mask="arm_power_q31.c"/>
        <files mask="arm_power_q7.c"/>
        <files mask="arm_rms_f32.c"/>
        <files mask="arm_rms_q15.c"/>
        <files mask="arm_rms_q31.c"/>
        <files mask="arm_std_f32.c"/>
        <files mask="arm_std_f64.c"/>
        <files mask="arm_std_q15.c"/>
        <files mask="arm_std_q31.c"/>
        <files mask="arm_var_f32.c"/>
        <files mask="arm_var_f64.c"/>
        <files mask="arm_var_q15.c"/>
        <files mask="arm_var_q31.c"/>
        <files mask="arm_absmax_f16.c"/>
        <files mask="arm_absmax_no_idx_f16.c"/>
        <files mask="arm_absmin_f16.c"/>
        <files mask="arm_absmin_no_idx_f16.c"/>
        <files mask="arm_accumulate_f16.c"/>
        <files mask="arm_entropy_f16.c"/>
        <files mask="arm_kullback_leibler_f16.c"/>
        <files mask="arm_logsumexp_dot_prod_f16.c"/>
        <files mask="arm_logsumexp_f16.c"/>
        <files mask="arm_max_f16.c"/>
        <files mask="arm_max_no_idx_f16.c"/>
        <files mask="arm_mean_f16.c"/>
        <files mask="arm_min_f16.c"/>
        <files mask="arm_min_no_idx_f16.c"/>
        <files mask="arm_mse_f16.c"/>
        <files mask="arm_power_f16.c"/>
        <files mask="arm_rms_f16.c"/>
        <files mask="arm_std_f16.c"/>
        <files mask="arm_var_f16.c"/>
      </source>
      <source relative_path="Source/SupportFunctions" type="src">
        <files mask="SupportFunctions.c"/>
        <files mask="SupportFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/SupportFunctions" type="src">
        <files mask="arm_barycenter_f32.c"/>
        <files mask="arm_bitonic_sort_f32.c"/>
        <files mask="arm_bubble_sort_f32.c"/>
        <files mask="arm_copy_f32.c"/>
        <files mask="arm_copy_f64.c"/>
        <files mask="arm_copy_q15.c"/>
        <files mask="arm_copy_q31.c"/>
        <files mask="arm_copy_q7.c"/>
        <files mask="arm_f64_to_float.c"/>
        <files mask="arm_f64_to_q31.c"/>
        <files mask="arm_f64_to_q15.c"/>
        <files mask="arm_f64_to_q7.c"/>
        <files mask="arm_fill_f32.c"/>
        <files mask="arm_fill_f64.c"/>
        <files mask="arm_fill_q15.c"/>
        <files mask="arm_fill_q31.c"/>
        <files mask="arm_fill_q7.c"/>
        <files mask="arm_float_to_f64.c"/>
        <files mask="arm_float_to_q15.c"/>
        <files mask="arm_float_to_q31.c"/>
        <files mask="arm_float_to_q7.c"/>
        <files mask="arm_heap_sort_f32.c"/>
        <files mask="arm_insertion_sort_f32.c"/>
        <files mask="arm_merge_sort_f32.c"/>
        <files mask="arm_merge_sort_init_f32.c"/>
        <files mask="arm_q15_to_f64.c"/>
        <files mask="arm_q15_to_float.c"/>
        <files mask="arm_q15_to_q31.c"/>
        <files mask="arm_q15_to_q7.c"/>
        <files mask="arm_q31_to_f64.c"/>
        <files mask="arm_q31_to_float.c"/>
        <files mask="arm_q31_to_q15.c"/>
        <files mask="arm_q31_to_q7.c"/>
        <files mask="arm_q7_to_f64.c"/>
        <files mask="arm_q7_to_float.c"/>
        <files mask="arm_q7_to_q15.c"/>
        <files mask="arm_q7_to_q31.c"/>
        <files mask="arm_quick_sort_f32.c"/>
        <files mask="arm_selection_sort_f32.c"/>
        <files mask="arm_sort_f32.c"/>
        <files mask="arm_sort_init_f32.c"/>
        <files mask="arm_weighted_sum_f32.c"/>
        <files mask="arm_barycenter_f16.c"/>
        <files mask="arm_copy_f16.c"/>
        <files mask="arm_f16_to_float.c"/>
        <files mask="arm_f16_to_q15.c"/>
        <files mask="arm_f16_to_f64.c"/>
        <files mask="arm_f64_to_f16.c"/>
        <files mask="arm_fill_f16.c"/>
        <files mask="arm_float_to_f16.c"/>
        <files mask="arm_q15_to_f16.c"/>
        <files mask="arm_weighted_sum_f16.c"/>
      </source>
      <source relative_path="Source/TransformFunctions" type="src">
        <files mask="TransformFunctions.c"/>
        <files mask="TransformFunctionsF16.c"/>
      </source>
      <source exclude="true" relative_path="Source/TransformFunctions" type="src">
        <files mask="arm_bitreversal.c"/>
        <files mask="arm_bitreversal2.c"/>
        <files mask="arm_cfft_f32.c"/>
        <files mask="arm_cfft_f64.c"/>
        <files mask="arm_cfft_init_f32.c"/>
        <files mask="arm_cfft_init_f64.c"/>
        <files mask="arm_cfft_init_q15.c"/>
        <files mask="arm_cfft_init_q31.c"/>
        <files mask="arm_cfft_q15.c"/>
        <files mask="arm_cfft_q31.c"/>
        <files mask="arm_cfft_radix2_f32.c"/>
        <files mask="arm_cfft_radix2_init_f32.c"/>
        <files mask="arm_cfft_radix2_init_q15.c"/>
        <files mask="arm_cfft_radix2_init_q31.c"/>
        <files mask="arm_cfft_radix2_q15.c"/>
        <files mask="arm_cfft_radix2_q31.c"/>
        <files mask="arm_cfft_radix4_f32.c"/>
        <files mask="arm_cfft_radix4_init_f32.c"/>
        <files mask="arm_cfft_radix4_init_q15.c"/>
        <files mask="arm_cfft_radix4_init_q31.c"/>
        <files mask="arm_cfft_radix4_q15.c"/>
        <files mask="arm_cfft_radix4_q31.c"/>
        <files mask="arm_cfft_radix8_f32.c"/>
        <files mask="arm_dct4_f32.c"/>
        <files mask="arm_dct4_init_f32.c"/>
        <files mask="arm_dct4_init_q15.c"/>
        <files mask="arm_dct4_init_q31.c"/>
        <files mask="arm_dct4_q15.c"/>
        <files mask="arm_dct4_q31.c"/>
        <files mask="arm_mfcc_f32.c"/>
        <files mask="arm_mfcc_init_f32.c"/>
        <files mask="arm_mfcc_init_q15.c"/>
        <files mask="arm_mfcc_init_q31.c"/>
        <files mask="arm_mfcc_q15.c"/>
        <files mask="arm_mfcc_q31.c"/>
        <files mask="arm_rfft_f32.c"/>
        <files mask="arm_rfft_fast_f32.c"/>
        <files mask="arm_rfft_fast_f64.c"/>
        <files mask="arm_rfft_fast_init_f32.c"/>
        <files mask="arm_rfft_fast_init_f64.c"/>
        <files mask="arm_rfft_init_f32.c"/>
        <files mask="arm_rfft_init_q15.c"/>
        <files mask="arm_rfft_init_q31.c"/>
        <files mask="arm_rfft_q15.c"/>
        <files mask="arm_rfft_q31.c"/>
        <files mask="arm_bitreversal_f16.c"/>
        <files mask="arm_cfft_f16.c"/>
        <files mask="arm_cfft_init_f16.c"/>
        <files mask="arm_cfft_radix2_f16.c"/>
        <files mask="arm_cfft_radix2_init_f16.c"/>
        <files mask="arm_cfft_radix4_f16.c"/>
        <files mask="arm_cfft_radix8_f16.c"/>
        <files mask="arm_mfcc_f16.c"/>
        <files mask="arm_cfft_radix4_init_f16.c"/>
        <files mask="arm_mfcc_init_f16.c"/>
        <files mask="arm_rfft_fast_f16.c"/>
        <files mask="arm_rfft_fast_init_f16.c"/>
      </source>
      <source relative_path="Source/WindowFunctions" type="src">
        <files mask="WindowFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/WindowFunctions" type="src">
        <files mask="arm_bartlett_f32.c"/>
        <files mask="arm_bartlett_f64.c"/>
        <files mask="arm_blackman_harris_92db_f32.c"/>
        <files mask="arm_blackman_harris_92db_f64.c"/>
        <files mask="arm_hamming_f32.c"/>
        <files mask="arm_hamming_f64.c"/>
        <files mask="arm_hanning_f32.c"/>
        <files mask="arm_hanning_f64.c"/>
        <files mask="arm_hft116d_f32.c"/>
        <files mask="arm_hft116d_f64.c"/>
        <files mask="arm_hft144d_f32.c"/>
        <files mask="arm_hft144d_f64.c"/>
        <files mask="arm_hft169d_f32.c"/>
        <files mask="arm_hft169d_f64.c"/>
        <files mask="arm_hft196d_f32.c"/>
        <files mask="arm_hft196d_f64.c"/>
        <files mask="arm_hft223d_f32.c"/>
        <files mask="arm_hft223d_f64.c"/>
        <files mask="arm_hft248d_f32.c"/>
        <files mask="arm_hft248d_f64.c"/>
        <files mask="arm_hft90d_f32.c"/>
        <files mask="arm_hft90d_f64.c"/>
        <files mask="arm_hft95_f32.c"/>
        <files mask="arm_hft95_f64.c"/>
        <files mask="arm_nuttall3a_f32.c"/>
        <files mask="arm_nuttall3a_f64.c"/>
        <files mask="arm_nuttall3b_f32.c"/>
        <files mask="arm_nuttall3b_f64.c"/>
        <files mask="arm_nuttall3_f32.c"/>
        <files mask="arm_nuttall3_f64.c"/>
        <files mask="arm_nuttall4a_f32.c"/>
        <files mask="arm_nuttall4a_f64.c"/>
        <files mask="arm_nuttall4b_f32.c"/>
        <files mask="arm_nuttall4b_f64.c"/>
        <files mask="arm_nuttall4c_f32.c"/>
        <files mask="arm_nuttall4c_f64.c"/>
        <files mask="arm_nuttall4_f32.c"/>
        <files mask="arm_nuttall4_f64.c"/>
        <files mask="arm_welch_f32.c"/>
        <files mask="arm_welch_f64.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_DSP_Source.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
        <include_path relative_path="PrivateInclude" type="c_include"/>
        <include_path relative_path="Source/DistanceFunctions" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USART.MIMXRT798S" name="CMSIS_Driver_USART" brief="Access to #include Driver_USART.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver USART" category="CMSIS Driver/USART" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USART.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USART.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USART.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.CAN.MIMXRT798S" name="CMSIS_Driver_CAN" brief="Access to #include Driver_CAN.h file for custom implementation" version="1.3.0" full_name="CMSIS Driver CAN" category="CMSIS Driver/CAN" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_CAN.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_CAN.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_CAN.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet.MIMXRT798S" name="CMSIS_Driver_Ethernet_Common" brief="Access to #include Driver_ETH.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet Common" category="CMSIS Driver/Ethernet" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Common.h"/>
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_ETH_MAC.h"/>
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_ETH_PHY.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_MAC.MIMXRT798S" name="CMSIS_Driver_Ethernet_MAC" brief="Access to #include Driver_ETH_MAC.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet MAC" category="CMSIS Driver/Ethernet MAC" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_Common.h"/>
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_MAC.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet_MAC.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_PHY.MIMXRT798S" name="CMSIS_Driver_Ethernet_PHY" brief="Access to #include Driver_ETH_PHY.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Ethernet PHY" category="CMSIS Driver/Ethernet PHY" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_ETH.h"/>
        <files mask="Driver_ETH_PHY.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_ETH_PHY.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Ethernet_PHY.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Flash.MIMXRT798S" name="CMSIS_Driver_Flash" brief="Access to #include Driver_Flash.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver Flash" category="CMSIS Driver/Flash" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_Flash.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_Flash.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_Flash.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.I2C.MIMXRT798S" name="CMSIS_Driver_I2C" brief="Access to #include Driver_I2C.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver I2C" category="CMSIS Driver/I2C" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_I2C.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_I2C.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_I2C.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.MCI.MIMXRT798S" name="CMSIS_Driver_MCI" brief="Access to #include Driver_MCI.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver MCI" category="CMSIS Driver/MCI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_MCI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_MCI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_MCI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.NAND.MIMXRT798S" name="CMSIS_Driver_NAND" brief="Access to #include Driver_NAND.h file for custom implementation" version="2.4.0" full_name="CMSIS Driver NAND" category="CMSIS Driver/NAND" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_NAND.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_NAND.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_NAND.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SAI.MIMXRT798S" name="CMSIS_Driver_SAI" brief="Access to #include Driver_SAI.h file for custom implementation" version="1.2.0" full_name="CMSIS Driver SAI" category="CMSIS Driver/SAI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_SAI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_SAI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_SAI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SPI.MIMXRT798S" name="CMSIS_Driver_SPI" brief="Access to #include Driver_SPI.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver SPI" category="CMSIS Driver/SPI" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_SPI.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_SPI.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_SPI.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Device.MIMXRT798S" name="CMSIS_Driver_USB_Device" brief="Access to #include Driver_USBD.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USB Device" category="CMSIS Driver/USB Device" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USBD.h"/>
        <files mask="Driver_USB.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USBD.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USB_Device.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Host.MIMXRT798S" name="CMSIS_Driver_USB_Host" brief="Access to #include Driver_USBH.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USB Host" category="CMSIS Driver/USB Host" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_USBH.h"/>
        <files mask="Driver_USB.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_USBH.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_USB_Host.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.WiFi.MIMXRT798S" name="CMSIS_Driver_WiFi" brief="Access to #include Driver_WiFi.h file" version="1.1.0" full_name="CMSIS Driver WiFi" category="CMSIS Driver/WiFi" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver" project_base_path="CMSIS_driver">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="Include" type="c_include">
        <files mask="Driver_WiFi.h"/>
        <files mask="Driver_Common.h"/>
      </source>
      <source relative_path="DriverTemplates" template="true" type="src">
        <files mask="Driver_WiFi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Driver_Include_WiFi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_OSTick.MIMXRT798S" name="CMSIS_Device_API_OSTick" brief="Device interrupt controller interface" version="1.0.2" full_name="CMSIS Device API OSTick" category="Device/OS Tick" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="os_tick.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Device_API_OSTick.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_RTOS2.MIMXRT798S" name="CMSIS_Device_API_RTOS2" brief="CMSIS-RTOS API for Cortex-M, SC000, and SC300" version="2.1.3" full_name="CMSIS Device API RTOS2" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="cmsis_os2.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_Device_API_RTOS2.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.MIMXRT798S" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MIMXRT798S/template" project_base_path="board">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="RTE_Device.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.MIMXRT798S" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.1.1" full_name="Utilities miscellaneous" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
        <files mask="fsl_syscall_stub.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="./" type="asm_include" device_cores="cm33_core0_MIMXRT798S cm33_core1_MIMXRT798S">
        <files mask="fsl_memcpy.S"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utilities_misc_utilities.MIMXRT798S.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.power_manager_docs.MIMXRT798S" name="power_manager_docs" brief="Power Manager component documentation" version="2.0.0" full_name="Power Manager component documentation" category="Device/SDK Drivers" user_visible="true" type="documentation" package_base_path="core/components/power_manager" project_base_path="component/power_manager">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="README.md"/>
      </source>
      <source relative_path="images" type="image">
        <files mask="memory_example.png"/>
        <files mask="SDK_PM_architecture.png"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.nand_flash-common.MIMXRT798S" name="nand_flash-common" brief="Driver nand_flash-common" version="1.0.0" full_name="Driver nand_flash-common" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/flash/nand" project_base_path="nand_flash">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_nand_flash.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_nand_flash-common.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.nor_flash-common.MIMXRT798S" name="nor_flash-common" brief="Driver nor_flash-common" version="1.0.0" full_name="Driver nor_flash-common" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/flash/nor" project_base_path="nor_flash">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_nor_flash.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_nor_flash-common.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.sfdp_parser.MIMXRT798S" name="SFDP Parser" brief="SFDP Parser" version="1.0.0" full_name="SFDP Parser" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/flash/nor" project_base_path="nor_flash">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sfdp_parser.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sfdp_parser.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sfdp_parser.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.common.MIMXRT798S" name="mflash common" brief="mflash common" version="1.0.0" full_name="statically allocated file system for mflash" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mflash_common.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_zephyr.MIMXRT798S" name="osa_zephyr" brief="Component osa_zephyr" version="1.0.0" full_name="Component osa_zephyr" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_zephyr.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_zephyr.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_zephyr.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.p3t1755.MIMXRT798S" name="p3t1755" brief="Driver p3t1755" version="2.0.0" full_name="Driver p3t1755" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/p3t1755" project_base_path="component/p3t1755">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_p3t1755.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_p3t1755.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_p3t1755.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wifi_bt_module.tx_pwr_limits.MIMXRT798S" name="wifi_bt_module_tx_pwr_limits" brief="Wi-Fi module Tx power limits" version="1.0.0" full_name="Wi-Fi module Tx power limits" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/wifi_bt_module" project_base_path="component/wifi_bt_module">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="AzureWave/tx_pwr_limits" type="c_include">
        <files mask="wlan_txpwrlimit_cfg_WW.h"/>
        <files mask="wlan_txpwrlimit_cfg_WW_rw610.h"/>
      </source>
      <source relative_path="Murata/tx_pwr_limits" type="c_include">
        <files mask="wlan_txpwrlimit_cfg_murata_1XK_WW.h"/>
        <files mask="wlan_txpwrlimit_cfg_murata_1ZM_WW.h"/>
        <files mask="wlan_txpwrlimit_cfg_murata_2DS_WW.h"/>
        <files mask="wlan_txpwrlimit_cfg_murata_2EL_WW.h"/>
      </source>
      <source relative_path="u-blox/tx_pwr_limits" type="c_include">
        <files mask="wlan_txpwrlimit_cfg_jody_w5_WW.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_wifi_bt_module_tx_pwr_limits.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="AzureWave/tx_pwr_limits" type="c_include"/>
        <include_path relative_path="Murata/tx_pwr_limits" type="c_include"/>
        <include_path relative_path="u-blox/tx_pwr_limits" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wifi_bt_module.config.MIMXRT798S" name="wifi_bt_module_config" brief="Wi-Fi and BT module configs" version="1.0.0" full_name="Wi-Fi and BT module configs" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/wifi_bt_module" project_base_path="component/wifi_bt_module">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="incl" type="c_include">
        <files mask="wifi_bt_module_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_wifi_bt_module_config.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="incl" type="c_include"/>
      </include_paths>
    </component>
    <component id="arch.RISCV_Include_core.MIMXRT798S" name="RISCV Core Headers" brief="Core headers for RISCV cores" version="1.0.0" full_name="Core headers for RISCV cores" category="RISCV_Include_core/CORE" user_visible="true" type="other" package_base_path="core/arch/riscv" project_base_path="riscv">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_riscv.h"/>
        <files mask="riscv_asm.h"/>
        <files mask="riscv_barrier.h"/>
        <files mask="riscv_csr.h"/>
        <files mask="riscv_interrupt.h"/>
        <files mask="riscv_types.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="arch_RISCV_Include_core.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utilities.unity.MIMXRT798S" name="unity" brief="Simple Unit Testing for C" version="2.1.0" full_name="Utilities unity" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/unity" project_base_path="utilities/unity">
      <defines>
        <define name="UNITY_DUMP_RESULT" value=""/>
        <define name="NDEBUG" value=""/>
      </defines>
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source toolchain="mcuxpresso" relative_path="linkscripts" type="src">
        <files mask="main_text.ldt"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="unity.c"/>
        <files mask="gcov_support.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="unity.h"/>
        <files mask="unity_internals.h"/>
        <files mask="gcov_support.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utilities_unity.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.rtt.template.MIMXRT798S" name="rtt_template" brief="RTT template configuration" version="7.22.0" full_name="rtt template configuration" category="Device/SDK Drivers" user_visible="false" type="project_template" package_base_path="core/components/rtt" project_base_path="rtt">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="template" config="true" type="c_include">
        <files mask="SEGGER_RTT_Conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_rtt_template.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="template" type="c_include"/>
      </include_paths>
    </component>
    <component id="project_template.MIMXRT798S.MIMXRT798S" name="MIMXRT798S" brief="Devices_project_template MIMXRT798S" version="1.0.0" full_name="Devices_project_template MIMXRT798S" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MIMXRT798S/project_template" project_base_path="board">
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MIMXRT798S"/>
              <component_dependency value="platform.utilities.assert.MIMXRT798S"/>
              <component_dependency value="component.serial_manager.MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="utility.debug_console_lite.MIMXRT798S"/>
              <component_dependency value="platform.utilities.assert_lite.MIMXRT798S"/>
            </all>
          </any_of>
          <component_dependency value="platform.drivers.lpflexcomm.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpuart.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpc_iopctl.MIMXRT798S"/>
          <component_dependency value="platform.drivers.gpio.MIMXRT798S"/>
          <component_dependency value="platform.drivers.cache_xcache.MIMXRT798S"/>
          <component_dependency value="platform.drivers.reset.MIMXRT798S"/>
          <component_dependency value="device.MIMXRT798S_startup.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.clock.MIMXRT798S"/>
          <component_dependency value="platform.drivers.power.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" config="true" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" config="true" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="DEVICES_Project_Template_MIMXRT798S.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT798S_system.MIMXRT798S" name="MIMXRT798S_system" brief="Device MIMXRT798S_system" version="1.0.0" full_name="Device MIMXRT798S_system" category="Device/CMSIS" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MIMXRT798S" project_base_path="device">
      <dependencies>
        <all>
          <component_dependency value="device.MIMXRT798S_CMSIS.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src" device_cores="cm33_core0_MIMXRT798S">
        <files mask="system_MIMXRT798S_cm33_core0.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S">
        <files mask="system_MIMXRT798S_cm33_core0.h"/>
      </source>
      <source relative_path="./" type="src" device_cores="cm33_core1_MIMXRT798S">
        <files mask="system_MIMXRT798S_cm33_core1.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_core1_MIMXRT798S">
        <files mask="system_MIMXRT798S_cm33_core1.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MIMXRT798S_system.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT798S_startup.MIMXRT798S" name="MIMXRT798S_startup" brief="Device MIMXRT798S_startup" version="1.0.0" full_name="Device MIMXRT798S_startup" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/MIMXRT798S" project_base_path="startup">
      <dependencies>
        <all>
          <any_of>
            <all>
              <any_of>
                <device_core_dependency value="cm33_core0_MIMXRT798S"/>
                <device_core_dependency value="cm33_core1_MIMXRT798S"/>
              </any_of>
              <component_dependency value="device.MIMXRT798S_system.MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="device.MIMXRT798S_cm33_core0.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="device.MIMXRT798S_cm33_core1.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="device.MIMXRT798S_ezhv.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="device.MIMXRT798S_hifi1.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="device.MIMXRT798S_hifi4.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
          </any_of>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include" device_cores="cm33_core0_MIMXRT798S">
        <files mask="startup_MIMXRT798S_cm33_core0.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c" device_cores="cm33_core0_MIMXRT798S">
        <files mask="startup_mimxrt798s_cm33_core0.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp" device_cores="cm33_core0_MIMXRT798S">
        <files mask="startup_mimxrt798s_cm33_core0.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include" device_cores="cm33_core1_MIMXRT798S">
        <files mask="startup_MIMXRT798S_cm33_core1.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c" device_cores="cm33_core1_MIMXRT798S">
        <files mask="startup_mimxrt798s_cm33_core1.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp" device_cores="cm33_core1_MIMXRT798S">
        <files mask="startup_mimxrt798s_cm33_core1.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MIMXRT798S_startup.MIMXRT798S.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.devices.MIMXRT798S_linker.MIMXRT798S" name="MIMXRT798S_linker" brief="Device MIMXRT798S_linker" version="1.0.0" full_name="Device MIMXRT798S_linker" category="Device/SDK Utilities" user_visible="true" type="linker" package_base_path="core/devices/MIMXRT798S" project_base_path="MIMXRT798S">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" config="true" type="linker" device_cores="cm33_core0_MIMXRT798S">
        <files mask="MIMXRT798Sxxxx_cm33_core0_ram.ld"/>
        <files mask="MIMXRT798Sxxxx_cm33_core0_flash.ld"/>
        <files mask="MIMXRT798Sxxxx_cm33_core0_flash1.ld"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" config="true" type="linker" device_cores="cm33_core1_MIMXRT798S">
        <files mask="MIMXRT798Sxxxx_cm33_core1_ram.ld"/>
      </source>
    </component>
    <component id="device.MIMXRT798S_CMSIS.MIMXRT798S" name="MIMXRT798S_CMSIS" brief="Device MIMXRT798S_cmsis" version="1.0.0" full_name="Device MIMXRT798S_cmsis" category="Device/CMSIS" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MIMXRT798S" project_base_path="device">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Include_core_cm.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S cm33_core1_MIMXRT798S">
        <files mask="fsl_device_registers.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S">
        <files mask="MIMXRT798S_cm33_core0.h"/>
        <files mask="MIMXRT798S_cm33_core0_features.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_core1_MIMXRT798S">
        <files mask="MIMXRT798S_cm33_core1.h"/>
        <files mask="MIMXRT798S_cm33_core1_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MIMXRT798S_CMSIS.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S cm33_core1_MIMXRT798S"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT798S_cm33_core0.MIMXRT798S" name="MIMXRT798S_cm33_core0" brief="Device MIMXRT798S_cm33_core0" version="1.0.0" full_name="Device MIMXRT798S_cm33_core0" category="Board Support/SDK Project Template" user_visible="true" type="other" package_base_path="core/devices/MIMXRT798S" project_base_path="device">
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="arch.RISCV_Include_core.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <device_core_dependency value="hifi1_MIMXRT798S"/>
            <device_core_dependency value="hifi4_MIMXRT798S"/>
          </any_of>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MIMXRT798S_cm33_core0.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dbi_lcdif.MIMXRT798S" name="dbi_lcdif" brief="Driver dbi_lcdif" version="1.0.1" full_name="Driver dbi_lcdif" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display/dbi/lcdif" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.mipi_dsi.MIMXRT798S"/>
          <component_dependency value="driver.dbi.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lcdif.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dbi_lcdif.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dbi_lcdif.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dbi_lcdif.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.utick.MIMXRT798S" name="utick" brief="UTICK Driver" version="2.0.5" full_name="UTICK Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/utick" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.power.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_utick.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_utick.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_utick.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dsp.MIMXRT798S" name="dsp" brief="dsp Driver" version="1.0.0" full_name="dsp Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.power.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dsp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dsp.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dsp.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma4.MIMXRT798S" name="edma" brief="EDMA Driver" version="2.10.1" full_name="EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/edma4" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="driver.edma_soc.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
        <files mask="fsl_edma_core.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_edma4.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.edma_soc.MIMXRT798S" name="edma_soc" brief="EDMA SOC Driver" version="1.0.0" full_name="EDMA SOC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma_soc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma_soc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_edma_soc.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MIMXRT798S" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MIMXRT798S"/>
          <component_dependency value="component.serial_manager.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpuart.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_uart.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MIMXRT798S" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="utility.str.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="debug_console_lite" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console_lite" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_debug_console_lite.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="debug_console_lite" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.MIMXRT798S.MIMXRT798S" name="MIMXRT798S" brief="Docs mimxrt798s" version="1.0.0" full_name="Docs mimxrt798s" category="docs/MIMXRT798S" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <dependencies>
        <device_dependency value="MIMXRT798S"/>
      </dependencies>
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for MIMXRT700-EVK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for MIMXRT700-EVK.pdf"/>
        <files mask="Getting Started with Xplorer for MIMXRT700-EVK.pdf"/>
        <files mask="MCUXpresso SDK ChangeLog_MIMXRT798S.pdf"/>
        <files mask="MCUXpresso SDK API Reference Manual_MIMXRT798S.pdf"/>
      </source>
      <source relative_path="MCUXpresso SDK API Reference Manual_MIMXRT798S" type="doc">
        <files mask="Kinetis_SDK_Block_Diagram.jpg"/>
        <files mask="a00002.html"/>
        <files mask="a00004.html"/>
        <files mask="a00006.html"/>
        <files mask="a00008.html"/>
        <files mask="a00008.js"/>
        <files mask="a00009.html"/>
        <files mask="a00009.js"/>
        <files mask="a00010.html"/>
        <files mask="a00010.js"/>
        <files mask="a00011.html"/>
        <files mask="a00011.js"/>
        <files mask="a00012.html"/>
        <files mask="a00012.js"/>
        <files mask="a00013.html"/>
        <files mask="a00013.js"/>
        <files mask="a00014.html"/>
        <files mask="a00014.js"/>
        <files mask="a00015.html"/>
        <files mask="a00015.js"/>
        <files mask="a00016.html"/>
        <files mask="a00016.js"/>
        <files mask="a00017.html"/>
        <files mask="a00017.js"/>
        <files mask="a00018.html"/>
        <files mask="a00018.js"/>
        <files mask="a00019.html"/>
        <files mask="a00019.js"/>
        <files mask="a00020.html"/>
        <files mask="a00020.js"/>
        <files mask="a00021.html"/>
        <files mask="a00021.js"/>
        <files mask="a00022.html"/>
        <files mask="a00022.js"/>
        <files mask="a00023.html"/>
        <files mask="a00023.js"/>
        <files mask="a00024.html"/>
        <files mask="a00024.js"/>
        <files mask="a00025.html"/>
        <files mask="a00025.js"/>
        <files mask="a00026.html"/>
        <files mask="a00026.js"/>
        <files mask="a00027.html"/>
        <files mask="a00027.js"/>
        <files mask="a00028.html"/>
        <files mask="a00028.js"/>
        <files mask="a00029.html"/>
        <files mask="a00029.js"/>
        <files mask="a00030.html"/>
        <files mask="a00030.js"/>
        <files mask="a00031.html"/>
        <files mask="a00031.js"/>
        <files mask="a00032.html"/>
        <files mask="a00032.js"/>
        <files mask="a00033.html"/>
        <files mask="a00033.js"/>
        <files mask="a00034.html"/>
        <files mask="a00034.js"/>
        <files mask="a00035.html"/>
        <files mask="a00035.js"/>
        <files mask="a00036.html"/>
        <files mask="a00036.js"/>
        <files mask="a00037.html"/>
        <files mask="a00037.js"/>
        <files mask="a00038.html"/>
        <files mask="a00038.js"/>
        <files mask="a00039.html"/>
        <files mask="a00039.js"/>
        <files mask="a00040.html"/>
        <files mask="a00040.js"/>
        <files mask="a00041.html"/>
        <files mask="a00041.js"/>
        <files mask="a00042.html"/>
        <files mask="a00042.js"/>
        <files mask="a00043.html"/>
        <files mask="a00043.js"/>
        <files mask="a00044.html"/>
        <files mask="a00044.js"/>
        <files mask="a00045.html"/>
        <files mask="a00045.js"/>
        <files mask="a00046.html"/>
        <files mask="a00046.js"/>
        <files mask="a00047.html"/>
        <files mask="a00047.js"/>
        <files mask="a00048.html"/>
        <files mask="a00048.js"/>
        <files mask="a00049.html"/>
        <files mask="a00049.js"/>
        <files mask="a00050.html"/>
        <files mask="a00050.js"/>
        <files mask="a00051.html"/>
        <files mask="a00051.js"/>
        <files mask="a00052.html"/>
        <files mask="a00052.js"/>
        <files mask="a00053.html"/>
        <files mask="a00053.js"/>
        <files mask="a00054.html"/>
        <files mask="a00054.js"/>
        <files mask="a00055.html"/>
        <files mask="a00055.js"/>
        <files mask="a00056.html"/>
        <files mask="a00056.js"/>
        <files mask="a00057.html"/>
        <files mask="a00057.js"/>
        <files mask="a00058.html"/>
        <files mask="a00058.js"/>
        <files mask="a00059.html"/>
        <files mask="a00059.js"/>
        <files mask="a00060.html"/>
        <files mask="a00060.js"/>
        <files mask="a00061.html"/>
        <files mask="a00061.js"/>
        <files mask="a00062.html"/>
        <files mask="a00062.js"/>
        <files mask="a00063.html"/>
        <files mask="a00063.js"/>
        <files mask="a00064.html"/>
        <files mask="a00064.js"/>
        <files mask="a00065.html"/>
        <files mask="a00065.js"/>
        <files mask="a00066.html"/>
        <files mask="a00066.js"/>
        <files mask="a00067.html"/>
        <files mask="a00067.js"/>
        <files mask="a00068.html"/>
        <files mask="a00068.js"/>
        <files mask="a00069.html"/>
        <files mask="a00069.js"/>
        <files mask="a00070.html"/>
        <files mask="a00070.js"/>
        <files mask="a00071.html"/>
        <files mask="a00071.js"/>
        <files mask="a00072.html"/>
        <files mask="a00072.js"/>
        <files mask="a00073.html"/>
        <files mask="a00073.js"/>
        <files mask="a00074.html"/>
        <files mask="a00074.js"/>
        <files mask="a00075.html"/>
        <files mask="a00075.js"/>
        <files mask="a00076.html"/>
        <files mask="a00076.js"/>
        <files mask="a00077.html"/>
        <files mask="a00077.js"/>
        <files mask="a00078.html"/>
        <files mask="a00078.js"/>
        <files mask="a00079.html"/>
        <files mask="a00079.js"/>
        <files mask="a00080.html"/>
        <files mask="a00080.js"/>
        <files mask="a00081.html"/>
        <files mask="a00081.js"/>
        <files mask="a00243.html"/>
        <files mask="a00243.js"/>
        <files mask="a00244.html"/>
        <files mask="a00244.js"/>
        <files mask="a00245.html"/>
        <files mask="a00245.js"/>
        <files mask="a00246.html"/>
        <files mask="a00246.js"/>
        <files mask="a00247.html"/>
        <files mask="a00248.html"/>
        <files mask="a00248.js"/>
        <files mask="a00249.html"/>
        <files mask="a00249.js"/>
        <files mask="a00250.html"/>
        <files mask="a00250.js"/>
        <files mask="a00251.html"/>
        <files mask="a00251.js"/>
        <files mask="a00252.html"/>
        <files mask="a00252.js"/>
        <files mask="a00253.html"/>
        <files mask="a00253.js"/>
        <files mask="a00254.html"/>
        <files mask="a00254.js"/>
        <files mask="a00255.html"/>
        <files mask="a00255.js"/>
        <files mask="a00256.html"/>
        <files mask="a00256.js"/>
        <files mask="a00257.html"/>
        <files mask="a00258.html"/>
        <files mask="a00258.js"/>
        <files mask="a00259.html"/>
        <files mask="a00259.js"/>
        <files mask="a00260.html"/>
        <files mask="a00260.js"/>
        <files mask="a00261.html"/>
        <files mask="a00261.js"/>
        <files mask="a00262.html"/>
        <files mask="a00262.js"/>
        <files mask="a00263.html"/>
        <files mask="a00263.js"/>
        <files mask="a00264.html"/>
        <files mask="a00264.js"/>
        <files mask="a00265.html"/>
        <files mask="a00266.html"/>
        <files mask="a00266.js"/>
        <files mask="a00267.html"/>
        <files mask="a00267.js"/>
        <files mask="a00268.html"/>
        <files mask="a00268.js"/>
        <files mask="a00269.html"/>
        <files mask="a00270.html"/>
        <files mask="a00271.html"/>
        <files mask="a00271.js"/>
        <files mask="a00272.html"/>
        <files mask="a00272.js"/>
        <files mask="a00273.html"/>
        <files mask="a00274.html"/>
        <files mask="a00274.js"/>
        <files mask="a00275.html"/>
        <files mask="a00275.js"/>
        <files mask="a00276.html"/>
        <files mask="a00276.js"/>
        <files mask="a00277.html"/>
        <files mask="a00277.js"/>
        <files mask="a00278.html"/>
        <files mask="a00278.js"/>
        <files mask="a00279.html"/>
        <files mask="a00280.html"/>
        <files mask="a00281.html"/>
        <files mask="a00282.html"/>
        <files mask="a00282.js"/>
        <files mask="a00283.html"/>
        <files mask="a00283.js"/>
        <files mask="a00284.html"/>
        <files mask="a00284.js"/>
        <files mask="a00285.html"/>
        <files mask="a00285.js"/>
        <files mask="a00286.html"/>
        <files mask="a00286.js"/>
        <files mask="a00287.html"/>
        <files mask="a00287.js"/>
        <files mask="a00288.html"/>
        <files mask="a00290.html"/>
        <files mask="arm_logo.png"/>
        <files mask="bc_s.png"/>
        <files mask="bdwn.png"/>
        <files mask="closed.png"/>
        <files mask="customdoxygen.css"/>
        <files mask="debug_console_overview.jpg"/>
        <files mask="dir_028e6a7c0316a508a40a4af1c91ab09c.html"/>
        <files mask="dir_07b86ffc266b39efa5bbdc0e9fdb330a.html"/>
        <files mask="dir_07e1426f8dd4e39dafd7689df7b682b1.html"/>
        <files mask="dir_0af313490ca1ad981940afeb7a83c81c.html"/>
        <files mask="dir_0c267f045edb9b0ef64e9a860fd099c4.html"/>
        <files mask="dir_18eda99a8be7f680d830ce4dc9ba42dc.html"/>
        <files mask="dir_205e5e1b5d1755b16256d558be25d498.html"/>
        <files mask="dir_20a30dff5145d917f6c5f8c5fb0461c0.html"/>
        <files mask="dir_212ec26797e01da52ed0614e31a0549a.html"/>
        <files mask="dir_22cbbd27e16e87caa10f675e5ce8b9df.html"/>
        <files mask="dir_24b2fdd73bf9ba14c9f5a114ba3b7f37.html"/>
        <files mask="dir_24d773129451c3fce97605b6e8c21df6.html"/>
        <files mask="dir_2795757a0106c91488b4d539ecf9baca.html"/>
        <files mask="dir_2c5899ae69b445467b5abbf9fd844408.html"/>
        <files mask="dir_330361872226932e38d595a6615c9640.html"/>
        <files mask="dir_39452af5b1f60c23c24b1eb029a2b53f.html"/>
        <files mask="dir_3d87c2df58032c55a697acbe8461844d.html"/>
        <files mask="dir_409f97388efe006bc3438b95e9edef48.html"/>
        <files mask="dir_430e8835dfc2ff760d037550d4acd4c3.html"/>
        <files mask="dir_444a70473d94875dbb4d8eb059b6f200.html"/>
        <files mask="dir_449ba06a2ec526b072dbce5de12a45a5.html"/>
        <files mask="dir_452dd02bd8ec2103d6565d0dcd4926d4.html"/>
        <files mask="dir_4abf89e9f673f8ecb77d953c2ad09976.html"/>
        <files mask="dir_4bdb2d6d57b2051e97c661fd1122a71f.html"/>
        <files mask="dir_51c73ba289f0e8fe50ccaff542140dcf.html"/>
        <files mask="dir_5b4d17cef729f4d885118c384797319b.html"/>
        <files mask="dir_5e04f61537241167860da20d8e502a75.html"/>
        <files mask="dir_645a6fd142504b70264962515b956c1a.html"/>
        <files mask="dir_652f04a32e3c8b8aef12551da398a8ab.html"/>
        <files mask="dir_6d872b41436c1f064b8efb5011c7113c.html"/>
        <files mask="dir_6debc4a1ac968cc3337dcd62f2c9c86d.html"/>
        <files mask="dir_6ee7bd6a1d6d3d32d37dfac016f28638.html"/>
        <files mask="dir_7ac0bfc132cac1a5157e99849929797e.html"/>
        <files mask="dir_7e10c28399b01a8ec0177b47832f5af2.html"/>
        <files mask="dir_7e54905a8523af8ff4222cbb27bdafec.html"/>
        <files mask="dir_8072ca6cdeca8c705203cc0f896a3705.html"/>
        <files mask="dir_83c4f67939b2e50b6dc50fe3fc259b2d.html"/>
        <files mask="dir_89fd88b21369a8fc685427310a5a5fe7.html"/>
        <files mask="dir_8dbde8a1335e4b1cda4c512e79d8151c.html"/>
        <files mask="dir_8f5c973d26740daab895a32d43886c59.html"/>
        <files mask="dir_919453c527cd3b17be9d0977f49b7a97.html"/>
        <files mask="dir_93c235c0dbb1c2d60c8d22c7fa15351a.html"/>
        <files mask="dir_96cefa23536c68b3da13bbebf03b475a.html"/>
        <files mask="dir_97879f77cafaedc6c6b7c8e7e6bcf419.html"/>
        <files mask="dir_9d68a78282ebc70c2e05ee1f171dd960.html"/>
        <files mask="dir_9f5564a22f851ae021e1c4fbc718d8b3.html"/>
        <files mask="dir_a343a3e9cbb710280ccd0de2056b945d.html"/>
        <files mask="dir_a3e8f1feb8c30c12d24fc9c7995a15c1.html"/>
        <files mask="dir_a6802cba09be1d4b230dbd2786f9b35d.html"/>
        <files mask="dir_a7783dd1e77003151de6ca32f81c6d45.html"/>
        <files mask="dir_a9f7142d3928d78c4011b2f65adff297.html"/>
        <files mask="dir_ab4b5d6843711aca26ae0a84be0c2a08.html"/>
        <files mask="dir_af2eb411b7ba9e775529c2c86d487433.html"/>
        <files mask="dir_b07b1803b08e3bfa8752acf7d436415b.html"/>
        <files mask="dir_b532a1651772451ccd6119aa45deac91.html"/>
        <files mask="dir_b5759f6cd324301c8d375e44421eccc5.html"/>
        <files mask="dir_b84915bf624d7b08b89662c4b7441724.html"/>
        <files mask="dir_bebc14e255be79244de9e03d794361f1.html"/>
        <files mask="dir_bf71e8795d5ec3bf1a04b9a740296e07.html"/>
        <files mask="dir_c5a52a81292cf9a5167198f4f346d6d9.html"/>
        <files mask="dir_c690c87da174a355fb05eff546d38432.html"/>
        <files mask="dir_c6b42b387c70a5e04e4971dec6a64262.html"/>
        <files mask="dir_c8d5f819861f1426b3bac6df9a5385a8.html"/>
        <files mask="dir_cb9dde68f897354cffd4d3b5d66922ee.html"/>
        <files mask="dir_cd7626eece38a791a6ffa51af2564203.html"/>
        <files mask="dir_d0b0cea4c1afa919405231e98537b73c.html"/>
        <files mask="dir_e47d2a5b37e95950e42a18b5143358a0.html"/>
        <files mask="dir_e4de89367910470a93af14a1ec08b10c.html"/>
        <files mask="dir_ea982a4a90bbf64c8a612131ad2f0fcb.html"/>
        <files mask="dir_eb78a2695df30cd843f578001c009203.html"/>
        <files mask="dir_f13c33fe559295a85a1a1fd70d523a11.html"/>
        <files mask="dir_f30550e2433a9e3eaf19043f7ead6787.html"/>
        <files mask="dir_f7e99b515278d57327e2df3b2ab543bb.html"/>
        <files mask="dir_fb07d2fc1162a342add62d5157dce8c6.html"/>
        <files mask="dir_fd2be0ed4db85d70259f5a97a935dd15.html"/>
        <files mask="doxygen.css"/>
        <files mask="doxygen.png"/>
        <files mask="dynsections.js"/>
        <files mask="fs_logo.gif"/>
        <files mask="ftv2blank.png"/>
        <files mask="ftv2cl.png"/>
        <files mask="ftv2doc.png"/>
        <files mask="ftv2folderclosed.png"/>
        <files mask="ftv2folderopen.png"/>
        <files mask="ftv2lastnode.png"/>
        <files mask="ftv2link.png"/>
        <files mask="ftv2mlastnode.png"/>
        <files mask="ftv2mnode.png"/>
        <files mask="ftv2mo.png"/>
        <files mask="ftv2node.png"/>
        <files mask="ftv2ns.png"/>
        <files mask="ftv2plastnode.png"/>
        <files mask="ftv2pnode.png"/>
        <files mask="ftv2splitbar.png"/>
        <files mask="ftv2vertline.png"/>
        <files mask="index.html"/>
        <files mask="jquery.js"/>
        <files mask="modules.html"/>
        <files mask="modules.js"/>
        <files mask="nav_f.png"/>
        <files mask="nav_g.png"/>
        <files mask="nav_h.png"/>
        <files mask="navtree.css"/>
        <files mask="navtree.js"/>
        <files mask="navtreeindex0.js"/>
        <files mask="navtreeindex1.js"/>
        <files mask="navtreeindex10.js"/>
        <files mask="navtreeindex11.js"/>
        <files mask="navtreeindex12.js"/>
        <files mask="navtreeindex13.js"/>
        <files mask="navtreeindex14.js"/>
        <files mask="navtreeindex15.js"/>
        <files mask="navtreeindex16.js"/>
        <files mask="navtreeindex17.js"/>
        <files mask="navtreeindex18.js"/>
        <files mask="navtreeindex19.js"/>
        <files mask="navtreeindex2.js"/>
        <files mask="navtreeindex20.js"/>
        <files mask="navtreeindex21.js"/>
        <files mask="navtreeindex22.js"/>
        <files mask="navtreeindex23.js"/>
        <files mask="navtreeindex24.js"/>
        <files mask="navtreeindex25.js"/>
        <files mask="navtreeindex26.js"/>
        <files mask="navtreeindex27.js"/>
        <files mask="navtreeindex28.js"/>
        <files mask="navtreeindex29.js"/>
        <files mask="navtreeindex3.js"/>
        <files mask="navtreeindex30.js"/>
        <files mask="navtreeindex31.js"/>
        <files mask="navtreeindex4.js"/>
        <files mask="navtreeindex5.js"/>
        <files mask="navtreeindex6.js"/>
        <files mask="navtreeindex7.js"/>
        <files mask="navtreeindex8.js"/>
        <files mask="navtreeindex9.js"/>
        <files mask="nxp_logo_small.png"/>
        <files mask="open.png"/>
        <files mask="pages.html"/>
        <files mask="resize.js"/>
        <files mask="sync_off.png"/>
        <files mask="sync_on.png"/>
        <files mask="tab_a.png"/>
        <files mask="tab_b.png"/>
        <files mask="tab_h.png"/>
        <files mask="tab_s.png"/>
        <files mask="tabs.css"/>
      </source>
      <source relative_path="MCUXpresso SDK API Reference Manual_MIMXRT798S/search" type="doc">
        <files mask="all_5f.html"/>
        <files mask="all_5f.js"/>
        <files mask="all_61.html"/>
        <files mask="all_61.js"/>
        <files mask="all_62.html"/>
        <files mask="all_62.js"/>
        <files mask="all_63.html"/>
        <files mask="all_63.js"/>
        <files mask="all_64.html"/>
        <files mask="all_64.js"/>
        <files mask="all_65.html"/>
        <files mask="all_65.js"/>
        <files mask="all_66.html"/>
        <files mask="all_66.js"/>
        <files mask="all_67.html"/>
        <files mask="all_67.js"/>
        <files mask="all_68.html"/>
        <files mask="all_68.js"/>
        <files mask="all_69.html"/>
        <files mask="all_69.js"/>
        <files mask="all_6a.html"/>
        <files mask="all_6a.js"/>
        <files mask="all_6b.html"/>
        <files mask="all_6b.js"/>
        <files mask="all_6c.html"/>
        <files mask="all_6c.js"/>
        <files mask="all_6d.html"/>
        <files mask="all_6d.js"/>
        <files mask="all_6e.html"/>
        <files mask="all_6e.js"/>
        <files mask="all_6f.html"/>
        <files mask="all_6f.js"/>
        <files mask="all_70.html"/>
        <files mask="all_70.js"/>
        <files mask="all_71.html"/>
        <files mask="all_71.js"/>
        <files mask="all_72.html"/>
        <files mask="all_72.js"/>
        <files mask="all_73.html"/>
        <files mask="all_73.js"/>
        <files mask="all_74.html"/>
        <files mask="all_74.js"/>
        <files mask="all_75.html"/>
        <files mask="all_75.js"/>
        <files mask="all_76.html"/>
        <files mask="all_76.js"/>
        <files mask="all_77.html"/>
        <files mask="all_77.js"/>
        <files mask="all_78.html"/>
        <files mask="all_78.js"/>
        <files mask="all_79.html"/>
        <files mask="all_79.js"/>
        <files mask="all_7a.html"/>
        <files mask="all_7a.js"/>
        <files mask="classes_5f.html"/>
        <files mask="classes_5f.js"/>
        <files mask="classes_61.html"/>
        <files mask="classes_61.js"/>
        <files mask="classes_62.html"/>
        <files mask="classes_62.js"/>
        <files mask="classes_63.html"/>
        <files mask="classes_63.js"/>
        <files mask="classes_64.html"/>
        <files mask="classes_64.js"/>
        <files mask="classes_65.html"/>
        <files mask="classes_65.js"/>
        <files mask="classes_66.html"/>
        <files mask="classes_66.js"/>
        <files mask="classes_67.html"/>
        <files mask="classes_67.js"/>
        <files mask="classes_68.html"/>
        <files mask="classes_68.js"/>
        <files mask="classes_69.html"/>
        <files mask="classes_69.js"/>
        <files mask="classes_6a.html"/>
        <files mask="classes_6a.js"/>
        <files mask="classes_6c.html"/>
        <files mask="classes_6c.js"/>
        <files mask="classes_6d.html"/>
        <files mask="classes_6d.js"/>
        <files mask="classes_6f.html"/>
        <files mask="classes_6f.js"/>
        <files mask="classes_70.html"/>
        <files mask="classes_70.js"/>
        <files mask="classes_73.html"/>
        <files mask="classes_73.js"/>
        <files mask="classes_74.html"/>
        <files mask="classes_74.js"/>
        <files mask="classes_75.html"/>
        <files mask="classes_75.js"/>
        <files mask="classes_77.html"/>
        <files mask="classes_77.js"/>
        <files mask="classes_78.html"/>
        <files mask="classes_78.js"/>
        <files mask="close.png"/>
        <files mask="enums_5f.html"/>
        <files mask="enums_5f.js"/>
        <files mask="enums_61.html"/>
        <files mask="enums_61.js"/>
        <files mask="enums_62.html"/>
        <files mask="enums_62.js"/>
        <files mask="enums_63.html"/>
        <files mask="enums_63.js"/>
        <files mask="enums_64.html"/>
        <files mask="enums_64.js"/>
        <files mask="enums_65.html"/>
        <files mask="enums_65.js"/>
        <files mask="enums_66.html"/>
        <files mask="enums_66.js"/>
        <files mask="enums_67.html"/>
        <files mask="enums_67.js"/>
        <files mask="enums_68.html"/>
        <files mask="enums_68.js"/>
        <files mask="enums_69.html"/>
        <files mask="enums_69.js"/>
        <files mask="enums_6a.html"/>
        <files mask="enums_6a.js"/>
        <files mask="enums_6c.html"/>
        <files mask="enums_6c.js"/>
        <files mask="enums_6d.html"/>
        <files mask="enums_6d.js"/>
        <files mask="enums_6f.html"/>
        <files mask="enums_6f.js"/>
        <files mask="enums_70.html"/>
        <files mask="enums_70.js"/>
        <files mask="enums_72.html"/>
        <files mask="enums_72.js"/>
        <files mask="enums_73.html"/>
        <files mask="enums_73.js"/>
        <files mask="enums_74.html"/>
        <files mask="enums_74.js"/>
        <files mask="enums_75.html"/>
        <files mask="enums_75.js"/>
        <files mask="enums_78.html"/>
        <files mask="enums_78.js"/>
        <files mask="enumvalues_6b.html"/>
        <files mask="enumvalues_6b.js"/>
        <files mask="enumvalues_6c.html"/>
        <files mask="enumvalues_6c.js"/>
        <files mask="enumvalues_78.html"/>
        <files mask="enumvalues_78.js"/>
        <files mask="functions_61.html"/>
        <files mask="functions_61.js"/>
        <files mask="functions_62.html"/>
        <files mask="functions_62.js"/>
        <files mask="functions_63.html"/>
        <files mask="functions_63.js"/>
        <files mask="functions_64.html"/>
        <files mask="functions_64.js"/>
        <files mask="functions_65.html"/>
        <files mask="functions_65.js"/>
        <files mask="functions_66.html"/>
        <files mask="functions_66.js"/>
        <files mask="functions_67.html"/>
        <files mask="functions_67.js"/>
        <files mask="functions_68.html"/>
        <files mask="functions_68.js"/>
        <files mask="functions_69.html"/>
        <files mask="functions_69.js"/>
        <files mask="functions_6a.html"/>
        <files mask="functions_6a.js"/>
        <files mask="functions_6c.html"/>
        <files mask="functions_6c.js"/>
        <files mask="functions_6d.html"/>
        <files mask="functions_6d.js"/>
        <files mask="functions_6f.html"/>
        <files mask="functions_6f.js"/>
        <files mask="functions_70.html"/>
        <files mask="functions_70.js"/>
        <files mask="functions_72.html"/>
        <files mask="functions_72.js"/>
        <files mask="functions_73.html"/>
        <files mask="functions_73.js"/>
        <files mask="functions_74.html"/>
        <files mask="functions_74.js"/>
        <files mask="functions_75.html"/>
        <files mask="functions_75.js"/>
        <files mask="functions_77.html"/>
        <files mask="functions_77.js"/>
        <files mask="functions_78.html"/>
        <files mask="functions_78.js"/>
        <files mask="groups_61.html"/>
        <files mask="groups_61.js"/>
        <files mask="groups_62.html"/>
        <files mask="groups_62.js"/>
        <files mask="groups_63.html"/>
        <files mask="groups_63.js"/>
        <files mask="groups_64.html"/>
        <files mask="groups_64.js"/>
        <files mask="groups_65.html"/>
        <files mask="groups_65.js"/>
        <files mask="groups_66.html"/>
        <files mask="groups_66.js"/>
        <files mask="groups_67.html"/>
        <files mask="groups_67.js"/>
        <files mask="groups_69.html"/>
        <files mask="groups_69.js"/>
        <files mask="groups_6a.html"/>
        <files mask="groups_6a.js"/>
        <files mask="groups_6c.html"/>
        <files mask="groups_6c.js"/>
        <files mask="groups_6d.html"/>
        <files mask="groups_6d.js"/>
        <files mask="groups_6f.html"/>
        <files mask="groups_6f.js"/>
        <files mask="groups_70.html"/>
        <files mask="groups_70.js"/>
        <files mask="groups_72.html"/>
        <files mask="groups_72.js"/>
        <files mask="groups_73.html"/>
        <files mask="groups_73.js"/>
        <files mask="groups_74.html"/>
        <files mask="groups_74.js"/>
        <files mask="groups_75.html"/>
        <files mask="groups_75.js"/>
        <files mask="groups_77.html"/>
        <files mask="groups_77.js"/>
        <files mask="groups_78.html"/>
        <files mask="groups_78.js"/>
        <files mask="mag_sel.png"/>
        <files mask="nomatches.html"/>
        <files mask="pages_61.html"/>
        <files mask="pages_61.js"/>
        <files mask="pages_64.html"/>
        <files mask="pages_64.js"/>
        <files mask="pages_69.html"/>
        <files mask="pages_69.js"/>
        <files mask="pages_74.html"/>
        <files mask="pages_74.js"/>
        <files mask="search.css"/>
        <files mask="search.js"/>
        <files mask="search_l.png"/>
        <files mask="search_m.png"/>
        <files mask="search_r.png"/>
        <files mask="typedefs_62.html"/>
        <files mask="typedefs_62.js"/>
        <files mask="typedefs_63.html"/>
        <files mask="typedefs_63.js"/>
        <files mask="typedefs_64.html"/>
        <files mask="typedefs_64.js"/>
        <files mask="typedefs_65.html"/>
        <files mask="typedefs_65.js"/>
        <files mask="typedefs_66.html"/>
        <files mask="typedefs_66.js"/>
        <files mask="typedefs_68.html"/>
        <files mask="typedefs_68.js"/>
        <files mask="typedefs_69.html"/>
        <files mask="typedefs_69.js"/>
        <files mask="typedefs_6c.html"/>
        <files mask="typedefs_6c.js"/>
        <files mask="typedefs_6f.html"/>
        <files mask="typedefs_6f.js"/>
        <files mask="typedefs_70.html"/>
        <files mask="typedefs_70.js"/>
        <files mask="typedefs_72.html"/>
        <files mask="typedefs_72.js"/>
        <files mask="typedefs_73.html"/>
        <files mask="typedefs_73.js"/>
        <files mask="typedefs_74.html"/>
        <files mask="typedefs_74.js"/>
        <files mask="typedefs_75.html"/>
        <files mask="typedefs_75.js"/>
        <files mask="typedefs_78.html"/>
        <files mask="typedefs_78.js"/>
        <files mask="variables_5f.html"/>
        <files mask="variables_5f.js"/>
        <files mask="variables_61.html"/>
        <files mask="variables_61.js"/>
        <files mask="variables_62.html"/>
        <files mask="variables_62.js"/>
        <files mask="variables_63.html"/>
        <files mask="variables_63.js"/>
        <files mask="variables_64.html"/>
        <files mask="variables_64.js"/>
        <files mask="variables_65.html"/>
        <files mask="variables_65.js"/>
        <files mask="variables_66.html"/>
        <files mask="variables_66.js"/>
        <files mask="variables_67.html"/>
        <files mask="variables_67.js"/>
        <files mask="variables_68.html"/>
        <files mask="variables_68.js"/>
        <files mask="variables_69.html"/>
        <files mask="variables_69.js"/>
        <files mask="variables_6a.html"/>
        <files mask="variables_6a.js"/>
        <files mask="variables_6b.html"/>
        <files mask="variables_6b.js"/>
        <files mask="variables_6c.html"/>
        <files mask="variables_6c.js"/>
        <files mask="variables_6d.html"/>
        <files mask="variables_6d.js"/>
        <files mask="variables_6e.html"/>
        <files mask="variables_6e.js"/>
        <files mask="variables_6f.html"/>
        <files mask="variables_6f.js"/>
        <files mask="variables_70.html"/>
        <files mask="variables_70.js"/>
        <files mask="variables_71.html"/>
        <files mask="variables_71.js"/>
        <files mask="variables_72.html"/>
        <files mask="variables_72.js"/>
        <files mask="variables_73.html"/>
        <files mask="variables_73.js"/>
        <files mask="variables_74.html"/>
        <files mask="variables_74.js"/>
        <files mask="variables_75.html"/>
        <files mask="variables_75.js"/>
        <files mask="variables_76.html"/>
        <files mask="variables_76.js"/>
        <files mask="variables_77.html"/>
        <files mask="variables_77.js"/>
        <files mask="variables_78.html"/>
        <files mask="variables_78.js"/>
        <files mask="variables_79.html"/>
        <files mask="variables_79.js"/>
        <files mask="variables_7a.html"/>
        <files mask="variables_7a.js"/>
      </source>
    </component>
    <component id="platform.drivers.sai_edma.MIMXRT798S" name="sai_edma" brief="SAI EDMA Driver" version="2.7.1" full_name="SAI EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.sai.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sai_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpflexcomm_lpuart_edma.MIMXRT798S" name="lpuart_edma" brief="LPUART EDMA Driver" version="2.0.0" full_name="LPUART EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpflexcomm/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpuart_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpflexcomm_lpspi_edma.MIMXRT798S" name="lpspi_edma" brief="LPSPI EDMA Driver" version="2.1.1" full_name="LPSPI EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpflexcomm/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpspi.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpspi_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpflexcomm_lpi2c_edma.MIMXRT798S" name="lpi2c_edma" brief="LPI2C EDMA Driver" version="2.0.1" full_name="LPI2C EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpflexcomm/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpi2c.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpi2c_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_cmsis.MIMXRT798S" name="lpuart_cmsis" brief="LPUART CMSIS Driver" version="2.6.0" full_name="LPUART CMSIS Driver" category="CMSIS Driver/USART" user_visible="true" type="CMSIS_driver" package_base_path="core/cmsis_drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpflexcomm_lpuart_edma.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpuart.MIMXRT798S"/>
          <component_dependency value="CMSIS_Driver_Include.USART.MIMXRT798S"/>
          <component_dependency value="RTE_Device.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_lpuart.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_cmsis.MIMXRT798S" name="lpspi_cmsis" brief="LPSPI CMSIS Driver" version="2.9.0" full_name="LPSPI CMSIS Driver" category="CMSIS Driver/SPI" user_visible="true" type="CMSIS_driver" package_base_path="core/cmsis_drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpflexcomm_lpspi_edma.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpspi.MIMXRT798S"/>
          <component_dependency value="CMSIS_Driver_Include.SPI.MIMXRT798S"/>
          <component_dependency value="RTE_Device.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_lpspi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_cmsis.MIMXRT798S" name="lpi2c_cmsis" brief="LPI2C CMSIS Driver" version="2.5.0" full_name="LPI2C CMSIS Driver" category="CMSIS Driver/I2C" user_visible="true" type="CMSIS_driver" package_base_path="core/cmsis_drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpflexcomm_lpi2c_edma.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpi2c.MIMXRT798S"/>
          <component_dependency value="CMSIS_Driver_Include.I2C.MIMXRT798S"/>
          <component_dependency value="RTE_Device.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_cmsis.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cmsis_lpi2c.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.xspi_edma.MIMXRT798S" name="xspi_edma" brief="XSPI EDMA Driver" version="2.0.2" full_name="XSPI EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/xspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.xspi.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_xspi_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_xspi_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_xspi_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_mculcd_edma.MIMXRT798S" name="flexio_mculcd_edma" brief="FLEXIO MCULCD EDMA Driver" version="2.0.5" full_name="FLEXIO MCULCD EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio/mculcd" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.flexio_mculcd.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_mculcd_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_mculcd_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio_mculcd_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi_edma.MIMXRT798S" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.3.0" full_name="FLEXIO SPI EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio/spi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.flexio_spi.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio_spi_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart_edma.MIMXRT798S" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.4.1" full_name="FLEXIO UART EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio/uart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.flexio_uart.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio_uart_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pdm_edma.MIMXRT798S" name="pdm_edma" brief="PDM EDMA Driver" version="2.6.3" full_name="PDM EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/pdm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <component_dependency value="platform.drivers.pdm.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pdm_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pdm_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pdm_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.crc.MIMXRT798S" name="crc" brief="CRC Driver" version="2.0.4" full_name="CRC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/crc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_crc.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.itrc.MIMXRT798S" name="itrc" brief="itrc Driver" version="2.4.0" full_name="itrc Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/itrc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_itrc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_itrc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_itrc.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_freqme.MIMXRT798S" name="lpc_freqme" brief="lpc_freqme Driver" version="2.1.2" full_name="lpc_freqme Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpc_freqme" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_freqme.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_freqme.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_freqme.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.puf_v3.MIMXRT798S" name="PUFv3" brief="PUFv3 Driver" version="2.0.3" full_name="PUFv3 Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/puf_v3" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_puf_v3.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_puf_v3.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_puf_v3.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sctimer.MIMXRT798S" name="sctimer" brief="SCT Driver" version="2.5.1" full_name="SCT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/sctimer" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sctimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sctimer.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.syspm.MIMXRT798S" name="syspm" brief="SYSPM Driver" version="2.3.0" full_name="SYSPM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/syspm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_syspm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_syspm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_syspm.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cache_xcache.MIMXRT798S" name="cache_xcache" brief="CACHE XCACHE Driver" version="2.0.1" full_name="CACHE XCACHE Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/cache/xcache" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cache_xcache.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux_connections.MIMXRT798S" name="inputmux_connections" brief="Inputmux_connections Driver" version="2.0.1" full_name="Inputmux_connections Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_inputmux_connections.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_NN_Source.MIMXRT798S" name="CMSIS_NN_Library_Source" brief="CMSIS-NN Library" version="5.0.0" full_name="CMSIS NN Library Source" category="CMSIS/NN" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/NN" project_base_path="CMSIS/NN">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_DSP_Source.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source exclude="true" relative_path="./" type="doc">
        <files mask="README.md" hidden="true"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="arm_nnfunctions.h"/>
        <files mask="arm_nnsupportfunctions.h"/>
        <files mask="arm_nn_math_types.h"/>
        <files mask="arm_nn_tables.h"/>
        <files mask="arm_nn_types.h"/>
      </source>
      <source relative_path="Include/Internal" type="c_include">
        <files mask="arm_nn_compiler.h"/>
      </source>
      <source relative_path="Source/ActivationFunctions" type="src">
        <files mask="arm_nn_activation_s16.c"/>
        <files mask="arm_relu6_s8.c"/>
        <files mask="arm_relu_q15.c"/>
        <files mask="arm_relu_q7.c"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_elementwise_add_s16.c"/>
        <files mask="arm_elementwise_add_s8.c"/>
        <files mask="arm_elementwise_mul_s16.c"/>
        <files mask="arm_elementwise_mul_s16_s8.c"/>
        <files mask="arm_elementwise_mul_s8.c"/>
      </source>
      <source relative_path="Source/ConcatenationFunctions" type="src">
        <files mask="arm_concatenation_s8_w.c"/>
        <files mask="arm_concatenation_s8_x.c"/>
        <files mask="arm_concatenation_s8_y.c"/>
        <files mask="arm_concatenation_s8_z.c"/>
      </source>
      <source relative_path="Source/ConvolutionFunctions" type="src">
        <files mask="arm_convolve_1x1_s4.c"/>
        <files mask="arm_convolve_1x1_s4_fast.c"/>
        <files mask="arm_convolve_1x1_s8.c"/>
        <files mask="arm_convolve_1x1_s8_fast.c"/>
        <files mask="arm_convolve_1_x_n_s8.c"/>
        <files mask="arm_convolve_fast_s16.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s16.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s4.c"/>
        <files mask="arm_convolve_get_buffer_sizes_s8.c"/>
        <files mask="arm_convolve_s16.c"/>
        <files mask="arm_convolve_s4.c"/>
        <files mask="arm_convolve_s8.c"/>
        <files mask="arm_convolve_wrapper_s16.c"/>
        <files mask="arm_convolve_wrapper_s4.c"/>
        <files mask="arm_convolve_wrapper_s8.c"/>
        <files mask="arm_depthwise_conv_3x3_s8.c"/>
        <files mask="arm_depthwise_conv_fast_s16.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s16.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s4.c"/>
        <files mask="arm_depthwise_conv_get_buffer_sizes_s8.c"/>
        <files mask="arm_depthwise_conv_s16.c"/>
        <files mask="arm_depthwise_conv_s4.c"/>
        <files mask="arm_depthwise_conv_s4_opt.c"/>
        <files mask="arm_depthwise_conv_s8.c"/>
        <files mask="arm_depthwise_conv_s8_opt.c"/>
        <files mask="arm_depthwise_conv_wrapper_s16.c"/>
        <files mask="arm_depthwise_conv_wrapper_s4.c"/>
        <files mask="arm_depthwise_conv_wrapper_s8.c"/>
        <files mask="arm_nn_depthwise_conv_s8_core.c"/>
        <files mask="arm_nn_mat_mult_kernel_s4_s16.c"/>
        <files mask="arm_nn_mat_mult_kernel_s8_s16.c"/>
        <files mask="arm_nn_mat_mult_s8.c"/>
        <files mask="arm_transpose_conv_get_buffer_sizes_s8.c"/>
        <files mask="arm_transpose_conv_s8.c"/>
      </source>
      <source relative_path="Source/FullyConnectedFunctions" type="src">
        <files mask="arm_fully_connected_get_buffer_sizes_s16.c"/>
        <files mask="arm_fully_connected_get_buffer_sizes_s8.c"/>
        <files mask="arm_fully_connected_s16.c"/>
        <files mask="arm_fully_connected_s4.c"/>
        <files mask="arm_fully_connected_s8.c"/>
        <files mask="arm_vector_sum_s8.c"/>
      </source>
      <source relative_path="Source/LSTMFunctions" type="src">
        <files mask="arm_lstm_unidirectional_s8_s16.c"/>
      </source>
      <source relative_path="Source/NNSupportFunctions" type="src">
        <files mask="arm_nntables.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_padded_s8.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s16.c"/>
        <files mask="arm_nn_depthwise_conv_nt_t_s8.c"/>
        <files mask="arm_nn_lstm_calculate_gate_s8_s16.c"/>
        <files mask="arm_nn_lstm_step_s8_s16.c"/>
        <files mask="arm_nn_lstm_update_cell_state_s16.c"/>
        <files mask="arm_nn_lstm_update_output_s8_s16.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s4.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s8.c"/>
        <files mask="arm_nn_mat_mult_nt_t_s8_s32.c"/>
        <files mask="arm_nn_mat_mul_core_1x_s8.c"/>
        <files mask="arm_nn_mat_mul_core_4x_s8.c"/>
        <files mask="arm_nn_mat_mul_kernel_s16.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s16.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s4.c"/>
        <files mask="arm_nn_vec_mat_mult_t_s8.c"/>
        <files mask="arm_nn_vec_mat_mult_t_svdf_s8.c"/>
        <files mask="arm_nn_vec_mat_mul_result_acc_s8.c"/>
        <files mask="arm_q7_to_q15_with_offset.c"/>
        <files mask="arm_s8_to_s16_unordered_with_offset.c"/>
      </source>
      <source relative_path="Source/PoolingFunctions" type="src">
        <files mask="arm_avgpool_get_buffer_sizes_s16.c"/>
        <files mask="arm_avgpool_get_buffer_sizes_s8.c"/>
        <files mask="arm_avgpool_s16.c"/>
        <files mask="arm_avgpool_s8.c"/>
        <files mask="arm_max_pool_s16.c"/>
        <files mask="arm_max_pool_s8.c"/>
      </source>
      <source relative_path="Source/ReshapeFunctions" type="src">
        <files mask="arm_reshape_s8.c"/>
      </source>
      <source relative_path="Source/SoftmaxFunctions" type="src">
        <files mask="arm_nn_softmax_common_s8.c"/>
        <files mask="arm_softmax_s16.c"/>
        <files mask="arm_softmax_s8.c"/>
        <files mask="arm_softmax_s8_s16.c"/>
        <files mask="arm_softmax_u8.c"/>
      </source>
      <source relative_path="Source/SVDFunctions" type="src">
        <files mask="arm_svdf_get_buffer_sizes_s8.c"/>
        <files mask="arm_svdf_s8.c"/>
        <files mask="arm_svdf_state_s16_s8.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_NN_Source.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_Secure.MIMXRT798S" name="CMSIS_RTOS2_Keil_RTX5" brief="CMSIS-RTOS2 RTX5 for Cortex-M, SC000, C300 and Armv8-M (Library)" version="2.1.3" full_name="CMSIS RTOS2 Keil RTX5" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Device_API_OSTick.MIMXRT798S"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
        <files mask="rtx_def.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <source compiler="compiler_gcc" relative_path="RTX/Library/GCC" project_relative_path="./" type="lib" device_cores="cm33_core0_MIMXRT798S cm33_core1_MIMXRT798S">
        <files mask="libRTX_V8MMF.a"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_RTOS2_Secure.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Source" type="c_include"/>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_NonSecure.MIMXRT798S" name="CMSIS_RTOS2_Keil_RTX5_NS" brief="CMSIS-RTOS2 RTX5 for Armv8-M Non-Secure Domain (Library)" version="2.1.3" full_name="CMSIS RTOS2 Keil RTX5 Non Secure" category="CMSIS/RTOS2" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Device_API_OSTick.MIMXRT798S"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
        <files mask="rtx_def.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <source compiler="compiler_gcc" relative_path="RTX/Library/GCC" project_relative_path="./" type="lib" device_cores="cm33_core0_MIMXRT798S cm33_core1_MIMXRT798S">
        <files mask="libRTX_V8MMFN.a"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="CMSIS_RTOS2_NonSecure.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Source" type="c_include"/>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.MIMXRT798S" name="common" brief="COMMON Driver" version="2.4.2" full_name="COMMON Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.reset.MIMXRT798S"/>
          <component_dependency value="platform.drivers.clock.MIMXRT798S"/>
          <component_dependency value="device.MIMXRT798S_CMSIS.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source relative_path="./" type="src" device_cores="cm33_core0_MIMXRT798S cm33_core1_MIMXRT798S">
        <files mask="fsl_common_arm.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_core0_MIMXRT798S cm33_core1_MIMXRT798S">
        <files mask="fsl_common_arm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_common.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.assert.MIMXRT798S" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_assert.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_assert.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.assert_lite.MIMXRT798S" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console_lite.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_assert.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_assert_lite.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.str.MIMXRT798S" name="utility_str" brief="Utility str" version="1.0.0" full_name="Utility str" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_str.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console.MIMXRT798S" name="debug_console" brief="Utility debug_console" version="1.0.1" full_name="Utility debug_console" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="utility.str.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_debug_console.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.power_manager_core.MIMXRT798S" name="power_manager_core" brief="Component power manager core level" version="2.0.0" full_name="Component power manager core" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="core/components/power_manager/core" project_base_path="component/power_manager">
      <defines>
        <define name="GENERIC_LIST_LIGHT" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.lists.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pm_core.h"/>
        <files mask="fsl_pm_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pm_core.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_power_manager_core.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.power_manager_MIMXRT798S.MIMXRT798S" name="power_manager_device" brief="Component power manager device level" version="2.0.0" full_name="Component power manager device level" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/power_manager/devices/MIMXRT798S" project_base_path="component/power_manager/devices/MIMXRT798S">
      <dependencies>
        <all>
          <component_dependency value="component.power_manager_core.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pm_device.h"/>
        <files mask="fsl_pm_device_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pm_device.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_power_manager_MIMXRT798S.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.audio_sai_edma_adapter.MIMXRT798S" name="sai_edma_adapter" brief="Component sai_edma_adapter" version="1.0.0" full_name="Component sai_edma_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/audio" project_base_path="component/audio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.sai_edma.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_audio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_sai.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_audio_sai_edma_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.button.MIMXRT798S" name="button" brief="Component button" version="1.0.0" full_name="Component button" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.timer_manager.MIMXRT798S"/>
          <component_dependency value="component.gpio_adapter.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_button.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.codec.MIMXRT798S" name="codec" brief="Driver codec" version="2.3.1" full_name="Driver codec" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.wm8962_adapter.MIMXRT798S"/>
            <component_dependency value="component.cs42448_adapter.MIMXRT798S"/>
            <component_dependency value="component.codec_adapters.MIMXRT798S"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_codec.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_adapters.MIMXRT798S" name="codec_adapters" brief="Component codec adapters for multi codec" version="2.2.0" full_name="Component codec_adapters" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/" project_base_path="codec">
      <defines>
        <define name="CODEC_MULTI_ADAPTERS" value="1"/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="driver.codec.MIMXRT798S"/>
              <component_dependency value="component.wm8962_adapter.MIMXRT798S"/>
            </all>
            <all>
              <component_dependency value="platform.drivers.common.MIMXRT798S"/>
              <component_dependency value="component.cs42448_adapter.MIMXRT798S"/>
            </all>
          </any_of>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="port" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_codec_adapters.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./port" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8962_adapter.MIMXRT798S" name="codec_wm8962_adapter" brief="Component wm8962 adapter for single codecs" version="2.2.0" full_name="Component wm8962_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8962.MIMXRT798S"/>
          <component_dependency value="driver.codec.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="port/wm8962" type="src">
        <files mask="fsl_codec_wm8962_adapter.c"/>
      </source>
      <source relative_path="port/wm8962" type="c_include">
        <files mask="fsl_codec_wm8962_adapter.h"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_wm8962_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./port/wm8962" type="c_include"/>
        <include_path relative_path="./port/" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.cs42448_adapter.MIMXRT798S" name="codec_cs42448_adapter" brief="Component cs42448 adapter for single codec" version="2.2.1" full_name="Component cs42448_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42448.MIMXRT798S"/>
          <component_dependency value="driver.codec.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="port/cs42448" type="src">
        <files mask="fsl_codec_cs42448_adapter.c"/>
      </source>
      <source relative_path="port/cs42448" type="c_include">
        <files mask="fsl_codec_cs42448_adapter.h"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_cs42448_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./port/cs42448" type="c_include"/>
        <include_path relative_path="./port/" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_i2c.MIMXRT798S" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/codec/i2c" project_base_path="codec">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.lpi2c_adapter.MIMXRT798S"/>
            <component_dependency value="component.i3c_adapter.MIMXRT798S"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_codec_i2c.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.MIMXRT798S" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.osa.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_common_task.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8962.MIMXRT798S" name="wm8962" brief="Driver wm8962" version="2.2.0" full_name="Driver wm8962" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8962" project_base_path="codec">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
        <define name="BOARD_USE_CODEC" value="1"/>
        <define name="CODEC_WM8962_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.codec_i2c.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8962.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8962.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wm8962.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.cs42448.MIMXRT798S" name="cs42448" brief="Driver cs42448" version="2.0.1" full_name="Driver cs42448" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/codec/cs42448" project_base_path="codec">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
        <define name="CODEC_CS42448_ENABLE" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.codec_i2c.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42448.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42448.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cs42448.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.ektf2k.MIMXRT798S" name="ektf2k" brief="Driver ektf2k" version="1.0.0" full_name="Driver ektf2k" category="Device/SDK Drivers" user_visible="false" type="board_component" package_base_path="core/components/ektf2k" project_base_path="touchpanel">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ektf2k.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ektf2k.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ektf2k.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.nor_flash-controller-lpspi.MIMXRT798S" name="nor_flash-controller-lpspi" brief="Driver nor_flash-controller-lpspi" version="1.0.0" full_name="Driver nor_flash-controller-lpspi" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/flash/nor/lpspi" project_base_path="nor_flash">
      <dependencies>
        <all>
          <component_dependency value="driver.nor_flash-common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpspi.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_nor_flash.c"/>
        <files mask="fsl_lpspi_mem_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_nor_flash.h"/>
        <files mask="fsl_lpspi_mem_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_nor_flash-controller-lpspi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.nor_flash-controller-xspi.MIMXRT798S" name="nor_flash-controller-xspi" brief="Driver nor_flash-controller-xspi" version="1.0.0" full_name="Driver nor_flash-controller-xspi" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/flash/nor/xspi" project_base_path="nor_flash">
      <dependencies>
        <all>
          <component_dependency value="driver.nor_flash-common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.xspi.MIMXRT798S"/>
          <component_dependency value="driver.sfdp_parser.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_xspi_nor_flash.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_xspi_nor_flash.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_nor_flash-controller-xspi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.ft3267.MIMXRT798S" name="ft3267" brief="Touch panel controller FT3267 driver" version="1.0.1" full_name="Driver ft3267" category="Device/SDK Drivers" user_visible="false" type="board_component" package_base_path="core/components/ft3267" project_base_path="touchpanel">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ft3267.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ft3267.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ft3267.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.ft5406.MIMXRT798S" name="ft5406" brief="Driver ft5406" version="1.0.0" full_name="Driver ft5406" category="Device/SDK Drivers" user_visible="false" type="board_component" package_base_path="core/components/ft5406" project_base_path="touchpanel">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ft5406.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ft5406.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ft5406.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.fxos8700cq.MIMXRT798S" name="fxos8700cq" brief="Driver fxos8700cq" version="1.0.0" full_name="Driver fxos8700cq" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/fxos8700cq" project_base_path="accel">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_fxos8700cq.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.MIMXRT798S" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.1" full_name="Component gpio_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_gpio_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.gt911.MIMXRT798S" name="gt911" brief="Driver gt911" version="1.0.4" full_name="Driver gt911" category="Device/SDK Drivers" user_visible="false" type="board_component" package_base_path="core/components/gt911" project_base_path="touchpanel">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gt911.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gt911.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_gt911.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpi2c_adapter.MIMXRT798S" name="lpi2c_adapter" brief="Component lpi2c_adapter" version="1.0.0" full_name="Component lpi2c_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpi2c.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpi2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpi2c_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_adapter.MIMXRT798S" name="i3c_adapter" brief="Component i3c_adapter" version="1.0.0" full_name="Component i3c_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <defines>
        <define name="SDK_I3C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.i3c.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i3c_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_bus.MIMXRT798S" name="i3c_bus" brief="Component i3c_bus" version="1.0.1" full_name="Component i3c_bus" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/i3c_bus" project_base_path="component/i3c_bus">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.lists.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_i3c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i3c_bus.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_bus_adapter.MIMXRT798S" name="i3c_bus_adapter" brief="Component i3c_bus_adapter" version="1.1.0" full_name="Component i3c_bus_adapter" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/i3c_bus" project_base_path="component/i3c_bus">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i3c.MIMXRT798S"/>
          <component_dependency value="component.i3c_bus.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_i3c_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_i3c_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_i3c_bus_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.MIMXRT798S" name="led" brief="Component led" version="1.0.0" full_name="Component led" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.timer_manager.MIMXRT798S"/>
          <component_dependency value="component.gpio_adapter.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_led.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MIMXRT798S" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lists.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.MIMXRT798S" name="log" brief="Component log" version="1.0.0" full_name="Component log" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="utility.str.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_log.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.MIMXRT798S" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.log.MIMXRT798S"/>
          <component_dependency value="utility.debug_console.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_log_backend_debugconsole.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole_lite.MIMXRT798S" name="log_backend_debug_console_lite" brief="Component log backend debug console lite" version="1.0.0" full_name="Component log backend debug console lite" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.log.MIMXRT798S"/>
          <component_dependency value="utility.debug_console_lite.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_log_backend_debugconsole_lite.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.MIMXRT798S" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.log.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_log_backend_ringbuffer.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash_file.MIMXRT798S" name="mflash file" brief="mflash file" version="1.0.0" full_name="statically allocated file system for mflash" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <dependencies>
        <all>
          <component_dependency value="component.mflash.rt700.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_file.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="mflash_file.c"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mflash_file.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash_dummy.MIMXRT798S" name="mflash dummy" brief="dummy file for overwriting mflash when dowloading" version="1.0.0" full_name="dummy file" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <dependencies>
        <all>
          <component_dependency value="component.mflash_file.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="mflash_dummy.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mflash_dummy.MIMXRT798S.cmake" hidden="true"/>
      </source>
    </component>
    <component id="component.mflash.rt700.MIMXRT798S" name="mflash rt700" brief="mflash rt700" version="1.0.0" full_name="mflash rt700" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/flash/mflash/mimxrt700" project_base_path="flash/mflash/mimxrt700">
      <defines>
        <define name="MFLASH_FILE_BASEADDR" value="7340032"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.mflash.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.xspi.MIMXRT798S"/>
          <component_dependency value="platform.drivers.power.MIMXRT798S"/>
          <board_dependency value="mimxrt700evk"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_drv.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="mflash_drv.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mflash_rt700.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.MIMXRT798S" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.lists.MIMXRT798S"/>
          <component_dependency value="component.osa_interface.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_bm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.MIMXRT798S" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" category="NXP Component/OS Abstraction Layer" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.lists.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT798S" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT798S" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_interface.MIMXRT798S" name="osa_interface" brief="Component osa interface" version="1.0.0" full_name="Component osa interface" category="NXP Component/OS Abstraction Layer" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.lists.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_osa_interface.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.MIMXRT798S" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_panic.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.pca9422.MIMXRT798S" name="pca9422" brief="Driver pca9422" version="1.0.0" full_name="Driver pca9422" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/pca9422" project_base_path="pmic_driver">
      <defines>
        <define name="SDK_I2C_BASED_COMPONENT_USED" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.power.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pca9422.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pca9422.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pca9422.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.reset_adapter.MIMXRT798S" name="reset_adapter" brief="Component reset_adapter" version="1.0.0" full_name="Component reset_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/reset" project_base_path="component/reset">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_reset_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.MIMXRT798S" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_software_rng_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MIMXRT798S" name="serial_manager" brief="Component serial_manager" version="1.0.1" full_name="Serial Manager" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MIMXRT798S"/>
            <component_dependency value="component.serial_manager_virtual.MIMXRT798S"/>
            <component_dependency value="component.serial_manager_swo.MIMXRT798S"/>
            <component_dependency value="component.serial_manager_spi.MIMXRT798S"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.lists.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_spi.MIMXRT798S" name="serial_manager_spi" brief="Component serial_manager_spi" version="1.0.0" full_name="Serial Manager spi" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SPI" value="1"/>
        <define name="SERIAL_PORT_TYPE_SPI_MASTER" value="1"/>
        <define name="SERIAL_PORT_TYPE_SPI_SLAVE" value="1"/>
        <define name="SERIAL_MANAGER_NON_BLOCKING_MODE" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpspi.MIMXRT798S"/>
          <component_dependency value="component.lpspi_adapter.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_spi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_spi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_spi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MIMXRT798S" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_virtual.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.MIMXRT798S" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <any_of>
            <device_core_dependency value="cm33_core0_MIMXRT798S"/>
            <device_core_dependency value="cm33_core1_MIMXRT798S"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.serial_manager.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_serial_manager_swo.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.MIMXRT798S" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" category="Device/SDK Utilities" user_visible="true" type="utilities" package_base_path="core/utilities/shell" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.str.MIMXRT798S"/>
          <component_dependency value="component.lists.MIMXRT798S"/>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="utility_shell.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpspi_adapter.MIMXRT798S" name="lpspi_adapter" brief="Component lpspi_adapter" version="1.0.0" full_name="Component lpspi_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/spi" project_base_path="component/spi">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpspi.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_spi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpspi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpspi_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.ssd1963.MIMXRT798S" name="ssd1963" brief="Driver ssd1963" version="1.2.0" full_name="Driver ssd1963" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/ssd1963" project_base_path="lcdc">
      <dependencies>
        <all>
          <component_dependency value="driver.dbi.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ssd1963.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ssd1963.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ssd1963.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ctimer_adapter.MIMXRT798S" name="ctimer_adapter" brief="Component ctimer_adapter" version="1.0.0" full_name="Component ctimer_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <defines>
        <define name="TIMER_PORT_TYPE_CTIMER" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.ctimer.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ctimer_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mrt_adapter.MIMXRT798S" name="mrt_adapter" brief="Component mrt_adapter" version="1.0.0" full_name="Component mrt_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <defines>
        <define name="TIMER_PORT_TYPE_MRT" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.mrt.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_mrt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_mrt_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ostimer_adapter.MIMXRT798S" name="ostimer_adapter" brief="Component ostimer_adapter" version="1.0.0" full_name="Component ostimer_adapter" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <defines>
        <define name="TIMER_PORT_TYPE_OSTIMER" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.ostimer.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ostimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_ostimer_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.MIMXRT798S" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <any_of>
            <component_dependency value="component.ctimer_adapter.MIMXRT798S"/>
            <component_dependency value="component.mrt_adapter.MIMXRT798S"/>
            <component_dependency value="component.ostimer_adapter.MIMXRT798S"/>
          </any_of>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="component.lists.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_timer_manager.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.MIMXRT798S" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" category="Device/SDK Drivers" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpuart.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpuart_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_dma_adapter.MIMXRT798S" name="lpuart_dma_adapter" brief="Component lpuart_dma_adapter" version="1.0.0" full_name="lpuart_dma_adapter" category="Device/SDK Drivers" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <defines>
        <define name="HAL_UART_DMA_ENABLE" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MIMXRT798S"/>
          <component_dependency value="component.timer_manager.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm_lpuart_edma.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="component_lpuart_dma_adapter.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.MIMXRT798S" name="gpio" brief="GPIO Driver" version="2.7.3" full_name="GPIO Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_gpio.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux.MIMXRT798S" name="inputmux" brief="INPUTMUX Driver" version="2.0.7" full_name="INPUTMUX Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/inputmux" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.inputmux_connections.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_inputmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_inputmux.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mu1.MIMXRT798S" name="mu" brief="MU Driver" version="2.5.0" full_name="MU Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/mu1" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_mu1.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sema42.MIMXRT798S" name="sema42" brief="SEMA42 Driver" version="2.0.4" full_name="SEMA42 Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/sema42" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sema42.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sema42.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sema42.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pint.MIMXRT798S" name="pint" brief="PINT Driver" version="2.1.13" full_name="PINT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/pint" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pint.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pint.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pint.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.acmp.MIMXRT798S" name="acmp" brief="ACMP Driver" version="2.3.0" full_name="ACMP Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/acmp" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_acmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_acmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_acmp.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpadc.MIMXRT798S" name="lpadc" brief="LPADC Driver" version="2.8.4" full_name="LPADC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpadc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpadc.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.xspi.MIMXRT798S" name="xspi" brief="XSPI Driver" version="2.2.1" full_name="XSPI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/xspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_xspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_xspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_xspi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio.MIMXRT798S" name="flexio" brief="FLEXIO Driver" version="2.2.2" full_name="FLEXIO Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MIMXRT798S" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.5.0" full_name="FLEXIO I2C Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio/i2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio_i2c_master.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s.MIMXRT798S" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio/i2s" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio_i2s.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_mculcd.MIMXRT798S" name="flexio_mculcd" brief="FLEXIO MCULCD Driver" version="2.1.0" full_name="FLEXIO MCULCD Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio/mculcd" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_mculcd.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_mculcd.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio_mculcd.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi.MIMXRT798S" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.3.4" full_name="FLEXIO SPI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio/spi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio_spi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart.MIMXRT798S" name="flexio_uart" brief="FLEXIO UART Driver" version="2.5.0" full_name="FLEXIO UART Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/flexio/uart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_flexio_uart.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpflexcomm.MIMXRT798S" name="lpflexcomm" brief="LPFLEXCOMM Driver" version="2.2.1" full_name="LPFLEXCOMM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpflexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpflexcomm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpflexcomm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpflexcomm.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpflexcomm_lpi2c.MIMXRT798S" name="lpi2c" brief="LPI2C Driver" version="2.2.3" full_name="LPI2C Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpflexcomm/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpi2c.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpflexcomm_lpuart.MIMXRT798S" name="lpuart" brief="LPUART Driver" version="2.3.2" full_name="LPUART Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpflexcomm/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpuart.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpflexcomm_lpspi.MIMXRT798S" name="lpspi" brief="LPSPI Driver" version="2.2.6" full_name="LPSPI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lpflexcomm/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lpflexcomm.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpspi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai.MIMXRT798S" name="sai" brief="SAI Driver" version="2.4.3" full_name="SAI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sai.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i3c_edma.MIMXRT798S" name="i3c_edma" brief="I3C EDMA Driver" version="2.2.9" full_name="I3C EDMA Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/i3c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i3c.MIMXRT798S"/>
          <component_dependency value="platform.drivers.edma4.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i3c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i3c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_i3c_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i3c.MIMXRT798S" name="i3c" brief="I3C Driver" version="2.12.0" full_name="I3C Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/i3c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i3c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_i3c.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ctimer.MIMXRT798S" name="ctimer" brief="CTimer Driver" version="2.3.1" full_name="CTimer Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/ctimer" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ctimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ctimer.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mrt.MIMXRT798S" name="mrt" brief="MRT Driver" version="2.0.4" full_name="MRT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/mrt" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mrt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mrt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_mrt.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ostimer.MIMXRT798S" name="ostimer" brief="OSTimer Driver" version="2.2.2" full_name="OSTimer Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/ostimer" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ostimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ostimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ostimer.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.ft5406_rt.MIMXRT798S" name="ft5406_rt" brief="Driver ft5406_rt" version="1.0.0" full_name="Driver ft5406_rt" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/ft5406_rt" project_base_path="touchpanel">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpflexcomm_lpi2c.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ft5406_rt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ft5406_rt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ft5406_rt.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-rpi.MIMXRT798S" name="display-rpi" brief="Driver display-rpi" version="1.0.0" full_name="Driver display-rpi" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/video/display/rpi" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMXRT798S"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMXRT798S"/>
          <board_dependency value="mimxrt700evk"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rpi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rpi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_display-rpi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-rm68200.MIMXRT798S" name="display-rm68200" brief="Driver display-rm68200" version="1.1.1" full_name="Driver display-rm68200" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/video/display/rm68200" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMXRT798S"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rm68200.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rm68200.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_display-rm68200.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-rm68191.MIMXRT798S" name="display-rm68191" brief="Driver display-rm68191" version="1.1.0" full_name="Driver display-rm68191" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/video/display/rm68191" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMXRT798S"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rm68191.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rm68191.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_display-rm68191.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-rm67162.MIMXRT798S" name="display-rm67162" brief="Driver display-rm67162" version="1.0.2" full_name="Driver display-rm67162" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/video/display/rm67162" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMXRT798S"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rm67162.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rm67162.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_display-rm67162.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-hx8394.MIMXRT798S" name="display-hx8394" brief="Driver display-hx8394" version="1.0.0" full_name="Driver display-hx8394" category="Device/SDK Drivers" user_visible="true" type="board_component" package_base_path="core/components/video/display/hx8394" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMXRT798S"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_hx8394.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_hx8394.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_display-hx8394.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dc-fb-dbi.MIMXRT798S" name="dc-fb-dbi" brief="Driver dc-fb-dbi" version="1.0.0" full_name="Driver dc-fb-dbi" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display/dc/dbi" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.dc-fb-common.MIMXRT798S"/>
          <component_dependency value="driver.dbi.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dc_fb_dbi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dc_fb_dbi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dc-fb-dbi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dc-fb-ssd1963.MIMXRT798S" name="dc-fb-ssd1963" brief="Driver dc-fb-ssd1963" version="1.0.2" full_name="Driver dc-fb-ssd1963" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display/dc/ssd1963" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.dc-fb-common.MIMXRT798S"/>
          <component_dependency value="driver.ssd1963.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dc_fb_ssd1963.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dc_fb_ssd1963.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dc-fb-ssd1963.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dc-fb-lcdif.MIMXRT798S" name="dc-fb-lcdif" brief="Driver dc-fb-lcdif" version="1.0.1" full_name="Driver dc-fb-lcdif" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display/dc/lcdif" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.dc-fb-common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.lcdif.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dc_fb_lcdif.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dc_fb_lcdif.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dc-fb-lcdif.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-mipi-dsi-cmd.MIMXRT798S" name="display-mipi-dsi-cmd" brief="Driver display-mipi-dsi-cmd" version="1.0.2" full_name="Driver display-mipi-dsi-cmd" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/video/display/mipi_dsi_cmd" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.mipi_dsi.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mipi_dsi_cmd.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mipi_dsi_cmd.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_display-mipi-dsi-cmd.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-common.MIMXRT798S" name="display-common" brief="Driver display-common" version="1.0.0" full_name="Driver display-common" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_display.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_display-common.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dc-fb-common.MIMXRT798S" name="dc-fb-common" brief="Driver dc-fb-common" version="1.0.0" full_name="Driver dc-fb-common" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display/dc" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dc_fb.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dc-fb-common.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dc-fb-dsi-cmd.MIMXRT798S" name="dc-fb-dsi-cmd" brief="Driver dc-fb-dsi-cmd" version="1.1.1" full_name="Driver dc-fb-dsi-cmd" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display/dc/dsi_cmd" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.dc-fb-common.MIMXRT798S"/>
          <component_dependency value="driver.display-common.MIMXRT798S"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dc_fb_dsi_cmd.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dc_fb_dsi_cmd.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dc-fb-dsi-cmd.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dbi.MIMXRT798S" name="dbi" brief="Driver dbi" version="1.0.0" full_name="Driver dbi" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display/dbi" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dbi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dbi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dbi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dbi_flexio_edma.MIMXRT798S" name="dbi_flexio_edma" brief="Driver dbi_flexio_edma" version="1.0.1" full_name="Driver dbi_flexio_edma" category="Device/SDK Drivers" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display/dbi/flexio" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.dbi.MIMXRT798S"/>
          <component_dependency value="platform.drivers.flexio_mculcd.MIMXRT798S"/>
          <component_dependency value="platform.drivers.flexio_mculcd_edma.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dbi_flexio_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dbi_flexio_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_dbi_flexio_edma.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.video-common.MIMXRT798S" name="video-common" brief="Driver video-common" version="1.1.0" full_name="Driver video-common" category="Device/SDK Drivers" user_visible="true" type="software_component" package_base_path="core/components/video" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_video_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_video_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_video-common.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sdadc.MIMXRT798S" name="sdadc" brief="SDADC Driver" version="2.0.0" full_name="SDADC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/sdadc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_sdadc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sdadc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_sdadc.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.jpegdec.MIMXRT798S" name="jpegdec" brief="JPEG decoder Driver" version="2.0.0" full_name="JPEG decoder Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/jpegdec" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_jpegdec.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_jpegdec.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_jpegdec.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pngdec.MIMXRT798S" name="pngdec" brief="PNGDEC Driver" version="2.0.0" full_name="PNGDEC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/pngdec" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pngdec.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pngdec.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pngdec.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mipi_dsi.MIMXRT798S" name="mipi_dsi" brief="MIPI DSI Driver" version="2.2.0" full_name="MIPI DSI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/mipi_dsi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.soc_mipi_dsi.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_mipi_dsi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mipi_dsi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_mipi_dsi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lcdif.MIMXRT798S" name="lcdif" brief="LCDIF Driver" version="2.2.0" full_name="LCDIF Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/lcdif" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lcdif.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lcdif.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lcdif.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.usdhc.MIMXRT798S" name="sdhc" brief="USDHC Driver" version="2.8.4" full_name="USDHC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/usdhc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_usdhc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usdhc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_usdhc.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.glikey.MIMXRT798S" name="glikey" brief="GLIKEY Driver" version="2.0.0" full_name="GLIKEY Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/glikey" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_glikey.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_glikey.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_glikey.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pdm.MIMXRT798S" name="pdm" brief="PDM Driver" version="2.9.1" full_name="PDM Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/pdm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pdm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pdm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_pdm.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cdog.MIMXRT798S" name="cdog" brief="cdog Driver" version="2.1.3" full_name="cdog Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/cdog" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cdog.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cdog.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_cdog.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.irtc.MIMXRT798S" name="rtc" brief="IRTC Driver" version="2.3.1" full_name="IRTC Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/irtc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_irtc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_irtc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_irtc.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wwdt.MIMXRT798S" name="wwdt" brief="WWDT Driver" version="2.1.9" full_name="WWDT Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/wwdt" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wwdt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wwdt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_wwdt.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gdet.MIMXRT798S" name="gdet" brief="GDET Driver" version="2.1.0" full_name="GDET Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/drivers/gdet" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gdet.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gdet.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_gdet.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.soc_mipi_dsi.MIMXRT798S" name="soc_mipi_dsi" brief="SOC MIPI DSI Driver" version="2.0.0" full_name="SOC MIPI DSI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_soc_mipi_dsi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_soc_mipi_dsi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.MIMXRT798S" name="clock" brief="Clock Driver" version="2.3.1" full_name="Clock Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_clock.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.reset.MIMXRT798S" name="reset" brief="Reset Driver" version="2.0.0" full_name="Reset Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_reset.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.power.MIMXRT798S" name="power" brief="Power driver" version="2.3.0" full_name="Driver power" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_power.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_power.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_power.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_iopctl.MIMXRT798S" name="iopctl" brief="iopctl Driver" version="2.0.0" full_name="iopctl Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iopctl.h"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_lpc_iopctl.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.romapi.MIMXRT798S" name="romapi" brief="ROMAPI Driver" version="2.0.0" full_name="ROMAPI Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers/romapi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
          <device_core_dependency value="cm33_core0_MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="bootloader" type="c_include">
        <files mask="fsl_romapi.h"/>
      </source>
      <source relative_path="bootloader" type="src">
        <files mask="fsl_romapi.c"/>
      </source>
      <source relative_path="otp" type="c_include">
        <files mask="fsl_romapi_otp.h"/>
      </source>
      <source relative_path="otp" type="src">
        <files mask="fsl_romapi_otp.c"/>
      </source>
      <source relative_path="nboot" type="c_include">
        <files mask="fsl_romapi_nboot.h"/>
      </source>
      <source relative_path="nboot" type="src">
        <files mask="fsl_romapi_nboot.c"/>
      </source>
      <source relative_path="iap" type="c_include">
        <files mask="fsl_romapi_iap.h"/>
        <files mask="fsl_sbloader_v3.h"/>
      </source>
      <source relative_path="iap" type="src">
        <files mask="fsl_romapi_iap.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_romapi.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./bootloader" type="c_include"/>
        <include_path relative_path="./otp" type="c_include"/>
        <include_path relative_path="./nboot" type="c_include"/>
        <include_path relative_path="./iap" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ezhv.MIMXRT798S" name="ezhv" brief="EZHV Driver" version="2.0.0" full_name="EZHV Driver" category="Device/SDK Drivers" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT798S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT798S"/>
          <component_dependency value="platform.drivers.power.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ezhv.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ezhv.c"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_ezhv.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.rtt.MIMXRT798S" name="segger_rtt" brief="SEGGER Real Time Transfer(RTT)" version="7.22.0" full_name="SEGGER RTT" category="Device/SDK Drivers" user_visible="false" type="software_component" package_base_path="core/components/rtt" project_base_path="rtt">
      <dependencies>
        <all>
          <component_dependency value="driver.rtt.template.MIMXRT798S"/>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source relative_path="RTT" type="src">
        <files mask="SEGGER_RTT.c"/>
        <files mask="SEGGER_RTT_printf.c"/>
      </source>
      <source relative_path="RTT" type="c_include">
        <files mask="SEGGER_RTT.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="Syscalls" type="src">
        <files mask="SEGGER_RTT_Syscalls_GCC.c"/>
      </source>
      <source exclude="true" relative_path="Syscalls" type="src">
        <files mask="SEGGER_RTT_Syscalls_SES.c" hidden="true"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="License.txt" hidden="true"/>
        <files mask="README.txt" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="driver_rtt.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="RTT" type="c_include"/>
        <include_path relative_path="RTT" type="asm_include"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT798S_cm33_core1.MIMXRT798S" name="MIMXRT798S_cm33_core1" brief="Device MIMXRT798S_cm33_core1" version="1.0.0" full_name="Device MIMXRT798S_cm33_core1" category="Board Support/SDK Project Template" user_visible="true" type="other" package_base_path="core/devices/MIMXRT798S" project_base_path="device">
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="arch.RISCV_Include_core.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <device_core_dependency value="hifi1_MIMXRT798S"/>
            <device_core_dependency value="hifi4_MIMXRT798S"/>
          </any_of>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MIMXRT798S_cm33_core1.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT798S_ezhv.MIMXRT798S" name="MIMXRT798S_ezhv" brief="Device MIMXRT798S_ezhv" version="1.0.0" full_name="Device MIMXRT798S_ezhv" category="Board Support/SDK Project Template" user_visible="true" type="other" package_base_path="core/devices/MIMXRT798S" project_base_path="device">
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="arch.RISCV_Include_core.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <device_core_dependency value="hifi1_MIMXRT798S"/>
            <device_core_dependency value="hifi4_MIMXRT798S"/>
          </any_of>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MIMXRT798S_ezhv.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT798S_hifi1.MIMXRT798S" name="MIMXRT798S_hifi1" brief="Device MIMXRT798S_hifi1" version="1.0.0" full_name="Device MIMXRT798S_hifi1" category="Board Support/SDK Project Template" user_visible="true" type="other" package_base_path="core/devices/MIMXRT798S" project_base_path="device">
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="arch.RISCV_Include_core.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <device_core_dependency value="hifi1_MIMXRT798S"/>
            <device_core_dependency value="hifi4_MIMXRT798S"/>
          </any_of>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MIMXRT798S_hifi1.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT798S_hifi4.MIMXRT798S" name="MIMXRT798S_hifi4" brief="Device MIMXRT798S_hifi4" version="1.0.0" full_name="Device MIMXRT798S_hifi4" category="Board Support/SDK Project Template" user_visible="true" type="other" package_base_path="core/devices/MIMXRT798S" project_base_path="device">
      <dependencies>
        <all>
          <any_of>
            <all>
              <component_dependency value="arch.RISCV_Include_core.MIMXRT798S"/>
              <device_core_dependency value="ezhv_MIMXRT798S"/>
            </all>
            <device_core_dependency value="hifi1_MIMXRT798S"/>
            <device_core_dependency value="hifi4_MIMXRT798S"/>
          </any_of>
          <device_dependency value="MIMXRT798S"/>
        </all>
      </dependencies>
      <source toolchain="armgcc" relative_path="./" type="workspace">
        <files mask="device_MIMXRT798S_hifi4.MIMXRT798S.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
